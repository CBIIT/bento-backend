---
- name: install docker and docker-compose
  pip:
    name: "{{item}}"
    state: present
  loop:
    - docker
    - docker-compose

- name: create OpenPedCan-api-secrets directory
  file: 
    path: "{{workspace}}/OpenPedCan-api-secrets"
    state: directory

- name: copy DB environment files
  template:  src={{item.src}} dest={{item.dest}}
  with_items:
    - { src: 'access_db.env.j2', dest: '{{workspace}}//OpenPedCan-api-secrets//access_db.env' }
    - { src: 'common_db.env.j2', dest: '{{workspace}}//OpenPedCan-api-secrets//common_db.env' }
    - { src: 'load_db.env.j2', dest: '{{workspace}}//OpenPedCan-api-secrets//load_db.env' }
   
- name: login into ecr
  #shell: "$(/bin/aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin {{ecr}})"
  shell: "docker login -u AWS -p $(aws ecr get-login-password --region us-east-1) {{ecr}}"
  ignore_errors: True
  register: ecr_login

  - name: listing the contents
  shell: ls
  register: shell_result
  
- debug:
        var: shell_result.stdout_lines

- name:  build {{ecr}}/OpenPedCan:HttpServer image
  docker_image:
    path: "{{workspace}}/{{project}}/"
    dockerfile: "{{workspace}}/{{project}}/Dockerfile"
    pull: yes
    name: "{{ecr}}/OpenPedCan"
    tag: "HttpServer-{{version}}"
    push: yes
    

- name:  build {{ecr}}/OpenPedCan:DatabaseServer image
  docker_image:
    path: "{{workspace}}/{{project}}"
    dockerfile: "{{workspace}}/{{project}}/db/build_tools/build_db.Dockerfile"
    pull: yes
    name: "{{ecr}}/OpenPedCan"
    tag: "DatabaseServer-{{version}}"
    push: yes
