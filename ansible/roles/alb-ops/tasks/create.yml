---
# - name: lookup alb name
#   set_fact:
#     alb_name: "{{item.{{tier}}}}"
#   loop: "{{lookup('dict', {{project}}) }}"
     
- name: gather info about alb
  elb_application_lb_info:
    names: 
      - DEV-A-Appli-Caninedata-8UHLKJYN
    region: "{{region}}"
  register: alb_info


- name: set facts
  set_fact:
    # alb_subnets: "{{ alb_info.load_balancers[0].availability_zones| json_query('[*].subnet_id')}}"
    # alb_sg: "{{ alb_info.load_balancers[0].security_groups |list}}"
    # alb_name: "{{ alb_info.load_balancers[0].load_balancer_name }}"
    certificate_arn: "{{alb_info.load_balancers[0].listeners[0].certificates[0].certificate_arn}}"
    listener_arn: "{{alb_info.load_balancers[0].listeners[0].listener_arn}}"

- debug:
    msg: "{{alb_info}}"

- name: copy application.properties file to /src/main/resources/
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
  loop:
    - { src: 'actions.json.j2', dest: "{{workspace}}/actions.json" }
    - { src: 'conditions.json.j2',dest: "{{workspace}}/conditions.json"}

- name: create alb rule
  command: >
    aws elbv2 create-rule 
    --listener-arn {{listener_arn}}
    --region {{region}}
    --priority 1
    --conditions file://{{workspace}}/conditions.json
    --actions file://{{workspace}}/actions.json
  register: rule

- debug:
    msg: "{{rule.stdout}}"

- debug:
    msg: "{{rule.stdout|json_query('.Rules')}}"

# - name: store rule arn to file
#   copy: 
#     content: "{{ rule.stdout.RuleArn }}" 
#     dest: "{{workspace}}/{{tier}}-rule-arn.txt"





