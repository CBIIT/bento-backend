---
- name: set dev environment facts
  set_fact:
    NEO4J_IN_ip: "{{ lookup('env','NEO4J_IN_DEV_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "dev"

- name: set qa environment facts
  set_fact:
    NEO4J_IN_ip: "{{ lookup('env','NEO4J_IN_QA_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "qa"

- name: set stage environment facts
  set_fact:
    NEO4J_IN_ip: "{{ lookup('env','NEO4J_IN_PERF_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "perf"

- name: set prod environment facts
  set_fact:
    NEO4J_IN_ip: "{{ lookup('env','NEO4J_IN_PROD_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "prod"

- name: remove the application_example.properties file 
  file:
    path: "{{workspace}}/CCDI-Portal-Service/src/main/resources/application_example.properties"
    state: absent

- name: copy application.properties file to /src/main/resources/
  template:
    src: "{{workspace}}/CCDI-Portal-Service/src/main/resources/application.properties.j2"
    dest: "{{workspace}}/CCDI-Portal-Service/src/main/resources/application.properties"

- name: create graphql directory in backend
  file:
    state: directory
    path: "{{workspace}}/CCDI-Portal-Service/src/main/resources/graphql"

- name: create yaml directory in backend
  file:
    state: directory
    path: "{{workspace}}/CCDI-Portal-Service/src/main/resources/yaml"

- name: copy schema from frontend to resources
  template:
    src: "{{workspace}}/CCDI-Portal-WebPortal/graphql/{{ schema_file }}"
    dest: "{{workspace}}/CCDI-Portal-Service/src/main/resources/graphql/{{ schema_file }}"

- name: verify redis schema file exists
  stat:
    path: "{{workspace}}/CCDI-Portal-WebPortal/graphql/{{ redis_schema_file }}"
  register: redis_schema

- name: verify redis init queries file exists
  stat:
    path: "{{workspace}}/CCDI-Portal-WebPortal/yaml/{{ redis_init_queries_file }}"
  register: redis_queries

- name: verify test queries file exists
  stat:
    path: "{{workspace}}/CCDI-Portal-WebPortal/yaml/{{ test_queries_file }}"
  register: test_queries

- name: copy redis schema from frontend to resources
  template:
    src: "{{workspace}}/CCDI-Portal-WebPortal/graphql/{{ redis_schema_file }}"
    dest: "{{workspace}}/CCDI-Portal-Service/src/main/resources/graphql/{{ redis_schema_file }}"
  when: redis_schema.stat.exists

- name: copy redis init queries from frontend to resources
  template:
    src: "{{workspace}}/CCDI-Portal-WebPortal/yaml/{{ redis_init_queries_file }}"
    dest: "{{workspace}}/CCDI-Portal-Service/src/main/resources/yaml/{{ redis_init_queries_file }}"
  when: redis_queries.stat.exists

- name: copy test queries from frontend to resources
  template:
    src: "{{workspace}}/CCDI-Portal-WebPortal/yaml/{{ test_queries_file }}"
    dest: "{{workspace}}/CCDI-Portal-Service/src/main/resources/yaml/{{ test_queries_file }}"
  when: test_queries.stat.exists

- name: build springboot code
  command: mvn package -DskipTests
  args:
    chdir: "{{workspace}}/CCDI-Portal-Service"

- name: copy Bento-0.0.1.war to api.war
  copy:
    remote_src: yes
    src: "{{workspace}}//CCDI-Portal-Service/target/Bento-0.0.1.war"
    dest: "{{workspace}}//CCDI-Portal-Service/target/ROOT.war"

- name: log into DockerHub
  docker_login:
    username: "{{docker_user}}"
    password: "{{docker_password}}"

- name: build cbiitssrepo/{{stack_name}}-backend image
  docker_image:
    build:
      path: "{{workspace}}"
      dockerfile: "{{workspace}}/icdc-devops/docker/dockerfiles/backend-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/{{stack_name}}-backend
    tag: "{{backend_version}}-{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/in-backend image
  docker_image:
    name: "cbiitssrepo/{{stack_name}}-backend:{{backend_version}}-{{build_number}}"
    repository: cbiitssrepo/{{stack_name}}-backend:latest
    force_tag: yes
    push: yes
    source: local
###########################################
- name: remove .env
  file:
    state: absent
    path: "{{workspace}}/CCDI-Portal-WebPortal/.env"

- name: copy  nginx conf
  copy:
    remote_src: yes
    src: '{{workspace}}/icdc-devops/docker/dockerfiles/nginx.conf'
    dest: '{{workspace}}/CCDI-Portal-WebPortal/nginx.conf'

- name: copy entrypoint.sh to workspace
  copy:
    src: "nginx-entrypoint.sh"
    dest: "{{workspace}}/CCDI-Portal-WebPortal/nginx-entrypoint.sh"
    mode: 0755
# - name: copy environment file to {{workspace}}/bento-frontend
#   template:
#     src: env.j2
#     dest: "{{workspace}}/bento-frontend/.env"
- name: run npm install in {{workspace}}/CCDI-Portal-WebPortal/
  command: "{{item}}"
  args:
    chdir: "{{workspace}}/CCDI-Portal-WebPortal"
  loop:
    # - npm install npm@7.7.6 -g
    - npm install
    - npm run build

- name: copy env to dist
  copy:
    # remote_src: yes
    src: inject.template.js
    dest: "{{workspace}}/CCDI-Portal-WebPortal/dist/inject.template.js"
    mode: 0755
          
- name: build cbiitssrepo/{{stack_name}}-frontend image
  docker_image:
    build:
      path: "{{workspace}}/CCDI-Portal-WebPortal"
      dockerfile: "{{workspace}}/icdc-devops/docker/dockerfiles/frontend-icdc-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/{{stack_name}}-frontend
    tag: "{{frontend_version}}-{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/in-frontend image
  docker_image:
    name: "cbiitssrepo/{{stack_name}}-frontend:{{frontend_version}}-{{build_number}}"
    repository: cbiitssrepo/{{stack_name}}-frontend:latest
    force_tag: yes
    push: yes
    source: local



    