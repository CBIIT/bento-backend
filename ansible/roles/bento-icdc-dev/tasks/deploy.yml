---
############################################################################################################################

#     Prepare host for update

############################################################################################################################

- name: log into DockerHub
  docker_login:
    username: "{{docker_user}}"
    password: "{{docker_password}}"
    registry: https://ncidockerhub.nci.nih.gov
    
- name: verify host
  file: 
    path: /tmp/myworkspace
    state: directory


- name: remove frontend container
  docker_container:
    name: frontend
    state: absent
  tags:
    - frontend
    - all

- name: remove backend container
  docker_container:
    name: backend
    state: absent
  tags:
    - backend
    - all


############################################################################################################################

#     Update containers

############################################################################################################################

- name: start sumologic syslog service
  docker_container:
    name: sumologic-syslog
    image: sumologic/collector:latest-syslog
    env:
      - SUMO_COLLECTOR_NAME: "{{ app_name }}-syslog-{{ docker_host }}"
      - SUMO_ACCESS_ID: "{{ sumo_access_id }}"
      - SUMO_ACCESS_KEY: "{{ sumo_access_key }}"
      - SUMO_COLLECTOR_NAME_PREFIX: ""
      - SUMO_CLOBBER: "true"
    state: started
    restart_policy: always
    ports:
     - "514:514"
  tags:
    - sumologic
    - monitoring

- name: start sumologic docker service
  docker_container:
    name: sumologic-docker
    image: sumologic/collector:latest
    env:
      - SUMO_COLLECTOR_NAME: "{{ app_name }}-docker-{{ docker_host }}"
      - SUMO_ACCESS_ID: "{{ sumo_access_id }}"
      - SUMO_ACCESS_KEY: "{{ sumo_access_key }}"
      - SUMO_COLLECTOR_NAME_PREFIX: ""
      - SUMO_CLOBBER: "true"
    state: started
    restart_policy: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
  tags:
    - sumologic
    - monitoring

- name: start newrelic docker service
  docker_container:
    name: newrelic-docker
    image: newrelic/infrastructure:latest
    env:
      - NRIA_LICENSE_KEY: "{{ newrelic_license_key }}"
      - NRIA_DISPLAY_NAME: "{{ app_name }}-docker-{{ docker_host }}"
      - NEW_RELIC_HOST: "gov-collector.newrelic.com"
    state: started
    restart_policy: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/:/host"
  tags:
    - newrelic
    - monitoring

- name: start icdc backend container
  docker_container:
    name: backend
    image: ncidockerhub.nci.nih.gov/icdc/icdc-backend:{{build_number}}
    env:
      - NEW_RELIC_LICENSE_KEY: "{{ newrelic_license_key }}"
      - NEW_RELIC_APP_NAME: "{{ app_name }}-backend"
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true
      - NEW_RELIC_HOST: "gov-collector.newrelic.com"
      - NEW_RELIC_LOG_FILE_NAME: "STDOUT"
      - JAVA_OPTS: "-javaagent:/usr/local/tomcat/newrelic/newrelic.jar"
    entryPoint: ["/bin/ash", "-c", 'wget "https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip" -O newrelic-java.zip && unzip newrelic-java.zip && bin/catalina.sh run']
    log_driver: syslog
    log_options:
      syslog-address: tcp://{{ syslog_host }}:514
      tag: "{{ app_name }}-backend"
      syslog-format: "rfc5424micro"
    state: started
    restart_policy: always
    ports:
     - "8080:8080"
  tags:
    - backend
    - all

- name: start icdc frontend container
  docker_container:
    name: frontend
    image: ncidockerhub.nci.nih.gov/icdc/icdc-frontend:{{build_number}}
    env:
      - NEW_RELIC_LICENSE_KEY: "{{ newrelic_license_key }}"
      - NEW_RELIC_APP_NAME: "{{ app_name }}-frontend"
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true
      - NEW_RELIC_HOST: "gov-collector.newrelic.com"
      - NEW_RELIC_NO_CONFIG_FILE: "true"
    log_driver: syslog
    log_options:
      syslog-address: tcp://{{ syslog_host }}:514
      tag: "{{ app_name }}-frontend"
      syslog-format: "rfc5424micro"
    state: started
    restart_policy: always
    ports:
     - "80:80"
  tags:
    - frontend
    - all
