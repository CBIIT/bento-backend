---
- name: set sandbox environment facts
  set_fact:
    neo4j_ip: "{{ lookup('env','NEO4J_SANDBOX_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "sandbox"

- name: set dev environment facts
  set_fact:
    neo4j_ip: "{{ lookup('env','NEO4J_DEV_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "dev"

- name: set qa environment facts
  set_fact:
    neo4j_ip: "{{ lookup('env','NEO4J_QA_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "qa"

- name: set stage environment facts
  set_fact:
    neo4j_ip: "{{ lookup('env','NEO4J_STAGE_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "stage"

- name: set prod environment facts
  set_fact:
    neo4j_ip: "{{ lookup('env','NEO4J_PROD_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "prod"

- name: remove the application_example.properties file 
  file:
    path: "{{workspace}}/src/main/resources/application_example.properties"
    state: absent

- name: copy schema from frontend to resources
  template:
    src: "{{workspace}}/icdc-frontend/graphql/{{schema_file}}"
    dest: "{{workspace}}/src/main/resources/graphql/{{schema_file}}"

- name: set application property values
  template:
    src: "{{workspace}}/src/main/resources/application.properties.j2"
    dest: "{{workspace}}/src/main/resources/application.properties"

- name: build springboot code
  command: mvn package -DskipTests
  args:
    chdir: "{{workspace}}"
- name: copy Bento-0.0.1.war to api.war
  copy:
    remote_src: yes
    src: "{{workspace}}/target/Bento-0.0.1.war"
    dest: "{{workspace}}/target/ROOT.war"

- name: log into DockerHub
  docker_login:
    username: "{{docker_user}}"
    password: "{{docker_password}}"
    registry: ncidockerhub.nci.nih.gov
    tls: yes
    ca_cert: /var/cert/ca.pem
    client_cert: /var/cert/jenkinscert.pem
    client_key: /var/cert/jenkinskey.pem
    docker_host: "{{docker_host}}"
    
- name: build cbiitssrepo/icdc-backend image
  docker_image:
    build:
      path: "{{workspace}}"
      dockerfile: "./dockerfiles/backend-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/icdc-backend
    tag: "{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/icdc-backend image
  docker_image:
    name: "cbiitssrepo/icdc-backend:{{build_number}}"
    repository: cbiitssrepo/icdc-backend:latest
    force_tag: yes
    push: yes
    source: local

- name: copy environment file to {{workspace}}/icdc-frontend
  template:
    src: env.j2
    dest: "{{workspace}}/icdc-frontend/.env"

- name: run npm install in {{workspace}}/icdc-frontend
  command: "{{item}}"
  args:
    chdir: "{{workspace}}/icdc-frontend"
  loop:
    - npm install 
    - npm install --save https://github.com/skiran86/mui-custom-datatables/tarball/master

- name: run npm install and build in {{workspace}}/src/main/frontend/node_modules/mui-custom-datatables
  command: "{{item}}"
  args:
    chdir: "{{workspace}}/icdc-frontend/node_modules/mui-custom-datatables"
  loop:
    - npm install
    - npm run build
    
- name: run npm build in frontend
  command: npm run-script build
  args:
    chdir: "{{workspace}}/icdc-frontend"

# - name: run npm install in {{workspace}}/bento-frontend/
#   command: "{{item}}"
#   args:
#     chdir: "{{workspace}}/bento-frontend"
#   loop:
#     - npm install npm@latest -g
#     - npm install
#     - npm run build
          
- name: build cbiitssrepo/icdc-frontend image
  docker_image:
    build:
      path: "{{workspace}}/icdc-frontend"
      dockerfile: "../dockerfiles/frontend-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/icdc-frontend
    tag: "{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/icdc-frontend image
  docker_image:
    name: "cbiitssrepo/icdc-frontend:{{build_number}}"
    repository: cbiitssrepo/icdc-frontend:latest
    force_tag: yes
    push: yes
    source: local



    