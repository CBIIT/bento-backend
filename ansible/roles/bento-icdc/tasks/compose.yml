---
- name: log into DockerHub
  docker_login:
    username: "{{ docker_user }}"
    password: "{{ docker_password }}"
    registry: https://ncidockerhub.nci.nih.gov
    
- name: verify host
  file: 
    path: /tmp/myworkspace
    state: directory


###################################################################

# - name: remove frontend container
#   docker_container:
#     name: frontend
#     state: absent

# - name: remove backend container
#   docker_container:
#     name: backend
#     state: absent

- name: clean up 
  shell: docker system prune -a -f

- name: ensure /local/content/docker exists
  file: 
    path: /local/content/docker
    state: directory

- name: update serivces and compose files
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
  loop:
    - {src: 'log-agents.yml.j2',dest: '/local/content/docker/log-agents.yml'}
    - {src: 'app.yml.j2',dest: '/local/content/docker/app.yml'}
    - {src: 'app.serivce.j2',dest: '/etc/systemd/system/app.service'}
    - {src: 'log-agents.service.j2',dest: '/etc/systemd/system/log-agents.service'}
    - {src: 'app.timer.j2',dest: '/etc/systemd/system/app.timer'}

- name: start log agents
  docker_compose:
    project_src: /local/content/docker
    files: log-agents.yml
    state: present

- name: Waits for port 514 
  wait_for:
    host: 0.0.0.0
    port: 514
    delay: 5
    state: started

- name: start frontend and backend containers
  docker_compose:
    project_src: /local/content/docker
    files: app.yml
    state: present

- name: reload systemd 
  systemd:
    daemon_reload: yes

- name: enable log-agents and app.timer services
  service:
    name: "{{item}}"
    enabled: yes
  loop:
    - log-agents.service
    - app.timer

- name: ensure app.service is diabled
  service:
    name: app.service
    enabled: no
  
- name: Pause to allow updates to process
  pause:
    seconds: 15

- name: "wait for {{ frontend_url }} to become available"
  uri:
   url: "{{ frontend_url }}"
   follow_redirects: none
   method: GET
  register: _result
  until: ('status' in _result) and (_result.status == 200)
  retries: 100
  delay: 10



