---

############################################################################################################################

#     Set Environment

############################################################################################################################

- name: get db ip
  include_tasks: neo4j-ip.yml

- name: checkout specified commit - backend
  shell: "git checkout {{ backend_commit_id }}"
  args:
    chdir: "{{ workspace }}"

- name: checkout specified commit - frontend
  shell: "git checkout {{ frontend_commit_id }}"
  args:
    chdir: "{{ workspace }}/{{ project }}-frontend"

- name: get backend commit ID
  shell: git rev-parse HEAD
  args:
    chdir: "{{ workspace }}"
  register: backend_id

- name: get frontend commit ID
  shell: git rev-parse HEAD
  args:
    chdir: "{{ workspace }}/{{ project }}-frontend"
  register: frontend_id

- name: echo backend id
  debug:
    msg: "{{ backend_id.stdout_lines }}"

- name: echo frontend id
  debug:
    msg: "{{ frontend_id.stdout_lines }}"

- name: echo redis_host
  debug:
    msg: "{{ redis_host }}"

- name: echo schema_file
  debug:
    msg: "{{ schema_file }}"

- name: echo about_content_url
  debug:
    msg: "{{ about_content_url }}"

############################################################################################################################

#     Backend Build

############################################################################################################################

- name: remove the application_example.properties file 
  file:
    path: "{{workspace}}/src/main/resources/application_example.properties"
    state: absent

- name: copy application.properties file to /src/main/resources/
  template:
    src: "{{workspace}}/src/main/resources/application.properties.j2"
    dest: "{{workspace}}/src/main/resources/application.properties"

- name: create graphql directory in backend
  file:
    state: directory
    path: "{{workspace}}/src/main/resources/graphql"

- name: create yaml directory in backend
  file:
    state: directory
    path: "{{workspace}}/src/main/resources/yaml"

- name: copy schema from frontend to resources
  template:
    src: "{{workspace}}/{{ project }}-frontend/graphql/{{ schema_file}}"
    dest: "{{workspace}}/src/main/resources/graphql/{{ schema_file}}"

- name: verify test queries file exists
  stat:
    path: "{{workspace}}/{{ project }}-frontend/yaml/{{ test_queries_file }}"
  register: test_queries

- name: copy test queries from frontend to resources
  template:
    src: "{{workspace}}/{{ project }}-frontend/yaml/{{ test_queries_file }}"
    dest: "{{workspace}}/src/main/resources/yaml/{{ test_queries_file }}"
  when: test_queries.stat.exists

- name: build springboot code
  command: mvn package -DskipTests
  args:
    chdir: "{{workspace}}"

- name: copy Bento-0.0.1.war to api.war
  copy:
    remote_src: yes
    src: "{{workspace}}/target/Bento-0.0.1.war"
    dest: "{{workspace}}/target/ROOT.war"

- name: log into DockerHub
  docker_login:
    username: "{{docker_user}}"
    password: "{{docker_password}}"

- name: build cbiitssrepo/{{ project }}-backend image
  docker_image:
    build:
      path: "{{workspace}}"
      dockerfile: "{{workspace}}/icdc-devops/docker/dockerfiles/backend-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/{{ project }}-backend
    tag: "{{backend_version}}-{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/{{ project }}-backend image
  docker_image:
    name: "cbiitssrepo/{{ project }}-backend:{{backend_version}}-{{build_number}}"
    repository: cbiitssrepo/{{ project }}-backend:latest
    force_tag: yes
    push: yes
    source: local

############################################################################################################################

#     Frontend Build

############################################################################################################################

- name: remove .env
  file:
    state: absent
    path: "{{workspace}}/{{ project }}-frontend/.env"

- name: copy  nginx conf
  copy:
    remote_src: yes
    src: '{{workspace}}/icdc-devops/docker/dockerfiles/nginx.conf'
    dest: '{{workspace}}/{{ project }}-frontend/nginx.conf'

- name: copy entrypoint.sh to workspace
  copy:
    src: "nginx-entrypoint.sh"
    dest: "{{workspace}}/{{ project }}-frontend/nginx-entrypoint.sh"
    mode: 0755

- name: run npm install in {{workspace}}/{{ project }}-frontend/
  command: "{{item}}"
  args:
    chdir: "{{workspace}}/{{ project }}-frontend"
  loop:
    - npm install
    - npm run build

- name: copy env to dist
  copy:
    src: inject.template.js
    dest: "{{workspace}}/{{ project }}-frontend/dist/inject.template.js"
    mode: 0755
          
- name: build cbiitssrepo/{{ project }}-frontend image
  docker_image:
    build:
      path: "{{workspace}}/{{ project }}-frontend"
      dockerfile: "{{workspace}}/icdc-devops/docker/dockerfiles/frontend-icdc-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/{{ project }}-frontend
    tag: "{{frontend_version}}-{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/{{ project }}-frontend image
  docker_image:
    name: "cbiitssrepo/{{ project }}-frontend:{{frontend_version}}-{{build_number}}"
    repository: cbiitssrepo/{{ project }}-frontend:latest
    force_tag: yes
    push: yes
    source: local