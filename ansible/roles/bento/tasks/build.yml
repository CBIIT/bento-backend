---
- name: set dev environment facts
  set_fact:
    neo4j_ip: "{{ lookup('env','NEO4J_DEV_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "dev"

- name: set qa environment facts
  set_fact:
    neo4j_ip: "{{ lookup('env','NEO4J_QA_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "qa"

- name: set stage environment facts
  set_fact:
    neo4j_ip: "{{ lookup('env','NEO4J_STAGE_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "stage"

- name: set prod environment facts
  set_fact:
    neo4j_ip: "{{ lookup('env','NEO4J_PROD_IP') }}"
    bearer: "{{ lookup('env','BEARER') }}"
  when: tier == "prod"

- name: remove the application_example.properties file 
  file:
    path: "{{workspace}}/src/main/resources/application_example.properties"
    state: absent

- name: copy application.properties file to /src/main/resources/
  template:
    src: application.properties.j2
    dest: "{{workspace}}/src/main/resources/application.properties"

- name: build springboot code
  command: mvn package -DskipTests
  args:
    chdir: "{{workspace}}"
- name: copy Bento-0.0.1.war to api.war
  copy:
    remote_src: yes
    src: "{{workspace}}/target/Bento-0.0.1.war"
    dest: "{{workspace}}/target/ROOT.war"

- name: log into DockerHub
  docker_login:
    username: "{{docker_user}}"
    password: "{{docker_password}}"

- name: build cbiitssrepo/bento-backend image
  docker_image:
    build:
      path: "{{workspace}}"
      dockerfile: "{{workspace}}/dockerfiles/backend-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/bento-backend
    tag: "{{build_number}}"
    push: yes
    source: build
  register: backend_build

- name: tag backend build as latest
  docker_image:
    name: "cbiitssrepo/bento-backend:{{build_number}}"
    repository: cbiitssrepo/bento-backend:latest
    pull: no
    state: present
  when: backend_build.changed

- name: copy environment file to {{workspace}}/bento-frontend
  template:
    src: env.j2
    dest: "{{workspace}}/bento-frontend/.env"

- name: run npm install in {{workspace}}/bento-frontend/
  command: "{{item}}"
  args:
    chdir: "{{workspace}}/bento-frontend"
  loop:
    - npm install 
    # - npm install --save https://github.com/skiran86/mui-custom-datatables/tarball/master

# - name: run npm install and build in {{workspace}}/bento-frontend/node_modules/mui-custom-datatables
#   command: "{{item}}"
#   args:
#     chdir: "{{workspace}}/bento-frontend/node_modules/mui-custom-datatables"
#   loop:
#     - npm install
#     - npm run build
    
- name: run npm build in frontend
  command: npm run-script build
  args:
    chdir: "{{workspace}}/bento-frontend"
          
- name: build cbiitssrepo/bento-frontend image
  docker_image:
    build:
      path: "{{workspace}}/bento-frontend"
      dockerfile: "{{workspace}}/dockerfiles/frontend-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/bento-frontend
    tag: "{{build_number}}"
    push: yes
    source: build
  register: frontend_build

- name: tag frontend build as latest
  docker_image:
    name: "cbiitssrepo/bento-frontend:{{build_number}}"
    repository: cbiitssrepo/bento-frontend:latest
    pull: no
    state: present
  when: frontend_build.changed

- name: post schemas
  uri:
    url: http://{{neo4j_ip}}:7474/graphql/idl/
    method: POST
    body: "{{ lookup('file','{{workspace}}/src/main/resources/graphql/bento-extended.graphql') }}"
    headers:
      Accept: "application/json"
      Authorization: "{{bearer}}"
  register: schema

# - name: post schema
#   command: "curl -X POST http://{{neo4j_ip}}:7474/graphql/idl/ -H 'Accept: application/json' -H 'Authorization: {{bearer}}' -d @{{workspace}}/bento-backend/src/main/resources/graphql/ctdc.graphql"
#   register: schema

- name: schema output
  debug:
    msg: "{{schema}}"

    