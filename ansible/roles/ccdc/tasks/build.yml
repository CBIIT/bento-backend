---

- name: log into DockerHub
  docker_login:
    username: "{{docker_user}}"
    password: "{{docker_password}}"

- name: copy  nginx conf
  copy:
    remote_src: yes
    src: '{{workspace}}/icdc-devops/docker/dockerfiles/nginx.conf'
    dest: '{{workspace}}/{{project}}/nginx.conf'

- name: copy entrypoint.sh to workspace
  copy:
    src: "nginx-entrypoint.sh"
    dest: "{{workspace}}/{{project}}/nginx-entrypoint.sh"
    mode: 0755

- name: run npm install in {{workspace}}/{{project}}
  command: "{{item}}"
  args:
    chdir: "{{workspace}}/{{project}}"
  loop:
    - npm install
    - npm run build

- name: rename build to dist
  command: mv {{workspace}}/{{project}}/build {{workspace}}/{{project}}/dist

- name: copy env to project
  copy:
    src: inject.template.js
    dest: "{{workspace}}/{{project}}/dist/inject.template.js"
    mode: 0755
          
- name: build cbiitssrepo/{{project | lower}} image
  docker_image:
    build:
      path: "{{workspace}}/{{project}}"
      dockerfile: "{{workspace}}/icdc-devops/docker/dockerfiles/ccdc-frontend-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/{{project | lower}}
    tag: "{{frontend_version}}-{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/{{ project | lower }} image
  docker_image:
    name: "cbiitssrepo/{{ project | lower }}:{{frontend_version}}-{{build_number}}"
    repository: cbiitssrepo/{{ project | lower }}:latest
    force_tag: yes
    push: yes
    source: local


############################################################################################################################

#     Backend Build

############################################################################################################################


# - name: create service directory in backend
#   file:
#     state: directory
#     path: "{{workspace}}/src/main/resources/service"

# - name: create yaml directory in backend
#   file:
#     state: directory
#     path: "{{workspace}}/src/main/resources/yaml"

# - name: copy schema from frontend to resources
#   template:
#     src: "{{workspace}}/{{ project }}-frontend/graphql/{{ schema_file}}"
#     dest: "{{workspace}}/src/main/resources/graphql/{{ schema_file}}"

# - name: verify test queries file exists
#   stat:
#     path: "{{workspace}}/{{ project }}-frontend/yaml/{{ test_queries_file }}"
#   register: test_queries

# - name: copy test queries from frontend to resources
#   template:
#     src: "{{workspace}}/{{ project }}-frontend/yaml/{{ test_queries_file }}"
#     dest: "{{workspace}}/src/main/resources/yaml/{{ test_queries_file }}"
#   when: test_queries.stat.exists

# - name: build springboot code
#   command: mvn package -DskipTests
#   args:
#     chdir: "{{workspace}}"

# - name: copy Bento-0.0.1.war to api.war
#   copy:
#     remote_src: yes
#     src: "{{workspace}}/target/Bento-0.0.1.war"
#     dest: "{{workspace}}/target/ROOT.war"

- name: log into DockerHub
  docker_login:
    username: "{{docker_user}}"
    password: "{{docker_password}}"

- name: build cbiitssrepo/{{ backend | lower}} image
  docker_image:
    build:
      path: "{{workspace}}"
      dockerfile: "{{workspace}}/icdc-devops/docker/dockerfiles/ccdc-backend-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/{{ backend | lower}}
    tag: "{{backend_version}}-{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/{{ backend | lower}} image
  docker_image:
    name: "cbiitssrepo/{{ backend | lower}}:{{backend_version}}-{{build_number}}"
    repository: cbiitssrepo/{{ backend | lower}}:latest
    force_tag: yes
    push: yes
    source: local



############################################################################################################################

#     Database Build

############################################################################################################################



- name: run npm install in {{workspace}}/{{etl}}
  command: "{{item}}"
  args:
    chdir: "{{workspace}}/{{etl}}"
  loop:
    - npm install

- name: Get list of files from S3
  aws_s3:
    mode: list
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    bucket: "{{ aws_storage_bucket_name }}"
    prefix: "etl-digest-files/"
    marker: "etl-digest-files/"
  register: s3_bucket_items

- name: Download files from S3
  aws_s3:
    mode: get
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    bucket: "{{ aws_storage_bucket_name }}"
    object: "{{ item }}"
    dest: "{{workspace}}/{{etl}}/{{ digest_file_folder }}/{{ item|basename }}"
  with_items: "{{ s3_bucket_items.s3_keys }}"

- name: build cbiitssrepo/{{etl | lower}} image
  docker_image:
    build:
      path: "{{workspace}}/{{etl}}"
      dockerfile: "{{workspace}}/icdc-devops/docker/dockerfiles/ccdc-database-dockerfile"
      pull: yes
      nocache: yes
    name: cbiitssrepo/{{etl | lower}}
    tag: "{{etl_version}}-{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/{{ etl | lower}} image
  docker_image:
    name: "cbiitssrepo/{{ etl | lower}}:{{etl_version}}-{{build_number}}"
    repository: cbiitssrepo/{{ etl | lower}}:latest
    force_tag: yes
    push: yes
    source: local