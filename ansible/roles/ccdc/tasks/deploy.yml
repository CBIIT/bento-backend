---
- name: create task definition - {{backend}}
  ecs_taskdefinition:
    containers:
    - name: backend
      essential: true
      image: "cbiitssrepo/{{backend | lower}}:{{backend_version}}"
      environment:
        - name: REACT_APP_BACKEND_API
          value: "{% if tier == 'prod' %}https://{{stack_name}}.bento-tools.org/service/{% else %}https://{{stack_name}}-{{ tier }}.bento-tools.org/service/{% endif %}" 
        - name: REACT_APP_ENVIRONMENT
          value: "{{tier}}"
        - name: NEW_RELIC_LICENSE_KEY
          value: "{{ newrelic_license_key }}"
        - name: NEW_RELIC_APP_NAME
          value: "{{ app_name }}-backend"
        - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
          value: true
        - name: NEW_RELIC_HOST
          value: "gov-collector.newrelic.com"
        - name: NEW_RELIC_NO_CONFIG_FILE
          value: true
        - name: RDB_HOST
          value: "{{ rds_host }}"
        - name: RDB_PORT
          value: "{{ rds_port }}"
        - name: RDB_USER
          value: "{{ rds_user }}"
        - name: RDB_PASSWORD
          value: "{{ rds_password }}"
        - name: ES_HOST
          value: "{{ es_host }}"
        - name: ES_PORT
          value: "{{ es_port }}"
      portMappings:
      - containerPort: "8080"
        hostPort: "8080"
    network_mode: bridge
    family: "{{stack_name }}-{{tier}}-backend"
    memory: '1024'
    cpu: '512'
    state: present
    region: "{{region}}"
  register: task_output


- name: create task definition - {{project}}
  ecs_taskdefinition:
    containers:
    - name: frontend
      essential: true
      image: "cbiitssrepo/{{project | lower}}:{{frontend_version}}"
      environment:
        - name: REACT_APP_BACKEND_API
          value: "{% if tier == 'prod' %}https://{{stack_name}}.bento-tools.org/service/{% else %}https://{{stack_name}}-{{ tier }}.bento-tools.org/service/{% endif %}" 
        - name: REACT_APP_ENVIRONMENT
          value: "{{tier}}"
        - name: NEW_RELIC_LICENSE_KEY
          value: "{{ newrelic_license_key }}"
        - name: NEW_RELIC_APP_NAME
          value: "{{ app_name }}-frontend"
        - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
          value: true
        - name: NEW_RELIC_HOST
          value: "gov-collector.newrelic.com"
        - name: NEW_RELIC_NO_CONFIG_FILE
          value: true
      portMappings:
      - containerPort: "80"
        hostPort: "80"
      # logConfiguration:
      #   logDriver: syslog
      #   options:
      #     syslog-address: tcp://{{ syslog_host }}:514
      #     tag: "{{ app_name }}-frontend"
      #     syslog-format: "rfc5424micro"
    network_mode: bridge
    family: "{{stack_name }}-{{tier}}-frontend"
    state: present
    memory: '512'
    cpu: '128'
    region: "{{region}}"
  register: task_output

# - name: create task definition - {{etl}}
#   ecs_taskdefinition:
#     containers:
#     - name: etl
#       essential: true
#       image: "cbiitssrepo/{{etl | lower}}:{{etl_version}}"
#       environment:
#         - name: REACT_APP_BACKEND_API
#           value: "{% if tier == 'prod' %}https://{{stack_name}}.bento-tools.org/service/{% else %}https://{{stack_name}}-{{ tier }}.bento-tools.org/service/{% endif %}" 
#         - name: REACT_APP_ENVIRONMENT
#           value: "{{tier}}"
#         - name: NEW_RELIC_LICENSE_KEY
#           value: "{{ newrelic_license_key }}"
#         - name: NEW_RELIC_APP_NAME
#           value: "{{ app_name }}-etl"
#         - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
#           value: true
#         - name: NEW_RELIC_HOST
#           value: "gov-collector.newrelic.com"
#         - name: NEW_RELIC_NO_CONFIG_FILE
#           value: true
#         - name: RDB_HOST
#           value: "{{ rds_host }}"
#         - name: RDB_PORT
#           value: "{{ rds_port }}"
#         - name: RDB_USER
#           value: "{{ rds_user }}"
#         - name: RDB_PASSWORD
#           value: "{{ rds_password }}"
#         - name: ES_HOST
#           value: "{{ es_host }}"
#         - name: ES_PORT
#           value: "{{ es_port }}"
#         - name: DIGEST_FILE_FOLDER
#           value: "{{ digest_file_folder }}"
#       portMappings:
#       - containerPort: "8081"
#         hostPort: "8081"
#     network_mode: bridge
#     family: "{{stack_name }}-{{tier}}-etl"
#     memory: '1024'
#     cpu: '512'
#     state: present
#     region: "{{region}}"
#   register: task_output

# - name: Print task etl
#   debug:
#     msg: "task_output Version: {{ task_output }}"

- name: create task definition - sumo syslog
  ecs_taskdefinition:
    containers:
    - name: sumologic-syslog
      essential: true
      image: "sumologic/collector:latest-syslog"
      environment:
        - name: SUMO_COLLECTOR_NAME
          value: "{{ app_name }}-syslog"
        - name: SUMO_ACCESS_ID
          value: "{{ sumo_access_id }}"
        - name: SUMO_ACCESS_KEY
          value: "{{ sumo_access_key }}"
        - name: SUMO_COLLECTOR_NAME_PREFIX
          value: ""
        - name: SUMO_CLOBBER
          value: "true"
      portMappings:
      - containerPort: "514"
        hostPort: "514"
    network_mode: bridge
    family: "{{stack_name }}-{{tier}}-sumo_syslog"
    state: present
    memory: '512'
    cpu: '128'
    region: "{{region}}"
  register: task_output

- name: create task definition - sumo docker
  ecs_taskdefinition:
    containers:
    - name: sumologic-docker
      essential: true
      image: "sumologic/collector:latest"
      environment:
        - name: SUMO_COLLECTOR_NAME
          value: "{{ app_name }}-docker"
        - name: SUMO_ACCESS_ID
          value: "{{ sumo_access_id }}"
        - name: SUMO_ACCESS_KEY
          value: "{{ sumo_access_key }}"
        - name: SUMO_COLLECTOR_NAME_PREFIX
          value: ""
        - name: SUMO_CLOBBER
          value: "true"
      mountPoints:
        - containerPath: /var/run/docker.sock
          sourceVolume: docker-sock
          readOnly: true
    volumes:
    - name: docker-sock
      host:
        sourcePath: /var/run/docker.sock
    network_mode: bridge
    family: "{{stack_name }}-{{tier}}-sumo_docker"
    state: present
    memory: '512'
    cpu: '128'
    region: "{{region}}"
  register: task_output

- name: create task definition - newrelic docker
  ecs_taskdefinition:
    containers:
    - name: newrelic-docker
      essential: true
      image: "newrelic/infrastructure-bundle:latest"
      environment:
        - name: NRIA_LICENSE_KEY
          value: "{{ newrelic_license_key }}"
        - name: NRIA_DISPLAY_NAME
          value: "{{ app_name }}-docker"
        - name: NEW_RELIC_HOST
          value: "gov-collector.newrelic.com"
        - name: STATUS_URL
          value: "{% if tier == 'prod' %}https://bento-tools.org/nginx_status{% else %}https://{{ tier }}.bento-tools.org/nginx_status{% endif %}"
      entryPoint:
        - "/bin/bash"
        - "-c"
        - 'echo -e "integrations:\n  - name: nri-nginx\n    env:\n      REMOTE_MONITORING: true\n      METRICS: 1" > /etc/newrelic-infra/integrations.d/nginx-config.yml && /sbin/tini -- /usr/bin/newrelic-infra-service'
      mountPoints:
        - containerPath: /var/run/docker.sock
          sourceVolume: docker-sock
          readOnly: true
        - containerPath: /host
          sourceVolume: docker-host
          readOnly: true
    volumes:
    - name: docker-sock
      host:
        sourcePath: /var/run/docker.sock
    - name: docker-host
      host:
        sourcePath: /
    network_mode: bridge
    family: "{{stack_name }}-{{tier}}-nr_docker"
    state: present
    memory: '128'
    cpu: '128'
    region: "{{region}}"
  register: task_output

############################################################################################################################

#     Task Definition Queries

############################################################################################################################

- name: query task definition - {{project | lower}} 
  ecs_taskdefinition_info:
    task_definition: "{{stack_name }}-{{tier}}-frontend"
    region: "{{region}}" 
  register: task_frontend

- name: query task definition - {{backend | lower}} 
  ecs_taskdefinition_info:
    task_definition: "{{stack_name }}-{{tier}}-backend"
    region: "{{region}}" 
  register: task_backend

# - name: query task definition - {{etl | lower}} 
#   ecs_taskdefinition_info:
#     task_definition: "{{stack_name }}-{{tier}}-etl"
#     region: "{{region}}" 
#   register: task_etl

# - name: Print query task etl
#   debug:
#     msg: "task_etl Version: {{ task_etl }}"

- name: query task definition - sumologic syslog
  ecs_taskdefinition_info:
    task_definition: "{{stack_name }}-{{tier}}-sumo_syslog"
    region: "{{region}}" 
  register: task_sumo_syslog

- name: query task definition - sumologic docker
  ecs_taskdefinition_info:
    task_definition: "{{stack_name }}-{{tier}}-sumo_docker"
    region: "{{region}}" 
  register: task_sumo_docker

- name: query task definition - newrelic docker
  ecs_taskdefinition_info:
    task_definition: "{{stack_name }}-{{tier}}-nr_docker"
    region: "{{region}}" 
  register: task_nr_docker

############################################################################################################################

#     Service Queries

############################################################################################################################

- name: query backend service
  ecs_service_info:
    cluster: "{{stack_name }}-{{tier}}"
    service: "{{stack_name }}-{{tier}}-backend"
    details: true
    region: "{{region}}"
  register: service_backend

- name: query ecs service
  ecs_service_info:
    cluster: "{{stack_name }}-{{tier}}"
    service: "{{stack_name }}-{{tier}}-frontend"
    details: true
    region: "{{region}}"
  register: service_frontend

# - name: query etl service
#   ecs_service_info:
#     cluster: "{{stack_name }}-{{tier}}"
#     service: "{{stack_name }}-{{tier}}-etl"
#     details: true
#     region: "{{region}}"
#   register: service_etl

# - name: Print service_etl
#   debug:
#     msg: "service_etl Version: {{ service_etl }}"

- name: query sumologic syslog service
  ecs_service_info:
    cluster: "{{stack_name }}-{{tier}}"
    service: "{{stack_name }}-{{tier}}-sumo_syslog"
    details: true
    region: "{{region}}"
  register: service_sumo_syslog

- name: query sumologic docker service
  ecs_service_info:
    cluster: "{{stack_name }}-{{tier}}"
    service: "{{stack_name }}-{{tier}}-sumo_docker"
    details: true
    region: "{{region}}"
  register: service_sumo_docker

- name: query newrelic docker service
  ecs_service_info:
    cluster: "{{stack_name }}-{{tier}}"
    service: "{{stack_name }}-{{tier}}-nr_docker"
    details: true
    region: "{{region}}"
  register: service_nr_docker

############################################################################################################################

- name: set facts
  set_fact:
    frontend_url: "{% if tier == 'prod' %}https://{{stack_name}}.bento-tools.org/{% else %}https://{{stack_name}}-{{ tier }}.bento-tools.org/{% endif %}"
    frontend_revision: "{{task_frontend.revision}}"
    backend_revision: "{{task_backend.revision}}"
    # etl_revision: "{{task_etl.revision}}"
    task_backend_name: "{{task_backend.family}}"
    task_frontend_name: "{{task_frontend.family}}"
    # task_etl_name: "{{task_etl.family}}"
    task_sumo_syslog_name: "{{task_sumo_syslog.family}}"
    task_sumo_docker_name: "{{task_sumo_docker.family}}"
    task_nr_docker_name: "{{task_nr_docker.family}}"
    lb_frontend: "{{service_frontend.services[0].loadBalancers}}"
    lb_backend: "{{service_backend.services[0].loadBalancers}}"
    # lb_etl: "{{service_etl.services[0].loadBalancers}}"
    role_arn: "{{service_backend.services[0].roleArn}}"


############################################################################################################################

#     Update Services

############################################################################################################################

- name: update sumologic syslog service
  ecs_service:
    state: present
    name: "{{stack_name }}-{{tier}}-sumo_syslog"
    cluster: "{{stack_name }}-{{tier}}"
    task_definition: "{{task_sumo_syslog_name}}"
    force_new_deployment: no
    deployment_configuration:
      minimum_healthy_percent: 0
      maximum_percent: 100
    desired_count: 1
    region: "{{region}}"
  register: service_sumo_syslog_output

- name: update sumologic docker service
  ecs_service:
    state: present
    name: "{{stack_name }}-{{tier}}-sumo_docker"
    cluster: "{{stack_name }}-{{tier}}"
    task_definition: "{{task_sumo_docker_name}}"
    force_new_deployment: no
    deployment_configuration:
      minimum_healthy_percent: 0
      maximum_percent: 100
    desired_count: 1
    region: "{{region}}"
  register: service_sumo_docker_output

- name: update newrelic docker service
  ecs_service:
    state: present
    name: "{{stack_name }}-{{tier}}"
    cluster: "{{stack_name }}-{{tier}}"
    task_definition: "{{task_nr_docker_name}}"
    force_new_deployment: no
    deployment_configuration:
      minimum_healthy_percent: 0
      maximum_percent: 100
    desired_count: 1
    region: "{{region}}"
  register: service_nr_docker_output

- name: update backend service
  ecs_service:
    state: present
    name: "{{stack_name }}-{{tier}}-backend"
    cluster: "{{stack_name }}-{{tier}}"
    task_definition: "{{task_backend_name}}:{{backend_revision}}"
    role: "{{role_arn}}"
    force_new_deployment: yes
    deployment_configuration:
      minimum_healthy_percent: 0
      maximum_percent: 100
    desired_count: 1
    load_balancers: "{{ lb_backend }}"
    region: "{{region}}"
  register: service_backend_output

- name: update frontend service
  ecs_service:
    state: present
    name: "{{stack_name }}-{{tier}}-frontend"
    cluster: "{{stack_name }}-{{tier}}"
    task_definition: "{{task_frontend_name}}:{{frontend_revision}}"
    role: "{{role_arn}}"
    force_new_deployment: yes
    deployment_configuration:
      minimum_healthy_percent: 0
      maximum_percent: 100
    desired_count: 1
    load_balancers: "{{ lb_frontend }}"
    region: "{{region}}"
  register: service_frontend_output

# - name: update etl service
#   ecs_service:
#     state: present
#     name: "{{stack_name }}-{{tier}}-etl"
#     cluster: "{{stack_name }}-{{tier}}"
#     task_definition: "{{task_etl_name}}:{{etl_revision}}"
#     role: "{{role_arn}}"
#     force_new_deployment: yes
#     deployment_configuration:
#       minimum_healthy_percent: 0
#       maximum_percent: 100
#     desired_count: 1
#     load_balancers: "{{ lb_etl }}"
#     region: "{{region}}"
#   register: service_etl_output
