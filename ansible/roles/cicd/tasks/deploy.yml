---
- name: create task definition 
  ecs_taskdefinition:
    containers:
    - name: traefik
      essential: true
      image: "traefik:v2.1"
      memory: 512
      links:
      - app
      - api 
      mountPoints:
      - containerPath: /var/run/docker.sock
        sourceVolume: dockersocket
      portMappings:
      - containerPort: "80"
        hostPort: "80"
      - containerPort: "8080"
        hostPort: "8080"
      command:
        - >
          --providers.docker=true --api.insecure=true --providers.docker.network=traefik
          --accesslog.filepath=/var/log/traefik_access.log --log=true --log.filepath=/var/log/traefik.log
          --log.level=DEBUG --entrypoints.web.address=:80
      dockerLabels:
        traefik.http.middlewares.api-prefix.stripprefix.prefixes: "/api"
        traefik.http.middlewares.app-prefix.stripprefix.prefixes: "/app"
    - name: app
      essential: true
      image: cbiitssrepo/app:17
      memory: 1024
      dockerLabels:
        traefik.docker.network: "traefik"
        traefik.http.routers.app.service: "app"
        traefik.enable: "true"
        traefik.http.routers.app.entrypoints: "web"
        traefik.http.services.app.loadbalancer.server.port: "80"
        traefik.http.routers.app.rule: "PathPrefix(`/app`)"
        traefik.http.services.app.loadbalancer.passhostheader: "true"
        traefik.http.routers.app.middlewares: "app-prefix"
    - name: api
      essential: true
      image: cbiitssrepo/api:17
      memory: 1024
      dockerLabels:
        traefik.docker.network: "traefik"
        traefik.http.routers.api.entrypoints: "web"
        traefik.enable: "true"
        traefik.http.routers.api.rule: "PathPrefix(`/`)"
        traefik.http.routers.api.rule: "PathPrefix(`/api`)"
        traefik.http.routers.api.service: "api"
        traefik.http.services.api.loadbalancer.server.port: "8080"
        traefik.http.services.api.loadbalancer.passhostheader: "true"
        traefik.http.routers.api.middlewares: "api-prefix"

    volumes:
    - name: dockersocket
      host:
        sourcePath: "/var/run/docker.sock"
    network_mode: bridge
    family: ctdc
    state: present
    region: "{{region}}"
  register: task_output

- name: query task definition
  ecs_taskdefinition_info:
    task_definition: ctdc
    region: "{{region}}" 
  register: task_output

- name: query ecs service
  ecs_service_info:
    cluster: ctdc-ecs
    service: ctdc_ecs_service
    details: true
    region: "{{region}}"
  register: service_info

- name: set facts
  set_fact:
    revision: "{{task_output.revision}}"
    task_name: "{{task_output.family}}"
    lb_target_arn: "{{service_info.services[0].loadBalancers[0].targetGroupArn}}"
    lb_container_port: "{{service_info.services[0].loadBalancers[0].containerPort}}"
    lb_container_name: "{{service_info.services[0].loadBalancers[0].containerName}}"
    role_arn: "{{service_info.services[0].roleArn}}"

- name: update ecs service
  ecs_service:
    state: present
    name: ctdc_ecs_service
    cluster: ctdc-ecs
    task_definition: "{{task_name}}:{{revision}}"
    role: "{{role_arn}}"
    desired_count: 1
    load_balancers:
      - targetGroupArn: "{{lb_target_arn}}"
        containerName: "{{lb_container_name}}"
        containerPort: "{{ lb_container_port }}"
    region: "{{region}}"
  register: service_output

- name: show service service
  debug:
    msg: "{{service_output}}"