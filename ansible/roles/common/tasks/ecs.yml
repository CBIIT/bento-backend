---
#################################################################################################################################
# task definition
#######################################################################################################################
- name: create task definition for "{{project_name}}-{{container_name}}"
  ecs_taskdefinition:
    containers:
      - name: sumologic-firelens
        essential: true
        image: "amazon/aws-for-fluent-bit:latest"
        memory: 100
        firelensConfiguration:
          type: fluentbit
          options:
            enable-ecs-log-metadata: "true"
      - name: newrelic-firelens
        essential: true
        image: "533243300146.dkr.ecr.us-east-1.amazonaws.com/newrelic/logging-firelens-fluentbit"
        memory: 100
        firelensConfiguration:
          type: fluentbit
          options:
            enable-ecs-log-metadata: "true"
      - name: "{{container_name}}"
        essential: true
        image: "{{ container_image_url }}:{{image_version}}"
        environment: "{{ container_env }}"
        entryPoint: "{% if container_entrypoint is defined %}{{container_entrypoint}}{% else %}[]{% endif %}"
        portMappings:
          - containerPort: "{{ container_port }}"
            hostPort: "{{ container_port }}"
        logConfiguration:
          logDriver: awsfirelens
          secretOptions:
            - name: "apiKey"
              valueFrom: "arn:aws:secretsmanager:{{region}}:{{account}}:secret:{{newrelic_api_secret}}"
          options:
            Name: "{{project_name }}-{{ tier }}-{{ container_name }}-logs"
            Host: "{{ sumo_collector_endpoint }}"
            URI: "/receiver/v1/http/{{ sumo_collector_token }}"
            Port: '443'
            tls: 'on'
            tls.verify: 'off'
            Format: 'json_lines'
    launch_type: FARGATE
    network_mode: awsvpc
    execution_role_arn: "arn:aws:iam::{{ account }}:role/{{ project_name }}-{{ tier }}-task-execution-role"
    task_role_arn: "arn:aws:iam::{{account}}:role/{{ project_name }}-{{ tier }}-task-role"
    family: "{{project_name }}-{{tier}}-{{container_name}}"
    memory: "{{container_memory}}"
    cpu: "{{container_cpu}}"
    state: present
    region: "{{ region }}"
  register: task_output

############################################################################################################################
#     Task Definition Queries
############################################################################################################################
- name: query task definition - backend
  ecs_taskdefinition_info:
    task_definition: "{{project_name }}-{{tier}}-{{ container_name }}"
    region: "{{region}}"
  register: task

############################################################################################################################
#     Service Queries
############################################################################################################################
- name: query {{ container_name }} service
  ecs_service_info:
    cluster: "{{ ecs_cluster_name }}"
    service: "{{ project_name }}-{{tier}}-{{ container_name }}"
    details: true
    region: "{{ region }}"
  register: service

- name: set facts
  set_fact:
    task_revision: "{{task.revision}}"
    task_name: "{{task.family}}"
    lb: "{{service.services[0].loadBalancers}}"
    role_arn: "{{service.services[0].roleArn}}"

###########################################################################################################################
#Update Services
############################################################################################################################
- name: update {{ container_name }} service
  ecs_service:
    state: present
    name: "{{ project_name }}-{{ tier}}-{{container_name}}"
    cluster: "{{ ecs_cluster_name }}"
    task_definition: "{{ task_name }}:{{ task_revision }}"
    role: "{{ role_arn }}"
    force_new_deployment: yes
    deployment_configuration:
      minimum_healthy_percent: 50
      maximum_percent: 200
    desired_count: 1
    load_balancers: "{{ lb }}"
    region: "{{ region }}"
  register: output
