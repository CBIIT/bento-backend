---
# tasks file for neo4j-loader

#- name: install redis
#  yum:
#    name: 
#      - redis
#    state: present

- name: install required packages
  pip:
    name:
      - awscli
      - boto3
    state: present

- name: ensure that remote workspace exists
  file:
    path: "{{remote_workspace}}"
    state: directory

- name: ensure backup directory exists
  file:
    path: /backups
    state: directory
    owner: neo4j
    group: neo4j

# - name: download dump files
#   command: aws s3 cp {{s3_bucket_name}}/{{dump_file_name}} "{{remote_workspace}}"

- name: download dump file
  aws_s3:
    bucket: "{{s3_bucket_name}}"
    object: "/dump_files/{{dump_file_name}}"
    dest: "{{remote_workspace}}/neo4j.dump"
    mode: get

- name: stop neo4j
  service:
    name: neo4j
    state: stopped

- name: backup neo4j db
  command: /var/lib/neo4j/bin/neo4j-admin dump --database=graph.db --to={{backup_directory}}/neo4j-backup-{{timestamp}}.dump
  become_user: neo4j

- name: stop neo4j
  service:
    name: neo4j
    state: stopped

- name: load neo4j dumpfile
  command: /var/lib/neo4j/bin/neo4j-admin load --from {{remote_workspace}}/neo4j.dump --database graph.db --force
  become_user: neo4j
  register: loader

- name: loader output
  debug:
    msg: "{{loader.stdout_lines}}"

# - name: flush redis cache
#   shell: echo -e "get abc \nFLUSHALL" | redis-cli -h {{ redis_host[tier]}} -p 6379 -c

- name: start neo4j
  service:
    name: neo4j
    state: started


############################################################################################################################

#     Restart the backend container to reload schema

############################################################################################################################

- name: query backend service
  ecs_service_info:
    cluster: bento-{{ tier }}
    service: bento-{{ tier }}-backend
    details: true
    region: "{{ region }}"
  register: service_backend

############################################################################################################################

- name: set backend facts
  set_fact:
    backend_task_definition: "{{ service_backend.services[0].taskDefinition }}"
    lb_backend: "{{ service_backend.services[0].loadBalancers }}"
    role_arn: "{{ service_backend.services[0].roleArn }}"

############################################################################################################################

- name: recreate backend service
  ecs_service:
    state: present
    name: bento-{{ tier }}-backend
    cluster: bento-{{ tier }}
    task_definition: "{{ backend_task_definition }}"
    role: "{{ role_arn }}"
    force_new_deployment: yes
    deployment_configuration:
      minimum_healthy_percent: 0
      maximum_percent: 100
    desired_count: 1
    load_balancers: "{{ lb_backend }}"
    region: "{{ region }}"
  register: service_backend_output

