---
# - name: scala
#   yum:
#     name: http://www.scala-lang.org/files/archive/scala-{{scala_version}}.rpm
#     state: present

# - name: bintray yum repository 
#   get_url:
#     url:  https://bintray.com/sbt/rpm/rpm
#     dest: /etc/yum.repos.d/bintray-sbt.repo

# - name: ensure sbt is installed
#   yum: 
#     name:
#       - sbt
#       - git
#     state: present

# - name: ensure files directories exists
#   file:
#     path: "{{item}}"
#     state: directory
#   loop:
#     - "{{workspace}}"
#     - "{{project_home}}"

# - name: git clone "{{project}}"
#   git:
#     repo: "{{project_repo}}"
#     dest: "{{workspace}}/backend"
#     force: yes
#     version: "{{tag}}"

# - name: build the app
#   command: sbt clean compile package

- name: build the app
  command: sbt dist
  args:
    chdir: "{{workspace}}/ppdc-otp-backend"

- name: extract build artifacts
  unarchive:
    src: "{{workspace}}/ppdc-otp-backend/target/universal/{{artifact_dir_name}}.zip"
    dest: "{{workspace}}"

- name: listing the contents after extracting
  shell: ls
  register: shell_result
  args:
    chdir: "{{workspace}}"

- debug:
        var: shell_result.stdout_lines

- name: rename {{artifact_dir_name}} to app
  command: mv "{{workspace}}/{{artifact_dir_name}}" "{{workspace}}/app"

- name: copy config files
  command: cp "{{workspace}}/ppdc-otp-backend/production.conf" "{{workspace}}/ppdc-otp-backend/production.xml" "{{workspace}}/app/conf"

- name: delete bat script
  command: rm -rf *.bat
  args:
    chdir: "{{workspace}}/app/bin"

#- name: delete bat script
#  find:
#    paths: "{{workspace}}/app/bin"
#    patterns: "*.bat"
#  register: files_to_delete

#- name: Ansible remove .bat script
#  file:
#    path: "{{ item.path }}"
#    state: absent
#  with_items: "{{ files_to_delete.files }}"

- name: listing the contents
  shell: ls
  register: shell_result
  args:
    chdir: "{{workspace}}/app/bin"
    
- debug:
        var: shell_result.stdout_lines

- name: rename "{{artifact_name}}" script
  command: mv  "{{artifact_name}}" start
  args:
    chdir: "{{workspace}}/app/bin"
          
- debug:
        var: "{{backend_version}}-{{build_number}}"

- name: build cbiitssrepo/{{stack_name}}-backend image
  docker_image:
    build:
      path: "{{workspace}}"
      dockerfile: "{{workspace}}/icdc-devops/docker/dockerfiles/open-target-backend"
      pull: yes
      nocache: yes
    name: cbiitssrepo/{{stack_name}}-backend
    tag: "{{backend_version}}-{{build_number}}"
    push: yes
    force_source: yes
    source: build

- name: Add tag latest to cbiitssrepo/{{stack_name}}-backend image
  docker_image:
    name: "cbiitssrepo/{{stack_name}}-backend:{{backend_version}}-{{build_number}}"
    repository: cbiitssrepo/{{stack_name}}-backend:latest
    force_tag: yes
    push: yes
    source: local

