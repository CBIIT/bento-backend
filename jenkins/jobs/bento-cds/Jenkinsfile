
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			//label 'commons-docker-ncias-p2236-v'
      		// label 'docker-maven'
      		label 'cicd_microservice'
		}
	}
	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'dev,qa,stage,prod')
    booleanParam(
		defaultValue: true,
		description: 'Flush the Redis cache',
		name: 'Flush_Redis')
	booleanParam(
		defaultValue: true,
		description: 'Enable the Redis filter',
		name: 'Enable_Redis_Filter')
	string(
	    defaultValue: 'redis-schema.graphql',
		description: 'The file to use when loading redis schema',
		name: 'Redis_Schema_File')
	string(
	    defaultValue: 'redis-filter-config.bento.yaml',
		description: 'The file to use when loading redis queries',
		name: 'Redis_Queries_File')
	string(
	    defaultValue: 'test-queries.1k.bento.yaml',
		description: 'The file to use when loading test queries',
		name: 'Test_Queries_File')
	string(
	    defaultValue: '',
		description: 'The set of parameters to use for test automation - if left blank no tests will be run',
		name: 'Test_Params')
  }
  options {
  	ansiColor('xterm')
  }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{
  	stage('checkout'){
  		steps {
				
  	    checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Backend_Tag}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/bento-backend']]])

			 checkout([$class: 'GitSCM',
          branches: [[name: "${params.Frontend_Tag}"]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[$class: 'RelativeTargetDirectory',
          relativeTargetDir: 'cds-frontend']],
          submoduleCfg: [],
          userRemoteConfigs: 
          [[url: 'https://github.com/CBIIT/bento-frontend']]])
        
  		 checkout( poll: false, 
				changelog:false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]])
        
        }
 
  	}
    stage('build'){
      environment {
       FE_VERSION = "${params.Frontend_Tag}"
       BE_VERSION = "${params.Backend_Tag}"
	   TIER = "${params.Environment}"
      }
      steps {
          wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
            ansiblePlaybook(  			
              playbook: '${WORKSPACE}/icdc-devops/ansible/cds-build-backend.yml', 
              //inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
              extraVars: [
                            redis_schema_file: "",
                            redis_init_queries_file: "",
                            test_queries_file: "${params.Test_Queries_File}",
                          ],
              colorized: true)
          }
        }
  	}
  	stage('deploy'){
      environment {
        FE_VERSION = "${params.Frontend_Tag}-${BUILD_NUMBER}"
        BE_VERSION = "${params.Backend_Tag}-${BUILD_NUMBER}"
        SLACK_CHANNEL = "#system-alerts"
        URL_DOMAIN = "bento-tools.org"
		TIER = "${params.Environment}"
      }
	  steps{
		  wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            playbook: '${WORKSPACE}/icdc-devops/ansible/cds-deploy-backend.yml', 
            inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
            extraVars: [
					            enable_es_filter: "${params.Enable_ES_Filter}",
                        ],
					colorized: true)
  			}

	  }
			
			
			// script {
      //   sh label: 'Env-Updates', script: '''#!/bin/bash
		  //     yum -y install python3
			//     cd icdc-devops/monitoring
		  //     pip3 install -r requirements.txt
      //     '''
		  //     withCredentials([string(credentialsId: 'newrelic_api_key', variable: 'API_KEY')]) {
			//       sh "python3 $WORKSPACE/icdc-devops/monitoring/releases/add_apm_release.py -p bento -t $TIER -v $FE_VERSION/$BE_VERSION -k $API_KEY"
			// 	    sh "python3 $WORKSPACE/icdc-devops/monitoring/monitor_update.py -p bento -t $TIER -k $API_KEY"
			// 	    sh "python3 $WORKSPACE/icdc-devops/monitoring/dashboards/add_tier_dashboards.py -p bento -t $TIER -k $API_KEY"
	    //     }
      //   }
		  // }
  	//}
  }
    stage('update database monitoring agents'){
		steps{
		  node('data-loader') {
		    checkout( changelog:false,
				poll: false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
				])
			
		    echo "Recreating inventory file"
			sh "cp ${WORKSPACE}/icdc-devops/ansible/hosts ${WORKSPACE}/icdc-devops/ansible/hosts.bak"
            sh "echo [agent_setup] >> ${WORKSPACE}/icdc-devops/ansible/hosts"
            //sh "NEO4J_IP=${ aws ec2 describe-instances --filters 'Name=tag-value,Values=cds-dev-neo4j' --region=us-east-1 --query 'Reservations[*].Instances[*].[PrivateIpAddress]' --output text}"
            sh "echo ${NEO4J_IP} ansible_ssh_private_key_file=/home/bento/.ssh/devops ansible_ssh_user=bento >> ${WORKSPACE}/icdc-devops/ansible/hosts"
  			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            		playbook: '${WORKSPACE}/icdc-devops/ansible/agent-setup.yml', 
            		inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
					extraVars: [
                    env: "${params.Environment}",
					app_type: 'database',
					app_name: 'neo4j',
                    project: 'bento',
					log_path: '/var/log/neo4j/*.log',
                    ],
            		colorized: true)
  			}
  		  }
		}
  	}
  }
  post {
    always {
      sendSlackMessage()
    }
    success {

		script {
			withCredentials([string(credentialsId: 'git_credential', variable: 'git_token')]) {
				sh label: 'GIT-Tag Backend', script: '''#!/bin/bash
				
				gitURL=$(git config remote.origin.url | sed 's|^.*//||')
				echo "Applying tag $Backend_Tag to URL:  $gitURL"
				git config user.email "jenkins@bento-tools.org"
				git config user.name "Bento Jenkins"
				git tag --no-sign -a ${Backend_Tag}-bento-${BUILD_NUMBER} -m "Jenkins tag: ${Backend_Tag}-${BUILD_NUMBER}"
				git push https://${git_token}:x-oauth-basic@${gitURL} --tags
				
				'''
			
				}
			}
		
		script {
			withCredentials([string(credentialsId: 'git_credential', variable: 'git_token')]) {
				sh label: 'GIT-Tag Frontend', script: '''#!/bin/bash
				
				cd ${WORKSPACE}/cds-frontend
				gitURL=$(git config remote.origin.url | sed 's|^.*//||')
				echo "Applying tag $Frontend_Tag to URL:  $gitURL"
				git config user.email "jenkins@bento-tools.org"
				git config user.name "Bento Jenkins"
				git tag --no-sign -a ${Frontend_Tag}-${BUILD_NUMBER} -m "Jenkins tag: ${Frontend_Tag}-${BUILD_NUMBER}"
				git push https://${git_token}:x-oauth-basic@${gitURL} --tags
				
				'''
			
				}
			}
		script {
			if (params.Reload_ES_Data) {
				echo 'Reload data to Elasticsearch'
				build job: 'Bento/_Data_Processing/BentoDataLoader_ES', parameters: [gitParameter(name: 'Dataloader_Branch', value: 'master'), gitParameter(name: 'Frontend_Branch', value: "${params.Frontend_Tag}"), gitParameter(name: 'Backend_Branch', value: "${params.Backend_Tag}"), extendedChoice(name: 'Environment', value: "${params.Environment}")]
			}
		}

	}
    cleanup {
  
      cleanWs()
    
    }
  }
}
