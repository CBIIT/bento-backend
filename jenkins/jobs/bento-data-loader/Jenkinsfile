pipeline {
	agent {
		node {
			label 'data-loader'
		}
	}
	parameters {
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'Neo4j-v4', 
        name: 'Tag', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/icdc-dataloader')
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'demo,gdc,dev,qa,perf,icdc,prod' )
    extendedChoice( 
        name: 'ProjectName', 
        defaultValue: 'bento', 
        description: 'Choose the project', 
        type: 'PT_SINGLE_SELECT',
        value: 'icdc,ctdc,bento,ccdi,gmb' )
    string(defaultValue: "", 
        description: 'S3 Folder to load data from', 
        name: 'S3Folder')
    extendedChoice( 
        defaultValue: 'no', 
        name: 'WipeDB', 
        description: 'Choose yes to wipe DB',
        quoteValue: false,
        multiSelectDelimiter: ',',
        value: 'no,yes',
        type: 'PT_RADIO')
    extendedChoice( 
        defaultValue: 'no', 
        name: 'CheatMode', 
        description: 'Bypass Data Validation',
        quoteValue: false,
        multiSelectDelimiter: ',',
        value: 'no,yes',
        type: 'PT_RADIO')
    extendedChoice( 
        defaultValue: 'false', 
        name: 'SplitTransactions', 
        description: 'Choose true to the Split Transactions',
        quoteValue: false,
        multiSelectDelimiter: ',',
        value: 'false,true',
        type: 'PT_SINGLE_SELECT')   
  }
  // options {
  // 	ansiColor('xterm')
  // }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{
  	stage('checkout'){
  		steps {
  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Tag}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
          recursiveSubmodules: true,
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/icdc-dataloader']]])
          sh 'git submodule update --init'
  			dir('icdc-devops'){
  				git branch: 'master',
    				url: 'https://github.com/CBIIT/icdc-devops.git'
  			}
        dir('bento-model'){
          git branch: 'master',
          url: 'https://github.com/CBIIT/BENTO-TAILORx-model'
        }
        dir('ccdi-model'){
          git branch: 'main',
          url: 'https://github.com/CBIIT/CCDI-Portal-ETL.git'
        }
        dir('gmb-model'){
          git branch: 'main',
          url: 'https://github.com/CBIIT/gmb-model.git'
        }
  		}
 
  	}
    stage('set-environment'){
        steps {
          script {
            switch("${params.Environment}") {
              case "demo":
                withCredentials([usernamePassword(credentialsId: 'demo_neo4j_user', passwordVariable: 'neo4j_password', usernameVariable: 'neo4j_user')]) {
                  env.NEO4J_IP        = "${NEO4J_DEMO_IP}"
                  env.S3_FOLDER       = "${params.S3Folder}"
                  env.TIER            = "${params.Environment}"
                  env.WIPE_DB         = "${params.WipeDB}"
                  env.NEO4J_PASSWORD  = "${neo4j_password}"
                  env.CHEAT_MODE      = "${params.CheatMode}"
                  env.PROJECT         = "${params.ProjectName}"
                  env.SPLIT           = "${params.SplitTransactions}"
                }
              break
              case "dev":
                withCredentials([usernamePassword(credentialsId: "${params.ProjectName}_${params.Environment}_neo4j_user", passwordVariable: 'neo4j_password', usernameVariable: 'neo4j_user')]) {
                  // env.NEO4J_IP        = "${${params.ProjectName}_${params.Environment}_neo4j_ip}"
                  env.S3_FOLDER       = "${params.S3Folder}"
                  env.TIER            = "${params.Environment}"
                  env.WIPE_DB         = "${params.WipeDB}"
                  env.NEO4J_PASSWORD  = "${neo4j_password}"
                  env.CHEAT_MODE      = "${params.CheatMode}"
                  env.PROJECT         = "${params.ProjectName}"
                  env.SPLIT           = "${params.SplitTransactions}"
                }
              break
              case "gdc":
                withCredentials([usernamePassword(credentialsId: 'gdc_neo4j_user', passwordVariable: 'neo4j_password', usernameVariable: 'neo4j_user')]) {
                  env.NEO4J_IP        = "${NEO4J_GDC_IP}"
                  env.S3_FOLDER       = "${params.S3Folder}"
                  env.TIER            = "${params.Environment}"
                  env.WIPE_DB         = "${params.WipeDB}"
                  env.NEO4J_PASSWORD  = "${neo4j_password}"
                  env.CHEAT_MODE      = "${params.CheatMode}"
                  env.PROJECT         = "${params.ProjectName}"
                  env.SPLIT           = "${params.SplitTransactions}"
                }
              break
              case "qa":
                withCredentials([usernamePassword(credentialsId: 'qa_neo4j_user', passwordVariable: 'neo4j_password', usernameVariable: 'neo4j_user')]) {
                  env.NEO4J_IP        = "${NEO4J_QA_IP}"
                  env.S3_FOLDER       = "${params.S3Folder}"
                  env.TIER            = "${params.Environment}"
                  env.TIER            = "dev"
                  env.WIPE_DB         = "${params.WipeDB}"
                  env.NEO4J_PASSWORD  = "${neo4j_password}"
                  env.CHEAT_MODE      = "${params.CheatMode}"
                  env.PROJECT         = "${params.ProjectName}"
                  env.SPLIT           = "${params.SplitTransactions}"
                }
              break
              case "perf":
                withCredentials([usernamePassword(credentialsId: 'perf_neo4j_user', passwordVariable: 'neo4j_password', usernameVariable: 'neo4j_user')]) {
                  env.NEO4J_IP        = "${NEO4J_PERF_IP}"
                  env.S3_FOLDER       = "${params.S3Folder}"
                  env.TIER            = "${params.Environment}"
                  env.WIPE_DB         = "${params.WipeDB}"
                  env.NEO4J_PASSWORD  = "${neo4j_password}"
                  env.CHEAT_MODE      = "${params.CheatMode}"
                  env.PROJECT         = "${params.ProjectName}"
                  env.SPLIT           = "${params.SplitTransactions}"
                }
              break
			  case "icdc":
                withCredentials([usernamePassword(credentialsId: 'icdc_neo4j_user', passwordVariable: 'neo4j_password', usernameVariable: 'neo4j_user')]) {
                  env.NEO4J_IP        = "${NEO4J_ICDC_IP}"
                  env.S3_FOLDER       = "${params.S3Folder}"
                  env.TIER            = "${params.Environment}"
                  env.WIPE_DB         = "${params.WipeDB}"
                  env.NEO4J_PASSWORD  = "${neo4j_password}"
                  env.CHEAT_MODE      = "${params.CheatMode}"
                  env.PROJECT         = "${params.ProjectName}"
                  env.SPLIT           = "${params.SplitTransactions}"
                }
              break
              case "prod":
                withCredentials([usernamePassword(credentialsId: 'prod_neo4j_user', passwordVariable: 'neo4j_password', usernameVariable: 'neo4j_user')]) {
                  env.NEO4J_IP        = "${NEO4J_PROD_IP}"
                  env.S3_FOLDER       = "${params.S3Folder}"
                  env.TIER            = "${params.Environment}"
                  env.WIPE_DB         = "${params.WipeDB}"
                  env.NEO4J_PASSWORD  = "${neo4j_password}"
                  env.CHEAT_MODE      = "${params.CheatMode}"
                  env.PROJECT         = "${params.ProjectName}"
                  env.SPLIT           = "${params.SplitTransactions}"
                }
              break
              default:
                println "Select valid option"
              break
              }
          }
        }
    }
  	stage('loader-data'){
 		environment {
 			SLACK_URL = "${SLACK_URL}"
 		}
 		steps {
 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 					ansiblePlaybook( 
            			playbook: '${WORKSPACE}/icdc-devops/ansible/bento-data-loader.yml', 
            			inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
            			colorized: true) 
 			}
 		}
    }
    stage('flush_redis'){
	  environment {
       TIER = "${params.Environment}"
      }
      steps{
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
          ansiblePlaybook( 
                playbook: '${WORKSPACE}/icdc-devops/ansible/redis.yml', 
                inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                colorized: true)
        }
      }
    }
  }
  post {
    always {
	  cleanWs()
    }
  }
}