pipeline {
	agent {
		node {
			label 'data-loader'
		}
	}
	parameters {
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Dataloader_Branch', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/icdc-dataloader')
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Backend_Branch', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/bento-backend')
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'qa', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'qa' )
  }
  // options {
  // 	ansiColor('xterm')
  // }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{

  	stage('checkout'){
  		steps {
  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Dataloader_Branch}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
                recursiveSubmodules: true,
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/icdc-dataloader']]])
  			
			checkout([$class: 'GitSCM',
				branches: [[name: "${params.Backend_Branch}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'bento-backend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-backend']]])
            
			sh 'git submodule update --init'
  			
			checkout([$class: 'GitSCM',
				branches: [[name: "master"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'icdc-devops']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops']]])

  		}
 
  	}

    stage('set-environment'){
        steps {
          script {
            switch("${params.Environment}") {
              case "qa":
                withCredentials([usernamePassword(credentialsId: 'qa_neo4j_user', passwordVariable: 'neo4j_password', usernameVariable: 'neo4j_user'),
				     string(credentialsId: 'qa_es_host', variable: 'ES_HOST')]) {
                  env.ES_HOST        = "${ES_HOST}"
				  env.PROJECT        = "bento"
				  env.TIER           = "${params.Environment}"
				  env.NEO4J_PASSWORD = "${neo4j_password}"
				  env.NEO4J_IP       = "${NEO4J_QA_IP}"
                }
              break
              default:
                println "Select valid option"
              break
              }
          }
        }
    }

  	stage('load-es-data'){
 		environment {
 			SLACK_URL = "${SLACK_URL}"
 		}
 		steps {
 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 					
			script {
				sh label: 'database-hosts', script: '''#!/bin/bash
					echo "Creating inventory file"
					echo "[neo4j]" > ${WORKSPACE}/icdc-devops/ansible/hosts
					echo ${NEO4J_IP} >> ${WORKSPACE}/icdc-devops/ansible/hosts
					'''

			}
					
			ansiblePlaybook( 
            	playbook: '${WORKSPACE}/icdc-devops/ansible/bento-es-loader.yml', 
					inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
            		colorized: true) 
 			}
 		}
    }

  }
  post {
    always {
	  cleanWs()
    }
  }
}