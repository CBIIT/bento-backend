import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${ICDC_SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
  agent {
    node {
      label 'commons-docker-ncias-p2236-v'
      // label 'docker-maven'
    }
  }
  parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'sandbox,dev,test,qa,stage,prod' )
    // extendedChoice( 
    //     name: 'Release', 
    //     defaultValue: 'test', 
    //     description: 'Choose the environment to build', 
    //     type: 'PT_SINGLE_SELECT',
    //     value: 'test,final' )
  }
  options {
    ansiColor('xterm')
  }
  tools {
    maven 'Default' 
    jdk 'Default' 
  }

  stages {
    stage('checkout'){
      // agent {
      //   node {
      //     label 'slave-ncias-d2320-c'
      //   }
      // }
      steps {
        
        checkout([$class: 'GitSCM', 
          branches: [[name: "${params.Backend_Tag}"]], 
          doGenerateSubmoduleConfigurations: 
          false, extensions: [], submoduleCfg: [], 
          userRemoteConfigs: 
          [[url: 'https://github.com/CBIIT/bento-backend']]])

      checkout([$class: 'GitSCM',
        branches: [[name: "${params.Frontend_Tag}"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[$class: 'RelativeTargetDirectory',
        relativeTargetDir: 'icdc-frontend']],
        submoduleCfg: [],
        userRemoteConfigs: 
        [[url: 'https://github.com/CBIIT/bento-icdc-frontend']]])

        checkout( poll: false, 
        changelog:false,
        scm: [$class: 'GitSCM', 
        branches: [[name: '*/master']], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'DisableRemotePoll'],
        [$class: 'PathRestriction', excludedRegions: '*'], 
        [$class: 'RelativeTargetDirectory', 
        relativeTargetDir: 'icdc-devops']], 
        submoduleCfg: [], 
        userRemoteConfigs: 
        [[url: 'https://github.com/CBIIT/icdc-devops.git']]])
        
        }
    }
    stage('Set Environment'){
      environment {
        ICDC_SLACK_URL = "${ICDC_SLACK_URL}"
      }
        steps {
          script {
            switch("${params.Environment}") {
              case "sandbox":
                withCredentials([string(credentialsId: 'sandbox_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_SANDBOX_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "sandbox"
                }
              break
              case "dev":
                withCredentials([string(credentialsId: 'dev_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
                }
              break
              case "qa":
                withCredentials([string(credentialsId: 'qa_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_QA_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "qa"
                }
              break
              case "stage":
                withCredentials([string(credentialsId: 'stage_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_STAGE_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "stage"
                }
              break
              case "prod":
                withCredentials([string(credentialsId: 'prod_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_PROD_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "prod"
                }
              break
              default:
                withCredentials([string(credentialsId: 'dev_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
                }
              break
            }
          }
        }
      }
    stage('build'){
      environment{
        FE_VERSION = "${params.Frontend_Tag}"
        BE_VERSION = "${params.Backend_Tag}"
      }
    steps {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
        withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
          file(credentialsId: 'ansible_host_file', variable: 'host_file'),
          string(credentialsId: 'fence-id', variable: 'FENCE_ID'),
          string(credentialsId: 'docker_host', variable: 'DOCKER_HOST'),
          string(credentialsId: 'tls_hostname', variable: 'TLS_HOSTNAME')
          ])
        {
          sh "cp ${host_file} ${WORKSPACE}/icdc-devops/ansible/hosts"
          ansiblePlaybook(        
                  playbook: '${WORKSPACE}/icdc-devops/ansible/build-bento-icdc.yml', 
                  inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                  colorized: true) 
          }
        }
      }
    }
    stage('deploy'){

      steps{
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
       withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
         string(credentialsId: 'newrelic_license_key', variable: 'NEWRELIC_LIC_KEY'),
       string(credentialsId: 'sumo_access_id', variable: 'SUMO_ACCESS_ID'),
       string(credentialsId: 'sumo_access_key', variable: 'SUMO_ACCESS_KEY'),
       string(credentialsId: 'bento_syslog_host', variable: 'SYSLOG_HOST'),
       string(credentialsId: 'docker_host', variable: 'DOCKER_HOST'),
       ]){
             ansiblePlaybook( 
                playbook: '${WORKSPACE}/icdc-devops/ansible/deploy-bento-icdc.yml', 
                inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                credentialsId: 'commonsdocker',
                extraVars: [
                    tier: "${params.Environment}",
                    release: "${params.Release}"
                    ],
                become: true,
                hostKeyChecking: false,
                colorized: true)
           }
        }
      }
      // post {
      //   always {
      //     sendSlackMessage()
      //   }
      // }
  }
  stage('set maintenance page'){
    agent {
      node {
        label 'slave-ncias-d2320-c'
      }
    }
    steps {
      checkout( poll: false, 
        changelog:false,
        scm: [$class: 'GitSCM', 
        branches: [[name: '*/master']], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'DisableRemotePoll'],
        [$class: 'PathRestriction', excludedRegions: '*'], 
        [$class: 'RelativeTargetDirectory', 
        relativeTargetDir: 'icdc-devops']], 
        submoduleCfg: [], 
        userRemoteConfigs: 
        [[url: 'https://github.com/CBIIT/icdc-devops.git']]])  
    }
    steps {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
        withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
          file(credentialsId: 'ansible_host_file', variable: 'host_file'),
          // string(credentialsId: 'listener_arn', variable: 'LISTENER_ARN'),
          ])
        {
          sh "cp ${host_file} ${WORKSPACE}/icdc-devops/ansible/hosts"
          ansiblePlaybook(        
                  playbook: '${WORKSPACE}/icdc-devops/ansible/alb-ops.yml', 
                  inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
                  extraVars: [
                    action: 'create',
                    project: 'icdc'
                    ],  
                  colorized: true) 
        }
      }
    }
  }
  stage('Approval Step'){
    steps{
      script {
        env.RELEASE = input message: 'Your Action is needed',
          parameters: [choice(name: 'Release?', choices: 'pass\nfail', description: 'Select "pass" if you deploy to production')]
      }
    }
  }
  stage('release'){
    when {
      environment name:'RELEASE', value: 'pass'
    }
    steps{
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
       withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
         string(credentialsId: 'newrelic_license_key', variable: 'NEWRELIC_LIC_KEY'),
       string(credentialsId: 'sumo_access_id', variable: 'SUMO_ACCESS_ID'),
       string(credentialsId: 'sumo_access_key', variable: 'SUMO_ACCESS_KEY'),
       string(credentialsId: 'bento_syslog_host', variable: 'SYSLOG_HOST'),
       string(credentialsId: 'docker_host', variable: 'DOCKER_HOST'),
       ]){
             ansiblePlaybook( 
                playbook: '${WORKSPACE}/icdc-devops/ansible/release-bento-icdc.yml', 
                inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                credentialsId: 'commonsdocker',
                extraVars: [
                    tier: "${params.Environment}",
                    release: 'pass'
                    ],
                become: true,
                hostKeyChecking: false,
                colorized: true)
           }
        }
      }

  }
  stage('rollback'){
    when {
      environment name:'RELEASE', value: 'fail'
    }
    steps{
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
       withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
         string(credentialsId: 'newrelic_license_key', variable: 'NEWRELIC_LIC_KEY'),
       string(credentialsId: 'sumo_access_id', variable: 'SUMO_ACCESS_ID'),
       string(credentialsId: 'sumo_access_key', variable: 'SUMO_ACCESS_KEY'),
       string(credentialsId: 'bento_syslog_host', variable: 'SYSLOG_HOST'),
       string(credentialsId: 'docker_host', variable: 'DOCKER_HOST'),
       ]){
             ansiblePlaybook( 
                playbook: '${WORKSPACE}/icdc-devops/ansible/release-bento-icdc.yml', 
                inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                credentialsId: 'commonsdocker',
                extraVars: [
                    tier: "${params.Environment}",
                    release: 'fail'
                    ],
                become: true,
                hostKeyChecking: false,
                colorized: true)
            }
         }
       }
    }
    stage('disable maintenance page'){
      when {
      environment name:'RELEASE', value: 'pass'
    }
      agent {
        node {
         label 'slave-ncias-d2320-c'
       }
     }
      steps {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
        withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
          file(credentialsId: 'ansible_host_file', variable: 'host_file'),
          // string(credentialsId: 'listener_arn', variable: 'LISTENER_ARN'),
          ])
        {
          sh "cp ${host_file} ${WORKSPACE}/icdc-devops/ansible/hosts"
          ansiblePlaybook(        
                  playbook: '${WORKSPACE}/icdc-devops/ansible/alb-ops.yml', 
                  inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
                  extraVars: [
                    action: 'remove',
                    project: 'icdc'
                    ],  
                  colorized: true) 
          }
        }
      }
    }
  }
}
