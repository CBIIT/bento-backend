
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${ICDC_SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			label 'commons-docker-ncias-p2236-v'
      // label 'docker-maven'
		}
	}
	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'sandbox,dev,test,qa,stage,prod')
    booleanParam(
    defaultValue: true,
    description: 'Flush the Redis cache',
    name: 'Flush_Redis')


  }
  options {
  	ansiColor('xterm')
  }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{
  	stage('checkout'){
  		steps {
				
  	    checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Backend_Tag}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/bento-backend']]])

			 checkout([$class: 'GitSCM',
				branches: [[name: "${params.Frontend_Tag}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'icdc-frontend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-icdc-frontend']]])

       checkout([$class: 'GitSCM',
        branches: [[name: "${params.File_Tag}"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[$class: 'RelativeTargetDirectory',
        relativeTargetDir: 'bento-files']],
        submoduleCfg: [],
        userRemoteConfigs: 
        [[url: 'https://github.com/CBIIT/bento-files']]])
        
  		 checkout( poll: false, 
				changelog:false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]])
        
        }
 
  	}
    stage('Set Environment'){
      environment {
        ICDC_SLACK_URL = "${ICDC_SLACK_URL}"
      }
        steps {

          script {
            switch("${params.Environment}") {
              case "sandbox":
                withCredentials([string(credentialsId: 'sandbox_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_SANDBOX_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "sandbox"
                  
                }
              break
              case "dev":
                withCredentials([string(credentialsId: 'dev_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
                 
                }
              break
              case "qa":
                withCredentials([string(credentialsId: 'qa_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_QA_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "qa"
                }
              break
              case "stage":
                withCredentials([string(credentialsId: 'stage_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_STAGE_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "stage"
                  
                }
              break
              case "prod":
                withCredentials([string(credentialsId: 'prod_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_PROD_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "prod"
                  
                }
              break
              default:
                withCredentials([string(credentialsId: 'dev_bearer', variable: 'BEARER')
                  ]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
                  
                }
              break
            }
          }
        }
    }
  	stage('build'){
      environment{
        FE_VERSION = "${params.Frontend_Tag}-${BUILD_NUMBER}"
        BE_VERSION = "${params.Backend_Tag}-${BUILD_NUMBER}"
      }
 		steps {
 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 				withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
          file(credentialsId: 'ansible_host_file', variable: 'host_file'),
          string(credentialsId: 'fence-id', variable: 'FENCE_ID'),
          string(credentialsId: 'docker_host', variable: 'DOCKER_HOST'),
          string(credentialsId: 'tls_hostname', variable: 'TLS_HOSTNAME')
          ])
        {
          sh "cp ${host_file} ${WORKSPACE}/icdc-devops/ansible/hosts"
          sh "echo ${TLS_HOSTNAME}"
          ansiblePlaybook(  			
                  playbook: '${WORKSPACE}/icdc-devops/ansible/build-bento-icdc.yml', 
            			inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                  extraVars: [
                    file_version: "${params.File_Tag}-${BUILD_NUMBER}",
                  ],
            			colorized: true
                  ) 
 				}
 			}
 		}
  	}
  	stage('deploy'){
      environment {
        FILE_VERSION = "${params.File_Tag}-${BUILD_NUMBER}"
        FE_VERSION = "${params.Frontend_Tag}-${BUILD_NUMBER}"
        BE_VERSION = "${params.Backend_Tag}-${BUILD_NUMBER}"
      }

  		steps{
  			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
		   withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
		     string(credentialsId: 'newrelic_license_key', variable: 'NEWRELIC_LIC_KEY'),
			 string(credentialsId: 'sumo_access_id', variable: 'SUMO_ACCESS_ID'),
			 string(credentialsId: 'sumo_access_key', variable: 'SUMO_ACCESS_KEY'),
			 string(credentialsId: 'bento_syslog_host', variable: 'SYSLOG_HOST'),
			 string(credentialsId: 'tls_hostname', variable: 'TLS_HOSTNAME')
			 ]){
             ansiblePlaybook( 
                playbook: '${WORKSPACE}/icdc-devops/ansible/deploy-bento-icdc.yml', 
                inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                credentialsId: 'commonsdocker',
                extraVars: [
                    tier: "${params.Environment}",
                    release: "${params.Release}",
                    project: 'icdc',
                    frontend_version: "${params.Frontend_Tag}-${BUILD_NUMBER}",
                    backend_version: "${params.Backend_Tag}-${BUILD_NUMBER}",
                    file_version: "${params.File_Tag}-${BUILD_NUMBER}",
                    backend_git_tag: "${params.Backend_Tag}",
                    frontend_git_tag: "${params.Frontend_Tag}"
                    ],
                become: true,
                hostKeyChecking: false,
                colorized: true)
           }
           
          
  			}
  		}
  	}

	stage('clear redis cache'){
	  when {
		expression { params.Flush_Redis }
		}
	
 	  environment {
		TIER = "${params.Environment}"
		}

	  steps{
		wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
			
			script {
              sh label: 'database-hosts', script: '''#!/bin/bash
                echo "Creating inventory file"
                echo "[icdc]" > ${WORKSPACE}/icdc-devops/ansible/hosts
                echo ${NEO4J_IP} >> ${WORKSPACE}/icdc-devops/ansible/hosts

              '''

            }
			
			ansiblePlaybook( 
               playbook: '${WORKSPACE}/icdc-devops/ansible/redis_icdc.yml', 
               inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
               colorized: true)
			}
		}
	}

  }
  post {
    always {
      sendSlackMessage()
    }
    success {

    script {
      withCredentials([usernamePassword(credentialsId: 'git_credential', passwordVariable: 'git_password', usernameVariable: 'git_user')]) {
        sh label: 'GIT-Tag Backend', script: '''#!/bin/bash
        
        gitURL=$(git config remote.origin.url | sed 's|^.*//||')
        echo "Applying tag $Backend_Tag to URL:  $gitURL"
        git config user.email "jenkins@bento-tools.org"
        git config user.name "Bento Jenkins"
        git tag --no-sign -a ${Backend_Tag}-icdc-${BUILD_NUMBER} -m "Jenkins tag: ${Backend_Tag}-${BUILD_NUMBER}"
        git push https://${git_user}:${git_password}@${gitURL} --tags
        
        '''
      
        }
      }
    
    script {
      withCredentials([usernamePassword(credentialsId: 'git_credential', passwordVariable: 'git_password', usernameVariable: 'git_user')]) {
        sh label: 'GIT-Tag Frontend', script: '''#!/bin/bash
        
        cd ${WORKSPACE}/bento-frontend
        gitURL=$(git config remote.origin.url | sed 's|^.*//||')
        echo "Applying tag $Frontend_Tag to URL:  $gitURL"
        git config user.email "jenkins@bento-tools.org"
        git config user.name "Bento Jenkins"
        git tag --no-sign -a ${Frontend_Tag}-${BUILD_NUMBER} -m "Jenkins tag: ${Frontend_Tag}-${BUILD_NUMBER}"
        git push https://${git_user}:${git_password}@${gitURL} --tags
        
        '''
      
        }
      }
    
    }
    cleanup {
  
    cleanWs()
    
  }
  }
}
