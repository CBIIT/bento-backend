
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			label 'cicd_microservice'
		}
	}
	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'sandbox,dev,test,qa,perf,icdc,prod' )
    extendedChoice( 
        name: 'Region', 
        defaultValue: 'us-east-1', 
        description: 'Choose aws region to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'us-east-1,us-west-1' )
	booleanParam(
		defaultValue: true,
		description: 'Flush the Redis cache',
		name: 'Flush_Redis')
	booleanParam(
		defaultValue: true,
		description: 'Enable the Redis filter',
		name: 'Enable_Redis_Filter')


  }
  options {
  	ansiColor('xterm')
  }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{

    stage('Set Environment'){
      environment {
        SLACK_URL = "${SLACK_URL}"
        VERSION = "${params.Frontend_Image}"
      }
		steps {

          script {
            currentBuild.displayName = "Tag: ${VERSION}  Environment: ${params.Environment}"
            }
		
          script {
            switch("${params.Environment}") {
              case "dev":
                withCredentials([string(credentialsId: 'in_dev_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'in_dev_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
              case "qa":
                withCredentials([string(credentialsId: 'in_qa_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'in_qa_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_QA_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "qa"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
              case "perf":
                withCredentials([string(credentialsId: 'in_stage_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'in_stage_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_PERF_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "perf"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
              case "prod":
                withCredentials([string(credentialsId: 'in_prod_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'in_prod_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_PROD_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "prod"
				  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
      
              default:
                withCredentials([string(credentialsId: 'in_dev_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'in_dev_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
				  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
            }
          }
        }
    }

    stage('clear redis cache'){
		agent { label 'data-loader' }
		when {
			expression { params.Flush_Redis }
			}
	
  		environment {
			TIER = "${params.Environment}"
			}

		steps{
			checkout( changelog:false,
				poll: false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
				])
        
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
				ansiblePlaybook( 
                playbook: '${WORKSPACE}/icdc-devops/ansible/redis.yml', 
                inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                colorized: true)
			}
		}
	}
	
  	stage('deploy'){
	  environment {
	   SLACK_URL = "${SLACK_URL}"
       TIER = "${params.Environment}"
	   VERSION = "${params.Frontend_Image}"
       FE_VERSION = "${params.Frontend_Image}"
       BE_VERSION = "${params.Backend_Image}"
      }
  		steps{
		  node('cicd_microservice') {
		    checkout( changelog:false,
				poll: false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
				])
  			
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            		playbook: '${WORKSPACE}/icdc-devops/ansible/deploy-bento-ins.yml', 
            		inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
            		extraVars: [
                    enable_redis_filter: "${params.Enable_Redis_Filter}",
                    ],
					colorized: true)
  			}
		  }
  		}
  	}

  }
  post {
    always {
      
      sendSlackMessage()

    }
	
	cleanup {
	
		cleanWs()
    
	}
  }
}