
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			label 'cicd_microservice'
		}
	}
	parameters {
	gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'integration', 
        name: 'Frontend_Tag', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/bento-frontend')
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'Integration', 
        name: 'Backend_Tag', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/bento-backend')
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'sandbox,dev,test,qa,stage,prod' )
  }
  options {
  	ansiColor('xterm')
  }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{
  	stage('checkout'){
  		steps {
  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Backend_Tag}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/bento-backend']]])
				
			checkout([$class: 'GitSCM',
				branches: [[name: "${params.Frontend_Tag}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'bento-frontend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-frontend']]])

  			dir('icdc-devops'){
  				git branch: 'master',
				    poll: false,
    				url: 'https://github.com/CBIIT/icdc-devops.git'
  			}
        
        }
 
  	}
    stage('Set Environment'){
      environment {
        SLACK_URL = "${SLACK_URL}"
      }
        steps {
          script {
            switch("${params.Environment}") {
              case "dev":
                withCredentials([string(credentialsId: 'dev_bearer', variable: 'BEARER')]) {
                  env.NEO4J_IP    = "${NEO4J_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
                  env.TAG = "${params.Backend_Tag}"
                }
              break
              case "qa":
                withCredentials([string(credentialsId: 'qa_bearer', variable: 'BEARER')]) {
                  env.NEO4J_IP    = "${NEO4J_QA_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "qa"
                  env.TAG = "${params.Backend_Tag}"
                }
              break
              case "stage":
                withCredentials([string(credentialsId: 'stage_bearer', variable: 'BEARER')]) {
                  env.NEO4J_IP    = "${NEO4J_STAGE_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "stage"
                  env.TAG = "${params.Backend_Tag}"
                }
              break
              case "prod":
                withCredentials([string(credentialsId: 'prod_bearer', variable: 'BEARER')]) {
                  env.NEO4J_IP    = "${NEO4J_PROD_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "prod"
                  env.TAG = "${params.Backend_Tag}"
                }
              break
              default:
                withCredentials([string(credentialsId: 'dev_bearer', variable: 'BEARER')]) {
                  env.NEO4J_IP    = "${NEO4J_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
                  env.TAG = "${params.Backend_Tag}"
                }
              break
            }
          }
        }
    }
  	stage('build'){
 		steps {
 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 				withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]){
          ansiblePlaybook(  			
                  playbook: '${WORKSPACE}/icdc-devops/ansible/bento-build.yml', 
            			inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
            			colorized: true) 
 				}
 			}
 		}
  	}
  	stage('deploy'){
  		steps{
  			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            		playbook: '${WORKSPACE}/icdc-devops/ansible/bento-deploy.yml', 
            		inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
            		colorized: true)
  			}
  		}
  	}
  }
  post {
    always {
      
      sendSlackMessage()
    }
  }
}