
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}

pipeline {
  agent {
    node {
      label 'cicd_microservice'
    }
  }
  parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'sandbox,dev,test,qa,perf,icdc,prod' )
    extendedChoice( 
        name: 'Region', 
        defaultValue: 'us-east-1', 
        description: 'Choose aws region to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'us-east-1,us-west-1' )
    gitParameter(branchFilter: 'origin/(.*)', 
       defaultValue: 'main', 
       name: 'Backend_Tag', 
       type: 'PT_BRANCH_TAG',
       quickFilterEnabled: false, 
       selectedValue: 'DEFAULT', 
       sortMode: 'ASCENDING_SMART', 
       tagFilter: '*', 
       useRepository: 'https://github.com/CBIIT/CCDI-Portal-Service')
    gitParameter(branchFilter: 'origin/(.*)', 
       defaultValue: 'main', 
       name: 'Frontend_Tag', 
       type: 'PT_BRANCH_TAG',
       quickFilterEnabled: false, 
       selectedValue: 'DEFAULT', 
       sortMode: 'ASCENDING_SMART', 
       tagFilter: '*', 
       useRepository: 'https://github.com/CBIIT/CCDI-Portal-WebPortal')
  booleanParam(
    defaultValue: true,
    description: 'Use the Redis cache',
    name: 'Use_Redis')
  booleanParam(
    defaultValue: true,
    description: 'Flush the Redis cache',
    name: 'Flush_Redis')
  booleanParam(
    defaultValue: true,
    description: 'Enable the Redis filter',
    name: 'Enable_Redis_Filter')
  string(
      defaultValue: 'redis-schema.graphql',
    description: 'The file to use when loading redis schema',
    name: 'Redis_Schema_File')
  string(
      defaultValue: 'redis-filter-config.bento.yaml',
    description: 'The file to use when loading redis queries',
    name: 'Redis_Queries_File')
  string(
      defaultValue: 'test-queries.1k.bento.yaml',
    description: 'The file to use when loading test queries',
    name: 'Test_Queries_File')
  string(
      defaultValue: '',
    description: 'The set of parameters to use for test automation - if left blank no tests will be run',
    name: 'Test_Params')
  }
  options {
    ansiColor('xterm')
  }
  tools {
    maven 'Default' 
    jdk 'Default' 
  }
  stages{
    stage('checkout'){
      steps {
        checkout([$class: 'GitSCM', 
          branches: [[name: "${params.Backend_Tag}"]], 
          doGenerateSubmoduleConfigurations: 
          false, extensions: [], submoduleCfg: [], 
          userRemoteConfigs: 
          [[url: 'https://github.com/CBIIT/CCDI-Portal-Service']]])

        checkout([$class: 'GitSCM',
          branches: [[name: "${params.Frontend_Tag}"]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[$class: 'RelativeTargetDirectory',
          relativeTargetDir: 'bento-frontend']],
          submoduleCfg: [],
          userRemoteConfigs: 
          [[url: 'https://github.com/CBIIT/CCDI-Portal-WebPortal']]])

          checkout( poll: false, 
          changelog:false,
          scm: [$class: 'GitSCM', 
          branches: [[name: '*/master']], 
          doGenerateSubmoduleConfigurations: false, 
          extensions: [[$class: 'DisableRemotePoll'],
          [$class: 'PathRestriction', excludedRegions: '*'], 
          [$class: 'RelativeTargetDirectory', 
          relativeTargetDir: 'icdc-devops']], 
          submoduleCfg: [], 
          userRemoteConfigs: 
          [[url: 'https://github.com/CBIIT/icdc-devops.git']]])

          }
 
    }

  }
      stage('Set Environment'){
      environment {
        SLACK_URL = "${SLACK_URL}"
        VERSION = "${params.Frontend_Tag}"
      }
        steps {
          script {
      
            switch("${params.Environment}") {
              case "dev":
                withCredentials([string(credentialsId: 'dev_bearer', variable: 'BEARER'),
                  string(credentialsId: 'es_dev_host', variable: 'ES_HOST'),
            usernamePassword(credentialsId: 'dev_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"
                  env.ES_HOST = "${ES_HOST}"

                }
              break
              case "qa":
                withCredentials([string(credentialsId: 'qa_bearer', variable: 'BEARER'),
                  string(credentialsId: 'es_qa_host', variable: 'ES_HOST'),
            usernamePassword(credentialsId: 'qa_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_QA_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "qa"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"
                  env.ES_HOST = "${ES_HOST}"

                }
              break
              case "perf":
                withCredentials([string(credentialsId: 'perf_bearer', variable: 'BEARER'),
            usernamePassword(credentialsId: 'perf_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_PERF_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "perf"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
              case "prod":
                withCredentials([string(credentialsId: 'prod_bearer', variable: 'BEARER'),
            usernamePassword(credentialsId: 'prod_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_PROD_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "prod"
          env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
              case "icdc":
                withCredentials([string(credentialsId: 'icdc_bearer', variable: 'BEARER')]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "icdc"

                }
        break
              default:
                withCredentials([string(credentialsId: 'dev_bearer', variable: 'BEARER'),
            usernamePassword(credentialsId: 'dev_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
          env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
            }
          }
        }
    }
}