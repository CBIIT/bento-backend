
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			label 'cicd_ansible_2.9'
		}
	}
	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'dev' )
    extendedChoice( 
        name: 'Region', 
        defaultValue: 'us-east-1', 
        description: 'Choose aws region to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'us-east-1' )
	booleanParam(
		defaultValue: true,
		description: 'Use the Redis cache',
		name: 'Use_Redis')
	booleanParam(
		defaultValue: false,
		description: 'Flush the Redis cache',
		name: 'Flush_Redis')
	booleanParam(
		defaultValue: true,
		description: 'Enable the Elasticsearch filter',
		name: 'Enable_ES_Filter')
	booleanParam(
		defaultValue: true,
		description: 'Reload Elasticsearch data',
		name: 'Reload_ES_Data')
	string(
	    defaultValue: 'test-queries.1k.bento.yaml',
		description: 'The file to use when loading test queries',
		name: 'Test_Queries_File')
	string(
	    defaultValue: '',
		description: 'The commit id to checkout for the frontend',
		name: 'fe_commit_id')
	string(
	    defaultValue: '',
		description: 'The commit id to checkout for the backend',
		name: 'be_commit_id')

//	gitParameter(branchFilter: 'origin/(.*)', 
//        defaultValue: 'integration', 
//        name: 'Frontend_Tag', 
//        type: 'PT_BRANCH_TAG',
//        quickFilterEnabled: false, 
//        selectedValue: 'DEFAULT', 
//        sortMode: 'ASCENDING_SMART', 
//        tagFilter: '*', 
//        useRepository: 'https://github.com/CBIIT/bento-ctdc-frontend')
//
//	The Frontend_Tag parameter has been replaced in this job by a GUI parameter due to the fact that type "active choice reactive parameter" is not supported.
//	The GUI definition for this parameter should follow Environment and use the following values:
//	
//	Script:
//		env_value = Environment
//		def gettags = ("git ls-remote -h -t https://github.com/CBIIT/bento-ctdc-frontend.git").execute()
//		def tags = gettags.text.readLines().collect { it.split()[1].replaceAll('refs/heads/', '').replaceAll('refs/tags/', '').replaceAll("\\^\\{\\}", '')}
//		List tagnames = tags.collect{ '' + it + '' }
//
//		if(env_value.equalsIgnoreCase("dev")) {
//		  for(int i=0; i < tagnames.size(); i++) {
//			if(tagnames.get(i).equalsIgnoreCase("integration")) {
//			  new_value = tagnames[i] + ':selected'
//			  tagnames.set(i, new_value);
//			  }
//			}
//		  } else {
//			for(int i=0; i < tagnames.size(); i++) {
//			  if(tagnames.get(i).equalsIgnoreCase("master")) {
//				new_value = tagnames[i] + ':selected'
//				tagnames.set(i, new_value);
//				}
//			  }
//			}
//
//		return tagnames
//		
//	Fallback Script:
//		return ['integration']
//		
//		NOTE: this sets the default frontend branch to "integration" and is required for builds triggered from SCM polling.
//		
//	Referenced parameters:
//		Environment

//    gitParameter(branchFilter: 'origin/(.*)', 
//        defaultValue: 'Integration', 
//        name: 'Backend_Tag', 
//        type: 'PT_BRANCH_TAG',
//        quickFilterEnabled: false, 
//        selectedValue: 'DEFAULT', 
//        sortMode: 'ASCENDING_SMART', 
//        tagFilter: '*', 
//        useRepository: 'https://github.com/CBIIT/bento-backend')
//
//	The Backend_Tag parameter has been replaced in this job by a GUI parameter due to the fact that type "active choice reactive parameter" is not supported.
//	The GUI definition for this parameter should follow Frontend_Tag and use the following values:
//	
//	Script:
//		front_tag = Frontend_Tag
//		def gettags = ("git ls-remote -h -t https://github.com/CBIIT/bento-backend.git").execute()
//		def tags = gettags.text.readLines().collect { it.split()[1].replaceAll('refs/heads/', '').replaceAll('refs/tags/', '').replaceAll("\\^\\{\\}", '')}
//		List tagnames = tags.collect{ '' + it + '' }
//
//		for(int i=0; i < tagnames.size(); i++) {
//		  if(tagnames.get(i).equalsIgnoreCase(front_tag)) {
//			new_value = tagnames[i] + ':selected'
//			tagnames.set(i, new_value);
//			}
//		  }
//
//		for(int i=0; i < tagnames.size(); i++) {
//		  if(tagnames.get(i).equalsIgnoreCase("Integration")) {
//			new_value = tagnames[i] + ':selected'
//			tagnames.set(i, new_value);
//			}
//		  }
//
//		return tagnames
//		
//	Fallback Script:
//		return ['Integration']
//		
//		NOTE: this sets the default backend branch to "Integration" and is required for builds triggered from SCM polling. The branch defined here should math the default for Frontend_Tag
//		
//	Referenced parameters:
//		Frontend_Tag

  }
  options {
  	ansiColor('xterm')
  }

  stages{
  	stage('checkout'){
  		steps {

  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Backend_Tag}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/bento-backend']]])

			checkout([$class: 'GitSCM',
				branches: [[name: "${params.Frontend_Tag}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'ctdc-frontend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-ctdc-frontend']]])

  			checkout( poll: false, 
				changelog:false,
				scm: [$class: 'GitSCM', 
				//branches: [[name: '*/master']], 
				branches: [[name: '*/ctdc_troubleshooting']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]])

        }
 
  	}
    stage('Set Environment'){
      environment {
        SLACK_URL = "${SLACK_URL}"
        VERSION = "${params.Frontend_Tag}"
      }
        steps {
          script {
            switch("${params.Environment}") {
              case "dev":
                withCredentials([string(credentialsId: 'es_ctdc_host', variable: 'ES_HOST'),
				    usernamePassword(credentialsId: 'ctdc_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_CTDC_IP}"
                  env.TIER  = "dev"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"
				  env.ES_HOST = "${ES_HOST}"

                }
              break
              default:
                withCredentials([string(credentialsId: 'es_ctdc_host', variable: 'ES_HOST'),
				    usernamePassword(credentialsId: 'ctdc_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_CTDC_IP}"
                  env.TIER  = "dev"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"
				  env.ES_HOST = "${ES_HOST}"

                }
              break
            }
          }
        }
    }

  	stage('build'){
      environment {
       FE_VERSION = "${params.Frontend_Tag}"
       BE_VERSION = "${params.Backend_Tag}"
      }
 		steps {

 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 				withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]){
                  ansiblePlaybook(  			
                    playbook: '${WORKSPACE}/icdc-devops/ansible/bento-build-ctdc-dev.yml', 
            			inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
						extraVars: [
						project: 'ctdc',
                        redis_schema_file: "",
						redis_init_queries_file: "",
                        test_queries_file: "${params.Test_Queries_File}",
						frontend_commit_id: "${params.fe_commit_id}",
						backend_commit_id: "${params.be_commit_id}",
                        ],
						colorized: true)
 				}
 			}
 		}
  	}

	stage('clear redis cache'){
		agent { label 'data-loader' }
		when {
			expression { params.Flush_Redis }
			}
	
  		environment {
			TIER = "${params.Environment}"
			}

		steps{
			checkout( changelog:false,
				poll: false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
				])
        
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
				ansiblePlaybook( 
                playbook: '${WORKSPACE}/icdc-devops/ansible/redis.yml', 
                inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                colorized: true)
			}
		}
	}

  	stage('deploy'){
	  environment {
       FE_VERSION = "${params.Frontend_Tag}-${BUILD_NUMBER}"
       BE_VERSION = "${params.Backend_Tag}-${BUILD_NUMBER}"
      }
  		steps{
  		  node('cicd_ansible_2.9') {
		    checkout( changelog:false,
				poll: false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']],
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
				])
			
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            		playbook: '${WORKSPACE}/icdc-devops/ansible/bento-deploy.yml', 
            		inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
            		extraVars: [
					project: 'ctdc',
                    enable_redis: "${params.Use_Redis}",
					enable_es_filter: "${params.Enable_ES_Filter}",
                    ],
					colorized: true)
  			}
		  }
  		}
  	}

	stage('update database monitoring agents'){
		steps{
		  node('data-loader') {
		    checkout( changelog:false,
				poll: false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
				])
			
		    echo "Recreating inventory file"
			sh "cp ${WORKSPACE}/icdc-devops/ansible/hosts ${WORKSPACE}/icdc-devops/ansible/hosts.bak"
            sh "echo [agent_setup] >> ${WORKSPACE}/icdc-devops/ansible/hosts"
            sh "echo ${NEO4J_IP} ansible_ssh_private_key_file=/home/bento/.ssh/devops ansible_ssh_user=bento >> ${WORKSPACE}/icdc-devops/ansible/hosts"
  			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            		playbook: '${WORKSPACE}/icdc-devops/ansible/agent-setup.yml', 
            		inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
					extraVars: [
                    env: "${params.Environment}",
					app_type: 'database',
					app_name: 'neo4j',
                    project: 'ctdc',
					log_path: '/var/log/neo4j/*.log',
                    ],
            		colorized: true)
  			}
  		  }
		}
  	}

  }
  post {

	always {

      sendSlackMessage()

    }

	success {

//		script {
//			withCredentials([usernamePassword(credentialsId: 'github_user', passwordVariable: 'git_password', usernameVariable: 'git_user')]) {
//				sh label: 'GIT-Tag Backend', script: '''#!/bin/bash
//				
//				gitURL=$(git config remote.origin.url | sed 's|^.*//||')
//				echo "Applying tag $Backend_Tag to URL:  $gitURL"
//				git config user.email "jenkins@bento-tools.org"
//				git config user.name "Bento Jenkins"
//				git tag --no-sign -a ${Backend_Tag}-bento-${BUILD_NUMBER} -m "Jenkins tag: ${Backend_Tag}-${BUILD_NUMBER}"
//				git push https://${git_user}:${git_password}@${gitURL} --tags
//				
//				'''
//			
//				}
//			}
//		
//		script {
//			withCredentials([usernamePassword(credentialsId: 'github_user', passwordVariable: 'git_password', usernameVariable: 'git_user')]) {
//				sh label: 'GIT-Tag Frontend', script: '''#!/bin/bash
//				
//				cd ${WORKSPACE}/bento-frontend
//				gitURL=$(git config remote.origin.url | sed 's|^.*//||')
//				echo "Applying tag $Frontend_Tag to URL:  $gitURL"
//				git config user.email "jenkins@bento-tools.org"
//				git config user.name "Bento Jenkins"
//				git tag --no-sign -a ${Frontend_Tag}-${BUILD_NUMBER} -m "Jenkins tag: ${Frontend_Tag}-${BUILD_NUMBER}"
//				git push https://${git_user}:${git_password}@${gitURL} --tags
//				
//				'''
//			
//				}
//			}

        script {
			if (params.Reload_ES_Data) {
				echo 'Reload data to Elasticsearch'
				build job: 'CTDC-Dev/_Data_Processing/BentoDataLoader_ES_CTDC', parameters: [gitParameter(name: 'Dataloader_Branch', value: 'master'), gitParameter(name: 'Frontend_Branch', value: "${params.Frontend_Tag}"), gitParameter(name: 'Backend_Branch', value: "${params.Backend_Tag}"), extendedChoice(name: 'Environment', value: "${params.Environment}")]
			}
		}
		
		}

	cleanup {
	
	  cleanWs()
    
	}

  }
}