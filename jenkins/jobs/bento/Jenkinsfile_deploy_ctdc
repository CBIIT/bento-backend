
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			label 'cicd_microservice'
		}
	}
	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'dev' )
    extendedChoice( 
        name: 'Region', 
        defaultValue: 'us-east-1', 
        description: 'Choose aws region to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'us-east-1' )
	booleanParam(
		defaultValue: true,
		description: 'Enable the Elasticsearch filter',
		name: 'Enable_ES_Filter')
	booleanParam(
		defaultValue: false,
		description: 'Reload Elasticsearch data',
		name: 'Reload_ES_Data')

//	gitParameter(branchFilter: 'origin/(.*)', 
//        defaultValue: 'integration', 
//        name: 'Frontend_Image', 
//        type: 'PT_BRANCH_TAG',
//        quickFilterEnabled: false, 
//        selectedValue: 'DEFAULT', 
//        sortMode: 'ASCENDING_SMART', 
//        tagFilter: '*', 
//        useRepository: 'https://github.com/CBIIT/bento-frontend')
//
//	The Frontend_Image parameter has been replaced in this job by a GUI parameter due to the fact that type "active choice reactive parameter" is not supported.
//	The GUI definition for this parameter should follow Environment and use the following values:
//	
//	Script:
//		branch_name = Branch
//
//		def cmd = "/usr/local/bin/aws ecr list-images --repository-name bento-frontend --filter tagStatus=TAGGED --region us-east-1 --output text"
//		
//		def ecr_images_json = cmd.execute()
//		ecr_images_json.waitFor()
//		
//		def ecr_images_list = ecr_images_json.text.readLines().collect { it.substring(it.lastIndexOf("\t") + 1) }
//		ecr_images_list.removeAll(['latest'] as Object[])
//		ecr_images_list.removeAll { it.contains('production') }
//		
//		List tagnames = ecr_images_list.sort()
//		
//		if(!branch_name.equals("Show All Tags")) {
//		  def filteredtags = tagnames.findAll { it.contains branch_name }
//		  return filteredtags
//		  } else {
//		      return tagnames
//		      }
//		
//	Fallback Script:
//		return ['integration']
//		
//		NOTE: this sets the default frontend branch to "integration" and is required for builds triggered from SCM polling.
//		
//	Referenced parameters:
//		Environment

//    gitParameter(branchFilter: 'origin/(.*)', 
//        defaultValue: 'Integration', 
//        name: 'Backend_Image', 
//        type: 'PT_BRANCH_TAG',
//        quickFilterEnabled: false, 
//        selectedValue: 'DEFAULT', 
//        sortMode: 'ASCENDING_SMART', 
//        tagFilter: '*', 
//        useRepository: 'https://github.com/CBIIT/bento-backend')
//
//	The Backend_Image parameter has been replaced in this job by a GUI parameter due to the fact that type "active choice reactive parameter" is not supported.
//	The GUI definition for this parameter should follow Frontend_Image and use the following values:
//	
//	Script:
//		front_tag = Frontend_Image
//		branch_name = Branch
//		
//		def cmd = "/usr/local/bin/aws ecr list-images --repository-name bento-backend --filter tagStatus=TAGGED --region us-east-1 --output text"
//		
//		def ecr_images_json = cmd.execute()
//		ecr_images_json.waitFor()
//		
//		def ecr_images_list = ecr_images_json.text.readLines().collect { it.substring(it.lastIndexOf("\t") + 1) }
//		ecr_images_list.removeAll(['latest'] as Object[])
//		ecr_images_list.removeAll { it.contains('production') }
//		
//		List tagnames = ecr_images_list.sort()
//		
//		if(!branch_name.equals("Show All Tags")) {
//		  def filteredtags = tagnames.findAll { it.toLowerCase().contains branch_name.toLowerCase() }
//		  for(int i=0; i < filteredtags.size(); i++) {
//			if(filteredtags.get(i).equalsIgnoreCase(front_tag)) {
//			  new_value = filteredtags[i] + ':selected'
//			  filteredtags.set(i, new_value);
//			  }
//			}
//		  return filteredtags
//		  } else {
//		    for(int i=0; i < tagnames.size(); i++) {
//			  if(tagnames.get(i).equalsIgnoreCase(front_tag)) {
//			    new_value = tagnames[i] + ':selected'
//			    tagnames.set(i, new_value);
//			    }
//			  }
//		        return tagnames
//		    }
//		
//	Fallback Script:
//		return ['Integration']
//		
//		NOTE: this sets the default backend branch to "Integration" and is required for builds triggered from SCM polling. The branch defined here should math the default for Frontend_Image
//		
//	Referenced parameters:
//		Frontend_Image

  }
  options {
  	ansiColor('xterm')
  }

  stages{
//  	stage('checkout'){
//  		steps {
//			git branch: "${params.Backend_Image}",
//				url: 'https://github.com/CBIIT/bento-backend'
//				
//  			checkout([$class: 'GitSCM', 
//  				branches: [[name: "${params.Backend_Image}"]], 
//  				doGenerateSubmoduleConfigurations: 
//  				false, extensions: [], submoduleCfg: [], 
//  				userRemoteConfigs: 
//  				[[url: 'https://github.com/CBIIT/bento-backend']]])
//
//			dir('bento-frontend'){
//				git branch: "${params.Frontend_Image}",
//				url: 'https://github.com/CBIIT/bento-frontend'
//				}
//
//			checkout([$class: 'GitSCM',
//				branches: [[name: "${params.Frontend_Image}"]],
//				doGenerateSubmoduleConfigurations: false,
//				extensions: [[$class: 'RelativeTargetDirectory',
//				relativeTargetDir: 'bento-frontend']],
//				submoduleCfg: [],
//				userRemoteConfigs: 
//				[[url: 'https://github.com/CBIIT/bento-frontend']]])
//
//  			checkout( changelog:false,
//				poll: false,
//				scm: [$class: 'GitSCM', 
//				branches: [[name: '*/master']], 
//				doGenerateSubmoduleConfigurations: false, 
//				extensions: [[$class: 'DisableRemotePoll'],
//				[$class: 'PathRestriction', excludedRegions: '*'], 
//				[$class: 'RelativeTargetDirectory', 
//				relativeTargetDir: 'icdc-devops']], 
//				submoduleCfg: [], 
//				userRemoteConfigs: 
//				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
//				])
//        
//        }
// 
//  	}
    stage('Set Environment'){
      environment {
        SLACK_URL = "${SLACK_URL}"
      }
		steps {

          script {
            currentBuild.displayName = "Tag: ${params.Frontend_Image}  Environment: ${params.Environment}"
            }
		
          script {
            switch("${params.Environment}") {
              case "dev":
                withCredentials([
                string(credentialsId: 'es_ctdc_host', variable: 'ES_HOST'),
                usernamePassword(credentialsId: 'ctdc_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_ICDC_IP}"
                  env.TIER  = "dev"
				  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
			  break
            }
          }
        }
    }

  	stage('deploy'){
	  environment {
	   SLACK_URL = "${SLACK_URL}"
       TIER = "${params.Environment}"
       FE_VERSION = "${params.Frontend_Image}"
       BE_VERSION = "${params.Backend_Image}"
	   SLACK_CHANNEL = "#system-alerts"
	   URL_DOMAIN = "bento-tools.org"
      }
  		steps{
		  node('cicd_microservice') {
		    checkout( changelog:false,
				poll: false,
				scm: [$class: 'GitSCM', 
				//branches: [[name: '*/master']], 
				branches: [[name: '*/ctdc_fargate']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
				])
  			
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            		playbook: '${WORKSPACE}/icdc-devops/ansible/ctdc-deploy.yml', 
            		inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
            		extraVars: [
					project_name: "ctdc2"
					enable_es_filter: "${params.Enable_ES_Filter}",
                    ],
					colorized: true)
 			}

		  }
 		}
  	}

  }
  post {

	cleanup {
	
		cleanWs()
    
	}
  }
}