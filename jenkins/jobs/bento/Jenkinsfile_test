
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			label 'ansible-10-test'
		}
	}
	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'sandbox,dev,test,qa,perf,prod' )
    extendedChoice( 
        name: 'Region', 
        defaultValue: 'us-east-1', 
        description: 'Choose aws region to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'us-east-1,us-west-1' )
	booleanParam(
		defaultValue: true,
		description: 'Use the Redis cache',
		name: 'Use_Redis')
	booleanParam(
		defaultValue: true,
		description: 'Flush the Redis cache',
		name: 'Flush_Redis')
	booleanParam(
		defaultValue: true,
		description: 'Enable the Elasticsearch filter',
		name: 'Enable_ES_Filter')
	booleanParam(
		defaultValue: true,
		description: 'Reload Elasticsearch data',
		name: 'Reload_ES_Data')
	string(
	    defaultValue: 'test-queries.1k.bento.yaml',
		description: 'The file to use when loading test queries',
		name: 'Test_Queries_File')
	string(
	    defaultValue: '',
		description: 'The set of parameters to use for test automation - if left blank no tests will be run',
		name: 'Test_Params')

//	gitParameter(branchFilter: 'origin/(.*)', 
//        defaultValue: 'integration', 
//        name: 'Frontend_Tag', 
//        type: 'PT_BRANCH_TAG',
//        quickFilterEnabled: false, 
//        selectedValue: 'DEFAULT', 
//        sortMode: 'ASCENDING_SMART', 
//        tagFilter: '*', 
//        useRepository: 'https://github.com/CBIIT/bento-frontend')
//
//	The Frontend_Tag parameter has been replaced in this job by a GUI parameter due to the fact that type "active choice reactive parameter" is not supported.
//	The GUI definition for this parameter should follow Environment and use the following values:
//	
//	Script:
//		env_value = Environment
//		def gettags = ("git ls-remote -h https://github.com/CBIIT/bento-frontend.git").execute()
//		def tags = gettags.text.readLines().collect { it.split()[1].replaceAll('refs/heads/', '').replaceAll('refs/tags/', '').replaceAll("\\^\\{\\}", '')}
//		List tagnames = tags.collect{ '' + it + '' }
//
//		if(env_value.equalsIgnoreCase("dev")) {
//		  for(int i=0; i < tagnames.size(); i++) {
//			if(tagnames.get(i).equalsIgnoreCase("integration")) {
//			  new_value = tagnames[i] + ':selected'
//			  tagnames.set(i, new_value);
//			  }
//			}
//		  } else {
//			for(int i=0; i < tagnames.size(); i++) {
//			  if(tagnames.get(i).equalsIgnoreCase("master")) {
//				new_value = tagnames[i] + ':selected'
//				tagnames.set(i, new_value);
//				}
//			  }
//			}
//
//		return tagnames
//		
//	Fallback Script:
//		return ['integration']
//		
//		NOTE: this sets the default frontend branch to "integration" and is required for builds triggered from SCM polling.
//		
//	Referenced parameters:
//		Environment

//    gitParameter(branchFilter: 'origin/(.*)', 
//        defaultValue: 'Integration', 
//        name: 'Backend_Tag', 
//        type: 'PT_BRANCH_TAG',
//        quickFilterEnabled: false, 
//        selectedValue: 'DEFAULT', 
//        sortMode: 'ASCENDING_SMART', 
//        tagFilter: '*', 
//        useRepository: 'https://github.com/CBIIT/bento-backend')
//
//	The Backend_Tag parameter has been replaced in this job by a GUI parameter due to the fact that type "active choice reactive parameter" is not supported.
//	The GUI definition for this parameter should follow Frontend_Tag and use the following values:
//	
//	Script:
//		front_tag = Frontend_Tag
//		def gettags = ("git ls-remote -h https://github.com/CBIIT/bento-backend.git").execute()
//		def tags = gettags.text.readLines().collect { it.split()[1].replaceAll('refs/heads/', '').replaceAll('refs/tags/', '').replaceAll("\\^\\{\\}", '')}
//		List tagnames = tags.collect{ '' + it + '' }
//
//		for(int i=0; i < tagnames.size(); i++) {
//		  if(tagnames.get(i).equalsIgnoreCase(front_tag)) {
//			new_value = tagnames[i] + ':selected'
//			tagnames.set(i, new_value);
//			}
//		  }
//
//		for(int i=0; i < tagnames.size(); i++) {
//		  if(tagnames.get(i).equalsIgnoreCase("Integration")) {
//			new_value = tagnames[i] + ':selected'
//			tagnames.set(i, new_value);
//			}
//		  }
//
//		return tagnames
//		
//	Fallback Script:
//		return ['Integration']
//		
//		NOTE: this sets the default backend branch to "Integration" and is required for builds triggered from SCM polling. The branch defined here should math the default for Frontend_Tag
//		
//	Referenced parameters:
//		Frontend_Tag

  }
  options {
  	ansiColor('xterm')
  }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{
  	stage('checkout'){
  		steps {
//			git branch: "${params.Backend_Tag}",
//				url: 'https://github.com/CBIIT/bento-backend'
				
  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Backend_Tag}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/bento-backend']]])

//			dir('bento-frontend'){
//				git branch: "${params.Frontend_Tag}",
//				url: 'https://github.com/CBIIT/bento-frontend'
//				}

			checkout([$class: 'GitSCM',
				branches: [[name: "${params.Frontend_Tag}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'bento-frontend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-frontend']]])

  			checkout( poll: false, 
				changelog:false,
				scm: [$class: 'GitSCM', 
				//branches: [[name: '*/master']], 
				branches: [[name: '*/cicd_image']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]])

        }
 
  	}
    stage('Set Environment'){
      environment {
        SLACK_URL = "${SLACK_URL}"
      }
        steps {
          script {
			
            switch("${params.Environment}") {
              case "dev":
                withCredentials([string(credentialsId: 'es_dev_host', variable: 'ES_HOST'),
				    usernamePassword(credentialsId: 'dev_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_DEV_IP}"
                  env.TIER  = "dev"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"
				  env.ES_HOST = "${ES_HOST}"

                }
              break
              case "qa":
                withCredentials([string(credentialsId: 'es_qa_host', variable: 'ES_HOST'),
				    usernamePassword(credentialsId: 'qa_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_QA_IP}"
                  env.TIER  = "qa"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"
				  env.ES_HOST = "${ES_HOST}"

                }
              break
              case "perf":
                withCredentials([string(credentialsId: 'es_perf_host', variable: 'ES_HOST'),
				    usernamePassword(credentialsId: 'perf_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_PERF_IP}"
                  env.TIER  = "perf"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"
				  env.ES_HOST = "${ES_HOST}"

                }
              break
              case "prod":
                withCredentials([
                string(credentialsId: 'es_prod_host', variable: 'ES_HOST'),
                usernamePassword(credentialsId: 'prod_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_PROD_IP}"
                  env.TIER  = "prod"
				  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"
				  env.SLACK_CHANNEL = "#system-alerts-prod"
				  env.ES_HOST = "${ES_HOST}"

                }
              break
              default:
                withCredentials([usernamePassword(credentialsId: 'dev_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_DEV_IP}"
                  env.TIER  = "dev"
				  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
            }
          }
        }
    }

  	stage('build'){
      environment {
       FE_VERSION = "${params.Frontend_Tag}"
       BE_VERSION = "${params.Backend_Tag}"
      }
 		steps {

 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 				withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]){
                  ansiblePlaybook(  			
                    playbook: '${WORKSPACE}/icdc-devops/ansible/bento-build.yml', 
            			inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
						extraVars: [
                        redis_schema_file: "",
						redis_init_queries_file: "",
                        test_queries_file: "${params.Test_Queries_File}",
                        ],
						colorized: true)
 				}
 			}
 		}
  	}


  }
  post {

	cleanup {
	
	  cleanWs()
    
	}

  }
}