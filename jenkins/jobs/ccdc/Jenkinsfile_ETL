 
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			label 'cicd_microservice_ccdc'
		}
	}
	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'dev,qa,demo' )
    gitParameter(branchFilter: 'origin/(.*)', 
       defaultValue: 'main', 
       name: 'Etl_Tag', 
       type: 'PT_BRANCH_TAG',
       quickFilterEnabled: false, 
       selectedValue: 'DEFAULT', 
       sortMode: 'ASCENDING_SMART', 
       tagFilter: '*', 
       useRepository: 'https://github.com/CBIIT/CCDC-ETL')
    string(defaultValue: "etl-digest-files", 
        description: 'S3 Folder to load data from', 
        name: 'S3Folder')
    extendedChoice( 
        name: 'DataLoading', 
        description: 'checkboxes for data loading process', 
        multiSelectDelimiter: ',',
        visibleItemCount: 3, 
        type: 'PT_CHECKBOX',
        value: 'DropTable,CreateTable,LoadTable' )


  }
  options {
  	ansiColor('xterm')
  }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }

  stages{
  	stage('checkout'){
  		steps {

				checkout([$class: 'GitSCM',
					branches: [[name: "${params.Etl_Tag}"]],
					doGenerateSubmoduleConfigurations: false,
					extensions: [[$class: 'RelativeTargetDirectory',
					relativeTargetDir: 'CCDC-ETL']],
					submoduleCfg: [],
					userRemoteConfigs: 
					[[url: 'https://github.com/CBIIT/CCDC-ETL']]])

  			checkout( poll: false, 
				changelog:false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]])

        }
 
  	}
   
    stage('Set Environment'){
      environment {
       SLACK_URL = "${SLACK_URL}"
       ETL_VERSION = "${params.Etl_Tag}"
       S3_FOLDER = "${params.S3Folder}"
       DEPLOYMENT_TYPE = "${params.Deployment_Type}"
      }
        steps {
          script {
            switch("${params.Environment}") {
              case "dev":
                withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
                usernamePassword(credentialsId: 'ccdc-dev-rds-cred', passwordVariable: 'RDB_PASSWORD', usernameVariable: 'RDB_USER'),
                string(credentialsId: 'ccdc-dev-es-host', variable: 'ES_HOST')]){
                  env.TIER  = "dev"
                  tier = "${params.Environment}"
                  VERSION = "${params.Etl_Tag}"
                  ETL_VERSION = "${params.Etl_Tag}"
                  RDB_PORT = "3306"
                  env.RDB_USER = "${RDB_USER}"
                  env.RDB_PASSWORD = "${RDB_PASSWORD}"
                  env.ES_HOST = "${ES_HOST}"
                  ES_PORT = "9200"
                  DIGEST_FILE_FOLDER = "${params.S3Folder}"
                }
        break
              case "qa":
                withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
                usernamePassword(credentialsId: 'ccdc-qa-rds-cred', passwordVariable: 'RDB_PASSWORD', usernameVariable: 'RDB_USER'),
                string(credentialsId: 'ccdc-qa-es-host', variable: 'ES_HOST')]){
                  env.TIER  = "dev"
                  tier = "${params.Environment}"
                  VERSION = "${params.Etl_Tag}"
                  ETL_VERSION = "${params.Etl_Tag}"
                  RDB_PORT = "3306"
                  env.RDB_USER = "${RDB_USER}"
                  env.RDB_PASSWORD = "${RDB_PASSWORD}"
                  env.ES_HOST = "${ES_HOST}"
                  ES_PORT = "9200"
                  DIGEST_FILE_FOLDER = "${params.S3Folder}"
                }
        break
              case "demo":
                withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
                usernamePassword(credentialsId: 'ccdc-demo-rds-cred', passwordVariable: 'RDB_PASSWORD', usernameVariable: 'RDB_USER'),
                string(credentialsId: 'ccdc-demo-es-host', variable: 'ES_HOST')]){
                  env.TIER  = "dev"
                  tier = "${params.Environment}"
                  VERSION = "${params.Etl_Tag}"
                  ETL_VERSION = "${params.Etl_Tag}"
                  RDB_PORT = "3306"
                  env.RDB_USER = "${RDB_USER}"
                  env.RDB_PASSWORD = "${RDB_PASSWORD}"
                  env.ES_HOST = "${ES_HOST}"
                  ES_PORT = "9200"
                  DIGEST_FILE_FOLDER = "${params.S3Folder}"
                }
        break
              default:
                withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]) {
                  env.TIER  = "dev"
                }
              break
            }
          }
        }
    }
/*  	stage('build'){
      environment {
       VERSION = "${params.Etl_Tag}"
       ETL_VERSION = "${params.Etl_Tag}"
       S3_FOLDER = "${params.S3Folder}"
      }
 		steps {

 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 				withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]){
                  ansiblePlaybook(  			
                    playbook: '${WORKSPACE}/icdc-devops/ansible/ccdc-build-etl.yml', 
            			inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
						extraVars: [
                        tier: "${params.Environment}",
                        DIGEST_FILE_FOLDER: "${params.S3Folder}",
                        deployment_type: "${params.Deployment_Type}",
                        stack_name: "ccdc",
                        RDB_PORT: "3306",
                        ES_PORT: "9200"
            ],
						colorized: true)
 				  }
 			  }
 		  }
    } */
    stage('DropTable'){
            
            when {
                expression { 
                   return params.DataLoading.contains('DropTable')
                }
            }
            steps {
                script{
                    sh "cd ${WORKSPACE}/CCDC-ETL/"
                    sh "ls -ltr ${WORKSPACE}/CCDC-ETL/"
                    sh "node ${WORKSPACE}/CCDC-ETL/dropTable.js"
                }
            }
    }
    stage('CreateTable'){

            when {
                expression { 
                   return params.DataLoading.contains('CreateTable')
                }
            }
            steps {
                    script{
                      sh "cd ${WORKSPACE}/CCDC-ETL/"
                      sh "ls -ltr ${WORKSPACE}/CCDC-ETL/"
                      echo env.DIGEST_FILE_FOLDER
                      echo ${params.S3Folder}
                      sh "node ${WORKSPACE}/CCDC-ETL/createTable.js"
                    }
                }

    }   
    stage('LoadTable'){

            when {
                expression { 
                   return params.DataLoading.contains('LoadTable')
                }
            }
            steps {
                    script{
                      sh "cd ${WORKSPACE}/CCDC-ETL/"
                      sh "ls -ltr ${WORKSPACE}/CCDC-ETL/"
                      #sh "node ${WORKSPACE}/CCDC-ETL/index.js"
                    }
                }
    }
  }
  post {

	always {

      sendSlackMessage()

    }

	cleanup {
	
	  cleanWs()
    
	}

  }
}