
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			label 'cicd_microservice'
		}
	}
	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'sandbox,dev,test,qa,perf,icdc,prod' )
    extendedChoice( 
        name: 'Region', 
        defaultValue: 'us-east-1', 
        description: 'Choose aws region to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'us-east-1,us-west-1' )
    gitParameter(branchFilter: 'origin/(.*)', 
       defaultValue: 'master', 
       name: 'Backend_Tag', 
       type: 'PT_BRANCH_TAG',
       quickFilterEnabled: false, 
       selectedValue: 'DEFAULT', 
       sortMode: 'ASCENDING_SMART', 
       tagFilter: '*', 
       useRepository: 'https://github.com/CBIIT/CCDI-Portal-Service')
    gitParameter(branchFilter: 'origin/(.*)', 
       defaultValue: 'master', 
       name: 'Frontend_Tag', 
       type: 'PT_BRANCH_TAG',
       quickFilterEnabled: false, 
       selectedValue: 'DEFAULT', 
       sortMode: 'ASCENDING_SMART', 
       tagFilter: '*', 
       useRepository: 'https://github.com/CBIIT/CCDI-Portal-WebPortal')
	booleanParam(
		defaultValue: true,
		description: 'Flush the Redis cache',
		name: 'Flush_Redis')
	booleanParam(
		defaultValue: true,
		description: 'Enable the Redis filter',
		name: 'Enable_Redis_Filter')
	string(
	    defaultValue: 'redis-schema.graphql',
		description: 'The file to use when loading redis schema',
		name: 'Redis_Schema_File')
	string(
	    defaultValue: 'redis-filter-config.bento.yaml',
		description: 'The file to use when loading redis queries',
		name: 'Redis_Queries_File')
	string(
	    defaultValue: 'test-queries.1k.bento.yaml',
		description: 'The file to use when loading test queries',
		name: 'Test_Queries_File')


  }
  options {
  	ansiColor('xterm')
  }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{
  	stage('checkout'){
  		steps {

//			git branch: "${params.Backend_Tag}",
//				url: 'https://github.com/CBIIT/bento-backend'

        checkout([$class: 'GitSCM',
					branches: [[name: "${params.Backend_Tag}"]],
					doGenerateSubmoduleConfigurations: false,
					//extensions: [[$class: 'RelativeTargetDirectory',
					extensions: [], submoduleCfg: [],
					userRemoteConfigs: 
					[[url: 'https://github.com/CBIIT/CCDI-Portal-Service']]])

				
  			//checkout([$class: 'GitSCM', 
  			//	branches: [[name: "${params.Backend_Tag}"]], 
  			//	doGenerateSubmoduleConfigurations: 
  			//	false, extensions: [], submoduleCfg: [], 
  		  //	userRemoteConfigs: 
  			//	[[url: 'https://github.com/CBIIT/CCDI-Portal-Service']]])
  				//[[url: 'https://github.com/CBIIT/bento-backend']]])

//			dir('bento-frontend'){
//				git branch: "${params.Frontend_Tag}",
//				url: 'https://github.com/CBIIT/bento-frontend'
//				}

				checkout([$class: 'GitSCM',
					branches: [[name: "${params.Frontend_Tag}"]],
					doGenerateSubmoduleConfigurations: false,
					extensions: [[$class: 'RelativeTargetDirectory',
					relativeTargetDir: 'CCDI-Portal-WebPortal']],
					submoduleCfg: [],
					userRemoteConfigs: 
					[[url: 'https://github.com/CBIIT/CCDI-Portal-WebPortal']]])

  			checkout( poll: false, 
					changelog:false,
					scm: [$class: 'GitSCM', 
					branches: [[name: '*/master']], 
					doGenerateSubmoduleConfigurations: false, 
					extensions: [[$class: 'DisableRemotePoll'],
					[$class: 'PathRestriction', excludedRegions: '*'], 
					[$class: 'RelativeTargetDirectory', 
					relativeTargetDir: 'icdc-devops']], 
					submoduleCfg: [], 
					userRemoteConfigs: 
					[[url: 'https://github.com/CBIIT/icdc-devops.git']]])

        }
 
  	}
    stage('Set Environment'){
      environment {
        SLACK_URL = "${SLACK_URL}"
        VERSION = "${params.Frontend_Tag}"
      }
        steps {
          script {
			
            switch("${params.Environment}") {
              case "dev":
                withCredentials([string(credentialsId: 'ccdi_dev_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'ccdi_dev_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_CCDI_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
              case "qa":
                withCredentials([string(credentialsId: 'ccdi_qa_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'ccdi_qa_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_CCDI_QA_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "qa"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
              case "perf":
                withCredentials([string(credentialsId: 'ccdi_stage_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'ccdi_stage_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_CCDI_STAGE_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "stage"
                  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
              case "prod":
                withCredentials([string(credentialsId: 'ccdi_prod_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'ccdi_prod_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_CCDI_PROD_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "prod"
				  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
 
              default:
                withCredentials([string(credentialsId: 'ccdi_dev_bearer', variable: 'BEARER'),
				    usernamePassword(credentialsId: 'ccdi_dev_neo4j_user', passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.NEO4J_IP    = "${NEO4J_CCDI_DEV_IP}"
                  env.BEARER = "${BEARER}"
                  env.TIER  = "dev"
				  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
            }
          }
        }
    }

  	stage('build'){
      environment {
       VERSION = "${params.Frontend_Tag}"
       FE_VERSION = "${params.Frontend_Tag}"
       BE_VERSION = "${params.Backend_Tag}"
      }
 		steps {

 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 				withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]){
                  ansiblePlaybook(  			
                    playbook: '${WORKSPACE}/icdc-devops/ansible/build-bento-ccdi.yml', 
            			inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
						extraVars: [
                        redis_schema_file: "${params.Redis_Schema_File}",
						redis_init_queries_file: "${params.Redis_Queries_File}",
                        test_queries_file: "${params.Test_Queries_File}",
                        ],
						colorized: true)
 				}
 			}
 		}
  	}

	// stage('clear redis cache'){
	// 	agent { label 'data-loader' }
	// 	when {
	// 		expression { params.Flush_Redis }
	// 		}
	
 //  		environment {
	// 		TIER = "${params.Environment}"
	// 		}

	// 	steps{
	// 		checkout( changelog:false,
	// 			poll: false,
	// 			scm: [$class: 'GitSCM', 
	// 			branches: [[name: '*/master']], 
	// 			doGenerateSubmoduleConfigurations: false, 
	// 			extensions: [[$class: 'DisableRemotePoll'],
	// 			[$class: 'PathRestriction', excludedRegions: '*'], 
	// 			[$class: 'RelativeTargetDirectory', 
	// 			relativeTargetDir: 'icdc-devops']], 
	// 			submoduleCfg: [], 
	// 			userRemoteConfigs: 
	// 			[[url: 'https://github.com/CBIIT/icdc-devops.git']]
	// 			])
        
	// 		wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
	// 			ansiblePlaybook( 
 //                playbook: '${WORKSPACE}/icdc-devops/ansible/redis.yml', 
 //                inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
 //                colorized: true)
	// 		}
	// 	}
	// }

  	stage('deploy'){

  		agent {
        node {
          label 'bastion-host'
        }
      }
	    environment {
       VERSION = "${params.Frontend_Tag}"
       FE_VERSION = "${params.Frontend_Tag}-${BUILD_NUMBER}"
       BE_VERSION = "${params.Backend_Tag}-${BUILD_NUMBER}"
      }

  		steps{
  		  /**node('cicd_microservice') {
		    checkout( changelog:false,
				poll: false,
				scm: [$class: 'GitSCM', 
				branches: [[name: 'master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
				]) **/
			
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
				withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER'),
       file(credentialsId: 'ccdi_ansible_host_file', variable: 'host_file'),
       ]){
             sh "cp ${host_file} ${WORKSPACE}/ansible/hosts"
  				   ansiblePlaybook( 
            		playbook: '${WORKSPACE}/ansible/deploy-bento-ccdi.yml', 
            		inventory: '${WORKSPACE}/ansible/hosts', 
            		credentialsId: 'server_ssh_key',
            		extraVars: [
                    enable_redis_filter: "${params.Enable_Redis_Filter}",
                    ],
                become: true,
                hostKeyChecking: false,
					      colorized: true)
  			  }
        }
      }
    }

	// stage('update database monitoring agents'){
	// 	steps{
	// 	  node('data-loader') {
	// 	    checkout( changelog:false,
	// 			poll: false,
	// 			scm: [$class: 'GitSCM', 
	// 			branches: [[name: '*/master']], 
	// 			doGenerateSubmoduleConfigurations: false, 
	// 			extensions: [[$class: 'DisableRemotePoll'],
	// 			[$class: 'PathRestriction', excludedRegions: '*'], 
	// 			[$class: 'RelativeTargetDirectory', 
	// 			relativeTargetDir: 'icdc-devops']], 
	// 			submoduleCfg: [], 
	// 			userRemoteConfigs: 
	// 			[[url: 'https://github.com/CBIIT/icdc-devops.git']]
	// 			])
			
	// 	    echo "Recreating inventory file"
	// 		sh "cp ${WORKSPACE}/icdc-devops/ansible/hosts ${WORKSPACE}/icdc-devops/ansible/hosts.bak"
 //            sh "echo [agent_setup] >> ${WORKSPACE}/icdc-devops/ansible/hosts"
 //            sh "echo ${NEO4J_IP} ansible_ssh_private_key_file=/home/bento/.ssh/devops ansible_ssh_user=bento >> ${WORKSPACE}/icdc-devops/ansible/hosts"
 //  			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 //  				ansiblePlaybook( 
 //            		playbook: '${WORKSPACE}/icdc-devops/ansible/agent-setup.yml', 
 //            		inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
	// 				extraVars: [
 //                    env: "${params.Environment}",
	// 				app_type: 'database',
	// 				app_name: 'neo4j',
 //                    project: 'bento',
	// 				log_path: '/var/lib/neo4j/logs/*.log',
 //                    ],
 //            		colorized: true)
 //  			}
 //  		  }
	// 	}
 //  	}

  }
  post {

	always {

      sendSlackMessage()

    }

	success {

		script {
			withCredentials([usernamePassword(credentialsId: 'github_user', passwordVariable: 'git_password', usernameVariable: 'git_user')]) {
				sh label: 'GIT-Tag Backend', script: '''#!/bin/bash
				
				gitURL=$(git config remote.origin.url | sed 's|^.*//||')
				echo "Applying tag $Backend_Tag to URL:  $gitURL"
				git config user.email "jenkins@bento-tools.org"
				git config user.name "Bento Jenkins"
				git tag --no-sign -a ${Backend_Tag}-bento-${BUILD_NUMBER} -m "Jenkins tag: ${Backend_Tag}-${BUILD_NUMBER}"
				git push https://${git_user}:${git_password}@${gitURL} --tags
				
				'''
			
				}
			}
		
		script {
			withCredentials([usernamePassword(credentialsId: 'github_user', passwordVariable: 'git_password', usernameVariable: 'git_user')]) {
				sh label: 'GIT-Tag Frontend', script: '''#!/bin/bash
				
				cd ${WORKSPACE}/bento-frontend
				gitURL=$(git config remote.origin.url | sed 's|^.*//||')
				echo "Applying tag $Frontend_Tag to URL:  $gitURL"
				git config user.email "jenkins@bento-tools.org"
				git config user.name "Bento Jenkins"
				git tag --no-sign -a ${Frontend_Tag}-${BUILD_NUMBER} -m "Jenkins tag: ${Frontend_Tag}-${BUILD_NUMBER}"
				git push https://${git_user}:${git_password}@${gitURL} --tags
				
				'''
			
				}
			}
		
		}

	cleanup {
	
	  cleanWs()
    
	}

  }
}