import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}

pipeline {

  agent {
	node {
      label 'cicd_ansible_3.0'
	}
  }
	
  parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'test', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'test')
    booleanParam(
		defaultValue: false,
		description: 'Reload Elasticsearch data',
		name: 'Reload_ES_Data')
  }
  
  options {
  	ansiColor('xterm')
  }
  
  stages{

  	stage('checkout'){
  		steps {
				
  	    checkout([$class: 'GitSCM', 
  			branches: [[name: "${params.Backend_Tag}"]], 
  			doGenerateSubmoduleConfigurations: 
  			false, extensions: [], submoduleCfg: [], 
  			userRemoteConfigs: 
  			[[url: 'https://github.com/CBIIT/bento-backend']]])

		 checkout([$class: 'GitSCM',
			branches: [[name: "${params.Frontend_Tag}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: 'ctdc-frontend']],
			submoduleCfg: [],
			userRemoteConfigs: 
			[[url: 'https://github.com/CBIIT/bento-ctdc-frontend']]])
        
  		 checkout( poll: false, 
			changelog:false,
			scm: [$class: 'GitSCM', 
			//branches: [[name: '*/master']], 
			branches: [[name: '*/ctdc_troubleshooting']], 
			doGenerateSubmoduleConfigurations: false, 
			extensions: [[$class: 'DisableRemotePoll'],
			[$class: 'PathRestriction', excludedRegions: '*'], 
			[$class: 'RelativeTargetDirectory', 
			relativeTargetDir: 'icdc-devops']], 
			submoduleCfg: [], 
			userRemoteConfigs: 
			[[url: 'https://github.com/CBIIT/icdc-devops.git']]])
        
        }
 
  	}
	
    stage('build'){
		environment {
			FE_VERSION = "${params.Frontend_Tag}"
			BE_VERSION = "${params.Backend_Tag}"
			TIER = "${params.Environment}"
		}
		steps {
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
				ansiblePlaybook(  			
					playbook: '${WORKSPACE}/icdc-devops/ansible/ctdc-build-backend.yml', 
					inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
					extraVars: [
						project_name: "ctdc"
					],
					colorized: true)
			}
		  
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
				ansiblePlaybook(  			
					playbook: '${WORKSPACE}/icdc-devops/ansible/ctdc-build-frontend.yml',
					inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
					extraVars: [
						project_name: "ctdc",
					],
					colorized: true)
			}
		  
        }
  	}
	
	stage('deploy'){
		environment {
			SLACK_URL = "${SLACK_URL}"
			TIER = "${params.Environment}"
			FE_BRANCH = "${params.Frontend_Tag}"
			FE_VERSION = "${params.Frontend_Tag}-${BUILD_NUMBER}"
			BE_VERSION = "${params.Backend_Tag}-${BUILD_NUMBER}"
			SLACK_CHANNEL = "#system-alerts"
			URL_DOMAIN = "bento-tools.org"
		}
  		steps{
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            		playbook: '${WORKSPACE}/icdc-devops/ansible/ctdc-deploy-backend.yml', 
            		inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
					colorized: true)
 			}
			
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            		playbook: '${WORKSPACE}/icdc-devops/ansible/ctdc-deploy-frontend.yml', 
            		inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
					colorized: true)
 			}

		}
 	}
	
  }
  
  post {

    cleanup {
  
      cleanWs()
    
    }
	
  }
  
}