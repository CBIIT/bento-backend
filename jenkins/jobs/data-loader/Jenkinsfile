pipeline {
	agent {
		node {
			label 'slave-ncias-d2320-c'
		}
	}
	parameters {
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Tag', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/icdc-dataloader')
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'demo,dev,qa,stage,prod' )
    string(defaultValue: "", 
        description: 'S3 Folder to load data from', 
        name: 'S3Folder')
    extendedChoice( 
        defaultValue: 'no', 
        name: 'WipeDB', 
        description: 'Choose yes to wipe DB',
        quoteValue: false,
        multiSelectDelimiter: ',',
        value: 'no,yes',
        type: 'PT_RADIO')
    booleanParam(
		defaultValue: true,
		description: 'Flush the Redis cache',
		name: 'Flush_Redis')		
  }
  // options {
  // 	ansiColor('xterm')
  // }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{
  	stage('checkout'){
  		steps {
  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Tag}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
          recursiveSubmodules: true,
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/icdc-dataloader']]])
          sh 'git submodule update --init'
  			dir('icdc-devops'){
  				git branch: 'master',
    				url: 'https://github.com/CBIIT/icdc-devops.git'
  			}
  		}
 
  	}
    stage('set-environment'){
        steps {
          script {
            switch("${params.Environment}") {
              case "demo":
                  env.NEO4J_IP    = "${NEO4J_DEMO_IP}"
                  env.S3_FOLDER   = "${params.S3Folder}"
                  env.TIER        = "${params.Environment}"
                  env.WIPE_DB     = "${params.WipeDB}"
              break
              case "dev":
                  env.NEO4J_IP    = "${NEO4J_DEV_IP}"
                  env.S3_FOLDER   = "${params.S3Folder}"
                  env.TIER        = "${params.Environment}"
                  env.WIPE_DB     = "${params.WipeDB}"
              break
              case "qa":
                  env.NEO4J_IP    = "${NEO4J_QA_IP}"
                  env.S3_FOLDER   = "${params.S3Folder}"
                  env.TIER        = "${params.Environment}"
                  env.WIPE_DB     = "${params.WipeDB}"
              break
              case "stage":
                  env.NEO4J_IP    = "${NEO4J_STAGE_IP}"
                  env.S3_FOLDER   = "${params.S3Folder}"
                  env.TIER        = "${params.Environment}"
                  env.WIPE_DB     = "${params.WipeDB}"
              break
              case "prod":
                  env.NEO4J_IP    = "${NEO4J_PROD_IP}"
                  env.WIPE_DB     = "${params.WipeDB}"
              break
              default:
                println "Select valid option"
              break
              }
          }
        }
    }
  	stage('loader-data'){
 		environment {
 			SLACK_URL = "${SLACK_URL}"
 		}
 		steps {
 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 				withCredentials([usernamePassword(credentialsId: 'neo4j_user', passwordVariable: 'NEO4J_PASSWORD', usernameVariable: 'NEO4J_USER')]) {

 					ansiblePlaybook( 
            			playbook: '${WORKSPACE}/icdc-devops/ansible/data-loader.yml', 
            			inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
            			colorized: true) 
 				}
 			}
 		}
    }
  
  	stage('clear redis cache'){
		agent { label 'commons-docker-ncias-p2236-v' }
		when {
			expression { params.Flush_Redis }
			}
	
  		environment {
			TIER = "${params.Environment}"
			}

		steps{
			checkout( changelog:false,
				poll: false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]
				])
        
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
			
			  script {
                sh label: 'database-hosts', script: '''#!/bin/bash
                  echo "Creating inventory file"
                  echo "[icdc]" > ${WORKSPACE}/icdc-devops/ansible/hosts
                  echo ${NEO4J_IP} >> ${WORKSPACE}/icdc-devops/ansible/hosts

                '''

              }
			
			  ansiblePlaybook( 
                 playbook: '${WORKSPACE}/icdc-devops/ansible/redis_icdc.yml', 
                 inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                 colorized: true)
			}
		}
	}
  
 }
}