
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
	agent {
		node {
			label 'cicd_microservice'
		}
	}
	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'dev' )
  string(
	    defaultValue: 'gmb',
		description: 'Project Name',
		name: 'ProjectName')
	booleanParam(
		defaultValue: true,
		description: 'Use the Redis cache',
		name: 'Use_Redis')
	booleanParam(
		defaultValue: false,
		description: 'Flush the Redis cache',
		name: 'Flush_Redis')
	booleanParam(
		defaultValue: true,
		description: 'Enable the Redis filter',
		name: 'Enable_Redis_Filter')
	string(
	    defaultValue: 'redis-schema.graphql',
		description: 'The file to use when loading redis schema',
		name: 'Redis_Schema_File')
	string(
	    defaultValue: 'redis-filter-config.bento.yaml',
		description: 'The file to use when loading redis queries',
		name: 'Redis_Queries_File')
	string(
	    defaultValue: 'test-queries.1k.bento.yaml',
		description: 'The file to use when loading test queries',
		name: 'Test_Queries_File')
	string(
	    defaultValue: '',
		description: 'The commit id to checkout for the frontend',
		name: 'fe_commit_id')
	string(
	    defaultValue: '',
		description: 'The commit id to checkout for the backend',
		name: 'be_commit_id')

  }
  options {
  	ansiColor('xterm')
  }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages{
  	stage('checkout'){
  		steps {

  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Backend_Tag}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/bento-backend']]])

			checkout([$class: 'GitSCM',
				branches: [[name: "${params.Frontend_Tag}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'gmb-frontend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-gmb-frontend']]])

  			checkout( poll: false, 
				changelog:false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'icdc-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]])

        }
 
  	}
    stage('Set Environment'){
      environment {
        SLACK_URL = "${SLACK_URL}"
        VERSION = "${params.Frontend_Tag}"
      }
        steps {
          script {
            switch("${params.Environment}") {
              case "dev":
                withCredentials([usernamePassword(credentialsId: "${params.ProjectName}_${params.Environment}_neo4j_user", passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.TIER  = "${params.Environment}"
				  env.NEO4J_IP    = "${NEO4J_GMB_IP}"
				  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
			  break
              default:
                withCredentials([usernamePassword(credentialsId: "${params.ProjectName}_${params.Environment}_neo4j_user", passwordVariable: 'NEO4J_PASS', usernameVariable: 'NEO4J_USER')]) {
                  env.TIER  = "${params.Environment}"
				  env.NEO4J_IP    = "${NEO4J_GMB_IP}"
				  env.NEO4J_USER = "${NEO4J_USER}"
                  env.NEO4J_PASS  = "${NEO4J_PASS}"

                }
              break
            }
          }
        }
    }

  	stage('build'){
      environment {
       VERSION = "${params.Frontend_Tag}"
       FE_VERSION = "${params.Frontend_Tag}"
       BE_VERSION = "${params.Backend_Tag}"
      }
 		steps {

 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 				withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]){
                  ansiblePlaybook(  			
                    playbook: '${WORKSPACE}/icdc-devops/ansible/gmb-build.yml', 
            			inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
						extraVars: [
						project: "${params.ProjectName}",
                        redis_schema_file: "${params.Redis_Schema_File}",
						redis_init_queries_file: "${params.Redis_Queries_File}",
                        test_queries_file: "${params.Test_Queries_File}",
						frontend_commit_id: "${params.fe_commit_id}",
						backend_commit_id: "${params.be_commit_id}",
                        ],
						colorized: true)
 				}
 			}
 		}
  	}

  }
  post {
	cleanup {
	
	  cleanWs()
    
	}

  }
}