//load shared library for slack notification
//@Library('shared-library')_

import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "ICDC Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "icdc devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}

pipeline {

  agent {
    node {
      label 'icdc-demo-docker-maven'
    }
  }
  parameters {
    //listGitBranches(branchFilter: '.*', credentialsId: '', defaultValue: 'master', name: 'Tag', quickFilterEnabled: false, remoteURL: 'https://github.com/CBIIT/icdc-codebase', selectedValue: 'DEFAULT', sortMode: 'NONE', tagFilter: '.*', type: 'PT_BRANCH_TAG')
    // gitParameter(branchFilter: '.*', credentialsId: '', defaultValue: 'master', name: 'Tag', quickFilterEnabled: false, remoteURL: 'https://github.com/CBIIT/icdc-codebase', selectedValue: 'DEFAULT', sortMode: 'NONE', tagFilter: '.*', type: 'PT_BRANCH_TAG')
    gitParameter(branchFilter: 'origin/(.*)', 
            defaultValue: 'Develop', 
            name: 'Tag', 
            type: 'PT_BRANCH_TAG',
            quickFilterEnabled: false, 
            selectedValue: 'DEFAULT', 
            sortMode: 'NONE', 
            tagFilter: '*', 
            useRepository: 'https://github.com/CBIIT/icdc-codebase')
    extendedChoice( 
            name: 'Environment', 
            defaultValue: 'dev', 
            description: 'Choose the environment to build', 
            type: 'PT_SINGLE_SELECT',
            value: 'sandbox,dev,qa,stage,prod' )
  }
   // triggers { 
   //   pollSCM('H/15 * * * 1-5') 
   //  }
  options {
    timestamps()
  }
  tools { 
    maven 'Default' 
    jdk 'Default' 
  }
  stages {
    stage('checkout'){
      steps {
        checkout([$class: 'GitSCM', 
          branches: [[name: "${params.Tag}"]], 
          doGenerateSubmoduleConfigurations: 
          false, extensions: [], submoduleCfg: [], 
          userRemoteConfigs: 
          [[url: 'https://github.com/CBIIT/icdc-codebase']]])

        dir('icdc-devops'){
          git branch: 'master',
            url: 'https://github.com/CBIIT/icdc-devops.git'
        }
      }
    }
    stage('Set Environment'){
        environment {
          SANDBOX_URL = "k9dc.essential-dev.com"
          DEV_URL = "caninecommons-dev.cancer.gov"
          QA_URL = "caninecommons-qa.cancer.gov"
          STAGE_URL = "caninecommons-stage.cancer.gov"
          PROD_URL = "caninecommons.cancer.gov" 
          VERSION = "${params.Tag}"
        }
        steps {
          script {
            switch("${params.Environment}") {
              case "demo":
                withCredentials([file(credentialsId: 'demo_env_file', variable: 'secret_file')]) {
                  sh "cp ${secret_file} ${WORKSPACE}/src/main/frontend/.env"
                  sh "cd ${WORKSPACE}/src/main/frontend/ && sed -i 's,tag_version,${VERSION},g' .env"
                  sh "cd ${WORKSPACE}/src/main/resources && sed -i 's,fence.redirect_url=https://localhost/,fence.redirect_url=https://${DEMO_URL}/,g' application_example.properties"
                  env.TOMCAT01_IP = "${TOMCAT01_DEMO_IP}"
                  env.NEO4J_IP    = "${NEO4J_DEMO_IP}"
                }
              break
              default:
                withCredentials([file(credentialsId: 'demo_env_file', variable: 'secret_file')]) {
                  sh "cp ${secret_file} ${WORKSPACE}/src/main/frontend/.env"
                  sh "cd ${WORKSPACE}/src/main/frontend/ && sed -i 's,tag_version,${VERSION},g' .env"
                  sh "cd ${WORKSPACE}/src/main/resources && sed -i 's,fence.redirect_url=https://localhost/,fence.redirect_url=https://${DEMO_URL}/,g' application_example.properties"
                  env.TOMCAT01_IP = "${TOMCAT01_DEMO_IP}"
                  env.NEO4J_IP    = "${NEO4J_DEMO_IP}"
                }
              break
            }
          }
        }
    }
    stage('Build') {
      environment {
        SLACK_URL = "${SLACK_URL}"
      }
      steps {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
        withCredentials([string(credentialsId: 'authorization_bearer', variable: 'BEARER'), 
                usernamePassword(credentialsId: 'neo4j_user', passwordVariable: 'NEO4J_PASSWORD', usernameVariable: 'NEO4J_USER'),
                string(credentialsId: 'fence-id', variable: 'FENCE_ID'),
                string(credentialsId: 'fence-credential', variable: 'FENCE_CREDENTIAL')]) {

          ansiblePlaybook( 
                  playbook: '${WORKSPACE}/icdc-devops/ansible/deploy-icdc.yml', 
                  inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
                  colorized: true) 
        }
      }
    }
    }
    stage('Deploy') {
      when {
        expression {
          currentBuild.result == null || currentBuild.result == 'SUCCESS' 
        }
      }
      steps {
        ansiColor('xterm') {
          withCredentials([sshUserPrivateKey(credentialsId: 'commonsdocker', keyFileVariable: 'deployer_key', passphraseVariable: '', usernameVariable: 'deployer')]) {
sh label: '', script: '''

for server in $TOMCAT01_IP;
do
pushd target
scp -i $deployer_key -o StrictHostKeyChecking=no ROOT.war $deployer@${server}:
popd
ssh -i $deployer_key -T -o StrictHostKeyChecking=no $deployer@${server} << EOF
sudo docker rm -f icdc_demo
cd /local/content/docker
sudo docker pull cbiitssrepo/tomcat9
sudo docker-compose up -d &
wait %1
sleep 20
docker cp ~/ROOT.war icdc_demo:/usr/local/tomcat/webapps
rm -rf ~/ROOT.war
EOF
done'''
          }
        }
      }
    }
   stage('schema'){
    environment {
      NEO4J_IP = "${NEO4J_IP}"
    }
    steps {
      withCredentials([string(credentialsId: 'authorization_bearer', variable: 'BEARER')]){
        sh "curl -X POST http://${NEO4J_IP}:7474/graphql/idl/ -H 'Accept: application/json' -H 'Authorization: ${BEARER}' -d @src/main/resources/graphql/icdc.graphql"
      }
    }
   }
  }
  post {
    always {
      
      sendSlackMessage()
    }
  }
}
