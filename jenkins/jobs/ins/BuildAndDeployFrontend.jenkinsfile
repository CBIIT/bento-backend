
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  beer_image = ":beer:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${beer_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
  agent {
    node {
      label 'cicd_microservice'
    }
  }
  parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'dev,demo' )
    extendedChoice( 
        name: 'Region', 
        defaultValue: 'us-east-1', 
        description: 'Choose aws region to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'us-east-1' )
    gitParameter(branchFilter: 'origin/(.*)', 
       defaultValue: 'main', 
       name: 'Frontend_Tag', 
       type: 'PT_BRANCH_TAG',
       quickFilterEnabled: false, 
       selectedValue: 'DEFAULT', 
       sortMode: 'ASCENDING_SMART', 
       tagFilter: '*', 
       useRepository: 'https://github.com/CBIIT/INS-WebPortal')
    gitParameter(branchFilter: 'origin/(.*)', 
       defaultValue: 'main', 
       name: 'Backend_Tag', 
       type: 'PT_BRANCH_TAG',
       quickFilterEnabled: false, 
       selectedValue: 'DEFAULT', 
       sortMode: 'ASCENDING_SMART', 
       tagFilter: '*', 
       useRepository: 'https://github.com/CBIIT/INS-WebService')
    string(
      defaultValue: 'ins',
      description: 'Project Name',
      name: 'ProjectName')
  }

  options {
    ansiColor('xterm')
  }

  stages{
    stage('checkout'){
      steps {
      checkout([$class: 'GitSCM',
        branches: [[name: "${params.Frontend_Tag}"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[$class: 'RelativeTargetDirectory',
        relativeTargetDir: 'ins-frontend']],
        submoduleCfg: [],
        userRemoteConfigs: 
        [[url: 'https://github.com/CBIIT/INS-WebPortal']]])
        checkout( poll: false, 
        changelog:false,
        scm: [$class: 'GitSCM', 
        branches: [[name: '*/master']], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'DisableRemotePoll'],
        [$class: 'PathRestriction', excludedRegions: '*'], 
        [$class: 'RelativeTargetDirectory', 
        relativeTargetDir: 'icdc-devops']], 
        submoduleCfg: [], 
        userRemoteConfigs: 
        [[url: 'https://github.com/CBIIT/icdc-devops.git']]])

        }
 
    }
    stage('build'){
      environment {
       VERSION = "${params.Frontend_Tag}"
       FE_VERSION = "${params.Frontend_Tag}"
       BE_VERSION = "${params.Backend_Tag}"
      }
    steps {

      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
        withCredentials([usernamePassword(credentialsId: 'docker-login', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]){
                  ansiblePlaybook(        
                    playbook: '${WORKSPACE}/icdc-devops/ansible/ins-build-frontend.yml', 
                  inventory: '${WORKSPACE}/icdc-devops/ansible/hosts', 
            extraVars: [
                project_name: "${params.ProjectName}",
                        ],
            colorized: true)
        }
      }
    }
    }

  	stage('deploy'){
      environment {
        FE_VERSION = "${params.Frontend_Tag}-${BUILD_NUMBER}"
        SLACK_CHANNEL = "#system-alerts"
        URL_DOMAIN = "bento-tools.org"
		TIER = "${params.Environment}"
        BE_VERSION = "${params.Backend_Tag}"
      }
	  steps{
		  wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
  				ansiblePlaybook( 
            playbook: '${WORKSPACE}/icdc-devops/ansible/ins-deploy-frontend.yml',
            inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
            extraVars: [
					       project_name: "${params.ProjectName}",
                        ],
					colorized: true)
  			}

	  }

  }
  }
  post {

  always {

      sendSlackMessage()

    }


  cleanup {
  
    cleanWs()
    
  }

  }
}