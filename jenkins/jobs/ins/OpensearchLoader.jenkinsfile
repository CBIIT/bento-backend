pipeline {
	agent {
		node {
			label 'docker-dataloader'
		}
	}
	parameters {
	extendedChoice(
            name: 'ProjectName',
            defaultValue: 'ins',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'ins' )
	extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod,demo' )
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master',
        name: 'Dataloader_Branch', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/icdc-dataloader')
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Backend_Branch', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/INS-WebService')
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'main',
        name: 'Frontend_Branch', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/INS-WebPortal')
    gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'main',
            name: 'Model_Branch',
            type: 'PT_BRANCH_TAG',
            quickFilterEnabled: false,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: 'https://github.com/CBIIT/INS-ETL')
    }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  stages {
  	stage('checkout'){
  		steps {
  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Dataloader_Branch}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
                recursiveSubmodules: true,
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/icdc-dataloader']]])

			checkout([$class: 'GitSCM',
				branches: [[name: "${params.Frontend_Branch}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'ins-frontend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/INS-WebService']]])
			
			checkout([$class: 'GitSCM',
				branches: [[name: "${params.Backend_Branch}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'ins-backend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/INS-WebPortal']]])
            dir('ins-model'){
                            git branch: "${params.Model_Branch}",
                            url: 'https://github.com/CBIIT/INS-ETL'
                        }
			sh 'git submodule update --init'
  			
			checkout([$class: 'GitSCM',
				branches: [[name: "master"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'icdc-devops']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops']]])



  		}
  	}
  	stage('load-es-data'){
 		environment {
 			SLACK_URL = "${SLACK_URL}"
		    TIER = "${params.Environment}"
			PROJECT_NAME = "${params.ProjectName}"
 		}
 		steps {
 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
			ansiblePlaybook( 
            	playbook: '${WORKSPACE}/icdc-devops/ansible/ins-opensearch-loader.yml',
					inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
                    extraVars: [
                        project_name: "${params.ProjectName}",
                        tier: "${params.Environment}"
                    ],
            		colorized: true) 
 			}
 		}
    }
 }
  post {
    always {
	  cleanWs()
    }
  }
}