pipeline {
    agent {
        node {
            label 'docker-ansible'
            }
        }
	environment { 
        katalonVer = '7.2.6'
		chromedriverVer = '83.0.4103.39'
		geckodriverVer = '0.26.0'
		}
    parameters {

    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Tag', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/DataCommons_Automation')

    string(defaultValue: "Commons_Automation.prj", 
        description: 'Enter the Katalon Project file (include the path relative to the repo root):', 
        name: 'KatalonPrj')

    string(defaultValue: "Test Suites/Canine_TestSuite", 
        description: 'Enter the Katalon Suite Path (not including the test suite file):', 
        name: 'KatalonSuite')

    extendedChoice( 
        name: 'Browser', 
        defaultValue: 'Chrome', 
        description: 'Choose the browser (headless) to use', 
        type: 'PT_SINGLE_SELECT',
        value: 'Chrome,Firefox' )
		
	extendedChoice( 
        name: 'Profile', 
        defaultValue: 'QA_ICDC', 
        description: 'Choose the profile to use', 
        type: 'PT_SINGLE_SELECT',
        value: 'QA_ICDC,QA_CTDC' )

	string(defaultValue: "", 
        description: 'Enter a list of email addresses to notify in case of test failures:', 
        name: 'EmailRecipients')

        }
    // options {
    // 	ansiColor('xterm')
    // }
    tools {
        jdk 'Default' 
        }
    stages{
        stage('checkout'){
            steps {

                checkout([$class: 'GitSCM', 
                    branches: [[name: "${params.Tag}"]], 
                    doGenerateSubmoduleConfigurations: false,
					extensions: [],
					submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'https://github.com/CBIIT/DataCommons_Automation']]])

                dir('icdc-devops'){
                    git branch: 'master',
                    url: 'https://github.com/michael-fleming/DevOps.git'}

                }
            }
		stage('set Profile'){
		    environment {
                KATALON_PRJ         =   "${params.KatalonPrj}"
                }
			steps {
                script {
                    switch("${params.Profile}") {
                    case "QA_ICDC":
						withCredentials([string(credentialsId: 'Box_Email_QA_ICDC', variable: 'box_email')]) {
                            BOX_EMAIL="${box_email}"
                            }
                        withCredentials([file(credentialsId: 'Katalon_QA_ICDC', variable: 'pass_file')]) {
                            sh "cp ${pass_file} ${WORKSPACE}/Profiles/${params.Profile}.glbl"
                            }
                        break
                    case "QA_CTDC":
						withCredentials([string(credentialsId: 'Box_Email_QA_CTDC', variable: 'box_email')]) {
                            BOX_EMAIL="${box_email}"
                            }
                        withCredentials([file(credentialsId: 'Katalon_QA_CTDC', variable: 'pass_file')]) {
                            sh "cp ${pass_file} ${WORKSPACE}/Profiles/${params.Profile}.glbl"
                            }
                        break
                       }
                    }
				}
			}
        stage('set Environment'){
            steps {
			
                script {

						sh "wget https://github.com/katalon-studio/katalon-studio/releases/download/v${env.katalonVer}/Katalon_Studio_Engine_Linux_64-${env.katalonVer}.tar.gz && tar -xvzf Katalon_Studio_Engine_Linux_64-${env.katalonVer}.tar.gz && mv Katalon_Studio_Engine_Linux_64-${env.katalonVer} katalon && chown -R root:root katalon"

				    }

				script {
                    switch("${params.Browser}") {
                    case "Firefox":
						sh "wget https://github.com/mozilla/geckodriver/releases/download/v${env.geckodriverVer}/geckodriver-v${env.geckodriverVer}-linux64.tar.gz && mv katalon/configuration/resources/drivers/firefox_linux64/geckodriver katalon/configuration/resources/drivers/firefox_linux64/geckodriver.bak && tar -C katalon/configuration/resources/drivers/firefox_linux64/ -xzf geckodriver-v${env.geckodriverVer}-linux64.tar.gz && chown root:root katalon/configuration/resources/drivers/firefox_linux64/geckodriver && yum -y install firefox"
						break
                    case "Chrome":
						sh "wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm && yum -y install google-chrome-stable_current_x86_64.rpm && wget https://chromedriver.storage.googleapis.com/${env.chromedriverVer}/chromedriver_linux64.zip && mv katalon/configuration/resources/drivers/chromedriver_linux64/chromedriver katalon/configuration/resources/drivers/chromedriver_linux64/chromedriver.bak && unzip chromedriver_linux64.zip -d katalon/configuration/resources/drivers/chromedriver_linux64/"
						break
                       }
                    }

                }
            }
		stage('run tests'){
            environment {
				KATALON_BROWSER     =   "${params.Browser}"
				KATALON_PROFILE     =   "${params.Profile}"
                KATALON_PRJ         =   "${params.KatalonPrj}"
                KATALON_SUITE_PATH  =   "${params.KatalonSuite}"
                }
            steps {

				script {

					sh label: 'Katalon-Tests', script: '''#!/bin/bash

						# Set datestamp for results file
                        dateStamp=$(date +%Y%m%d%H%M)

                        # Recreate the results directory
                        rm -rf results && mkdir results
						
						# Run Katalon Tests
						katalon/katalonc -noSplash -runMode=console -projectPath="$WORKSPACE/$KATALON_PRJ" -retry=0 -testSuitePath="$KATALON_SUITE_PATH" -executionProfile="$KATALON_PROFILE" -browserType="$KATALON_BROWSER (headless)" -reportFolder="$WORKSPACE/results" -reportFileName="index_$dateStamp" -apiKey="1d9d7e79-dde9-45c1-9d21-b31424a47864"

                        '''

					}

                }
            }
        }
		post {
			always {

				publishHTML([allowMissing: true,
					alwaysLinkToLastBuild: false,
					keepAll: false,
					reportDir: 'results',
					reportFiles: '*.html',
					reportName: 'HTML Report',
					reportTitles: ''])

				emailext(attachmentsPattern: 'results/index_*.html',
                    body: 'Katalon Test Results',
                    subject: 'Katalon Test Results',
                    to: "${BOX_EMAIL}")
				
				}
				
			failure {

				script {
				
				    ERROR_OUTPUT = sh (label: 'Katalon-Results-Parsing', script: '''#!/bin/bash

					inputFile=$(exec find $WORKSPACE/results -type f -name "*.csv")
					testCaseHeader="Test Cases/"

					# function to read output file: index.csv
					parse_results_csv(){
						error_message="The Following Katalon Test Cases Have Failed in the latest run for $Profile: \\n\\n "

						while IFS= read -r line
						do
						  if [[ "$line" =~ .*"FAILED" || "$line" =~ .*"ERROR" ]]
					      then
						    if [[ "$line" == $testCaseHeader* ]]
						    then
						      error_message+="$(echo $line | cut -d ',' -f 1 | cut -d '/' -f2-) \\n "
						    fi
						  fi
						done < "$inputFile"
						}

						# Get test failures
						parse_results_csv
												
						error_message="\'$error_message\'"
						echo $error_message

                        ''',
						returnStdout: true).trim()

                        }
					
					script {

						withCredentials([string(credentialsId: 'Katalon_Slack_URL', variable: 'slack_url')]) {
						
							sh label: 'Katalon-Results-Slack', script: '''#!/bin/bash

							slackHeaders="\'Content-type: application/json\'"

							# POST function to send to Slack
							post_message_to_slack(){
									curlCMD="curl --silent --max-time 10 --request POST --header $slackHeaders --data $payload $slack_url"
									slackError=$(eval $curlCMD)
									echo "Slack Error:   $slackError"
									}

							errorOutput=''' + ERROR_OUTPUT + '''
							resultsFile=$(basename results/*.html)
							errorOutput="$errorOutput \\n\\n The results of this test run can be found in Box:  $resultsFile"
							payload="\'{\\\"text\\\":\\\"$errorOutput\\\"}\'"
							post_message_to_slack

							'''
						
							}
					
						}
					
					script {
						EMAIL_BODY = sh (label: 'Get-Email-Body', script: '''#!/bin/bash

						emailBody=''' + ERROR_OUTPUT + '''
						emailBody="<b> $emailBody"
						emailBody=${emailBody/\\\\n\\\\n/</b><br><br>}
						emailBody=${emailBody//\\\\n/<br>}
						emailBody="$emailBody <br><br><br> The test results from the latest run can be found attached to this message and in Box."
						echo $emailBody

						''',
						returnStdout: true).trim()

						}

					emailext(attachmentsPattern: 'results/index_*.html',
						mimeType: 'text/html',
						body: "${EMAIL_BODY}",
						subject: 'Failed Katalon Tests: results attached',
						to: "${EmailRecipients}")
					
				}

			}
	}