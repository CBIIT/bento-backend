node('docker-ansible') {
	parameters {
		extendedChoice( 
			name: 'Browser', 
			defaultValue: 'Chrome', 
			description: 'Choose the browser (headless) to use', 
			type: 'PT_SINGLE_SELECT',
			value: 'Chrome,Firefox' )
		}
	stage('set agent'){
		if (params.Browser == 'Firefox') {
			AGENT_LABEL = "docker-katalon"
			} else {
				AGENT_LABEL = "docker-ansible"
				}
		}
	}

pipeline {
	agent {
        node {
            label "${AGENT_LABEL}"
            }
        }
	environment { 
        katalonVer = '7.2.6'
		chromedriverVer = '83.0.4103.39'
		geckodriverVer = '0.26.0'
		}
    parameters {

    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Tag', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/DataCommons_Automation')

    string(defaultValue: "Commons_Automation.prj", 
        description: 'Enter the Katalon Project file (include the path relative to the repo root):', 
        name: 'KatalonPrj')

    string(defaultValue: "Test Suites/Canine_TestSuite", 
        description: 'Enter the Katalon Suite Path (not including the test suite file):', 
        name: 'KatalonSuite')

    extendedChoice( 
        name: 'Browser', 
        defaultValue: 'Chrome', 
        description: 'Choose the browser (headless) to use', 
        type: 'PT_SINGLE_SELECT',
        value: 'Chrome,Firefox' )
		
	extendedChoice( 
        name: 'Profile', 
        defaultValue: 'Katalon_Dev_ICDC', 
        description: 'Choose the profile to use', 
        type: 'PT_SINGLE_SELECT',
        value: 'Katalon_Dev_ICDC,Katalon_Dev_CTDC' )

	string(defaultValue: "", 
        description: 'Enter a list of email addresses to notify in case of test failures:', 
        name: 'EmailRecipients')

        }
    // options {
    // 	ansiColor('xterm')
    // }
    tools {
        jdk 'Default' 
        }
    stages{
        stage('checkout'){
            steps {

                checkout([$class: 'GitSCM', 
                    branches: [[name: "${params.Tag}"]], 
                    doGenerateSubmoduleConfigurations: false,
					extensions: [],
					submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'https://github.com/CBIIT/DataCommons_Automation']]])

                dir('icdc-devops'){
                    git branch: 'master',
                    url: 'https://github.com/michael-fleming/DevOps.git'}

                }
            }
		stage('set Profile'){
		    environment {
                KATALON_PRJ         =   "${params.KatalonPrj}"
                }
			steps {
                script {
                    switch("${params.Profile}") {
                    //case "QA_ICDC":
					//	WIKI_PAGE="434110502"
					//	WIKI_NAME="ICDC"
					//	withCredentials([string(credentialsId: 'Box_Email_QA_ICDC', variable: 'box_email')]) {
                    //       BOX_EMAIL="${box_email}"
                    //        }
					//	  withCredentials([string(credentialsId: 'Box_Url_QA_ICDC', variable: 'box_url')]) {
					//	     BOX_URL="${box_url}"
                    //       }
                    //    withCredentials([file(credentialsId: 'Katalon_QA_ICDC', variable: 'pass_file')]) {
                    //        sh "cp ${pass_file} ${WORKSPACE}/Profiles/${params.Profile}.glbl"
                    //        }
                    //    break
                    //case "QA_CTDC":
					//	WIKI_PAGE="434110839"
					//	WIKI_NAME="CTDC"
					//	withCredentials([string(credentialsId: 'Box_Email_QA_CTDC', variable: 'box_email')]) {
                    //        BOX_EMAIL="${box_email}"
                    //        }
					//	  withCredentials([string(credentialsId: 'Box_Url_QA_ICDC', variable: 'box_url')]) {
					//		BOX_URL="${box_url}"
                    //        }
                    //    withCredentials([file(credentialsId: 'Katalon_QA_CTDC', variable: 'pass_file')]) {
                    //        sh "cp ${pass_file} ${WORKSPACE}/Profiles/${params.Profile}.glbl"
                    //        }
                    //    break
					case "Katalon_Dev_ICDC":
					//	withCredentials([string(credentialsId: 'Box_Email_QA_CTDC', variable: 'box_email')]) {
                            BOX_EMAIL="${EmailRecipients}"
                    //        }
                        withCredentials([file(credentialsId: 'Katalon_Dev_ICDC', variable: 'pass_file')]) {
                            sh "cp ${pass_file} ${WORKSPACE}/Profiles/${params.Profile}.glbl"
                            }
                        break
					case "Katalon_Dev_CTDC":
					//	withCredentials([string(credentialsId: 'Box_Email_QA_CTDC', variable: 'box_email')]) {
                            BOX_EMAIL="${EmailRecipients}"
                    //        }
                        withCredentials([file(credentialsId: 'Katalon_Dev_CTDC', variable: 'pass_file')]) {
                            sh "cp ${pass_file} ${WORKSPACE}/Profiles/${params.Profile}.glbl"
                            }
                        break
                       }
                    }
				}
			}
        stage('set Environment'){
            steps {
			
                script {

						sh "wget https://github.com/katalon-studio/katalon-studio/releases/download/v${env.katalonVer}/Katalon_Studio_Engine_Linux_64-${env.katalonVer}.tar.gz && tar -xvzf Katalon_Studio_Engine_Linux_64-${env.katalonVer}.tar.gz && mv Katalon_Studio_Engine_Linux_64-${env.katalonVer} katalon && chown -R root:root katalon"

				    }

				script {
                    switch("${params.Browser}") {
                    case "Firefox":
						sh "wget https://github.com/mozilla/geckodriver/releases/download/v${env.geckodriverVer}/geckodriver-v${env.geckodriverVer}-linux64.tar.gz && mv katalon/configuration/resources/drivers/firefox_linux64/geckodriver katalon/configuration/resources/drivers/firefox_linux64/geckodriver.bak && tar -C katalon/configuration/resources/drivers/firefox_linux64/ -xzf geckodriver-v${env.geckodriverVer}-linux64.tar.gz && chown root:root katalon/configuration/resources/drivers/firefox_linux64/geckodriver && yum -y install firefox"
						break
                    case "Chrome":
						sh "wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm && yum -y install google-chrome-stable_current_x86_64.rpm && wget https://chromedriver.storage.googleapis.com/${env.chromedriverVer}/chromedriver_linux64.zip && mv katalon/configuration/resources/drivers/chromedriver_linux64/chromedriver katalon/configuration/resources/drivers/chromedriver_linux64/chromedriver.bak && unzip chromedriver_linux64.zip -d katalon/configuration/resources/drivers/chromedriver_linux64/"
						break
                       }
                    }

                }
            }
		stage('run tests'){
            environment {
				KATALON_BROWSER     =   "${params.Browser}"
				KATALON_PROFILE     =   "${params.Profile}"
                KATALON_PRJ         =   "${params.KatalonPrj}"
                KATALON_SUITE_PATH  =   "${params.KatalonSuite}"
                }
            steps {

				script {
					withCredentials([string(credentialsId: 'Katalon_API_Key', variable: 'api_key')]) {

						sh label: 'Katalon-Tests', script: '''#!/bin/bash

							# Set datestamp for results file
							dateStamp=$(date +%Y%m%d)
							reportFile="${KATALON_PROFILE}_${dateStamp}_build_${BUILD_NUMBER}"

							# Recreate the results directory
							rm -rf results && mkdir results
							
							# Run Katalon Tests
							katalon/katalonc -noSplash -runMode=console -projectPath="$WORKSPACE/$KATALON_PRJ" -retry=0 -testSuitePath="$KATALON_SUITE_PATH" -executionProfile="$KATALON_PROFILE" -browserType="$KATALON_BROWSER (headless)" -reportFolder="$WORKSPACE/results" -reportFileName="$reportFile" -apiKey="$api_key"

							'''

						}
					}

                }
            }
        }
		post {
			always {

				publishHTML([allowMissing: true,
					alwaysLinkToLastBuild: false,
					keepAll: false,
					reportDir: 'results',
					reportFiles: '*.html',
					reportName: 'HTML Report',
					reportTitles: ''])

				emailext(attachmentsPattern: 'results/*.html',
                    body: 'Katalon Test Results',
                    subject: 'Katalon Test Results',
                    to: "${BOX_EMAIL}")
				
				//script {

				//	withCredentials([usernamePassword(credentialsId: 'Katalon_wiki_results', passwordVariable: 'passwd', usernameVariable: 'user')]) {

				//		sh label: 'Katalon-Results-Confluence', script: '''#!/bin/bash

				//		inputFile=$(exec find $WORKSPACE/results -type f -name "*.xml")
				//		resultsFile=$(basename results/*.html)
				//		pageID=''' + WIKI_PAGE + '''
				//		pageName=''' + WIKI_NAME + '''
				//		pageName="$pageName Automated Test Results"
				//		creds="\'$user:$passwd\'"
						
				//		# get updated page text
				//		totalTestCases="$(grep -c '<testcase' $inputFile)"
				//		passedTestCases="$(grep '<testcase' $inputFile | grep -c 'PASSED')"
				//		failedTestCases="$(grep '<testcase' $inputFile | grep -c 'FAILED')"
				//		errorTestCases="$(grep '<testcase' $inputFile | grep -c 'ERROR')"
				//		pageMessage="<p>Test results from the latest Katalon Test: $resultsFile  (browser tested: $Browser): <br /><br /> Total Tests Cases:     $totalTestCases <br /> Passed Test Cases:     $passedTestCases <br /> Failed Test Cases:     $failedTestCases <br /> Errored Test Cases:    $errorTestCases </p><p><br /></p><p>"
				//		curlCMD="curl -D- -u $creds https://wiki.nci.nih.gov/rest/api/content/$pageID?expand=body.storage | grep -o -P '(?<=<p>).*(?=</p>)' | grep -o -P '(?=<ac).*'"
				//		pageText=$(eval $curlCMD)
				//		pageMessage="$pageMessage $pageText </p>"
						
				//		# get page version
				//		curlCMD="curl -D- -u $creds https://wiki.nci.nih.gov/rest/api/content/$pageID?expand=version.number | grep -oP '(?<=number\\\":).*' | awk -F, '{print \\$1}'"
				//		pageVer=$(eval $curlCMD)
				//		pageVer="$((pageVer+1))"

				//		# update page content
				//		curlCMD="curl -u $creds -X PUT -H 'Content-Type: application/json' -d \'{\\\"id\\\":\\\"$pageID\\\",\\\"type\\\":\\\"page\\\",\\\"title\\\":\\\"$pageName\\\",\\\"body\\\":{\\\"storage\\\":{\\\"value\\\":\\\"$pageMessage\\\",\\\"representation\\\":\\\"storage\\\"}},\\\"version\\\":{\\\"number\\\":$pageVer}}\' https://wiki.nci.nih.gov/rest/api/content/$pageID"
				//		curlError=$(eval $curlCMD)
				//		echo "Confluence Error:   $curlError"
						
				//		# add latest results as attachment
				//		resultsURL="https://wiki.nci.nih.gov/rest/api/content/$pageID/child/attachment"
				//		resultsFile=$(basename results/*.html)
				//		curlCMD="curl -D- -u $creds -X POST -H \\\"X-Atlassian-Token: nocheck\\\" -F \\\"file=@results/$resultsFile\\\" $resultsURL"
				//		curlError=$(eval $curlCMD)
				//		echo "Confluence Error:   $curlError"

				//		'''
						
				//		}
					
				//	}
				
				}
				
			//failure {

			//	script {
			//	
			//	    ERROR_OUTPUT = sh (label: 'Katalon-Results-Parsing', script: '''#!/bin/bash
			//	
			//		inputFile=$(exec find $WORKSPACE/results -type f -name "*.xml")

			//		# Get test stats
			//		totalTestCases="$(grep -c '<testcase' $inputFile)"
			//		passedTestCases="$(grep '<testcase' $inputFile | grep -c 'PASSED')"
			//		failedTestCases="$(grep '<testcase' $inputFile | grep -c 'FAILED')"
			//		errorTestCases="$(grep '<testcase' $inputFile | grep -c 'ERROR')"
				
			//		# function to read output file: JUnit.xml
			//		parse_results_xml(){
			//			error_message="The Following Katalon Test Cases Have Failed in the latest run for $Profile (browser tested: $Browser): \\n\\n Total Tests Cases:     $totalTestCases \\n Passed Test Cases:     $passedTestCases \\n Failed Test Cases:     $failedTestCases \\n Errored Test Cases:    $errorTestCases \\n\\n"

			//			IFS=$'\\n'
			//			for line in $(grep '<testcase' $inputFile)
			//			do
			//			  if [[ "$line" =~ .*"FAILED" || "$line" =~ .*"ERROR" ]]
			//		      then
			//				  error_message+="$(echo $line | cut -d '=' -f 2 | cut -d '"' -f 2) \\n "
			//			  fi
			//			done
			//			}
			//	
			//			# Get test failures
			//			parse_results_xml
			//									
			//			error_message="\'$error_message\'"
			//			echo $error_message
			//	
            //          ''',
			//			returnStdout: true).trim()
				
            //        }
					
			//		script {

			//			withCredentials([string(credentialsId: 'Katalon_Slack_URL', variable: 'slack_url')]) {
						
			//				sh label: 'Katalon-Results-Slack', script: '''#!/bin/bash

			//				slackHeaders="\'Content-type: application/json\'"

			//				# POST function to send to Slack
			//				post_message_to_slack(){
			//						curlCMD="curl --silent --max-time 10 --request POST --header $slackHeaders --data $payload $slack_url"
			//						slackError=$(eval $curlCMD)
			//						echo "Slack Error:   $slackError"
			//						}

			//				errorOutput=''' + ERROR_OUTPUT + '''
			//				boxUrl=''' + BOX_URL + '''
			//				resultsFile=$(basename results/*.html)
			//				errorOutput="$errorOutput \\n\\n @<!channel> The results of this test run can be found in Box:  <$boxUrl|$resultsFile>"
			//				payload="\'{\\\"text\\\":\\\"$errorOutput\\\"}\'"
			//				post_message_to_slack

			//				'''
						
			//				}
					
			//			}
					
			//		script {
			//			EMAIL_BODY = sh (label: 'Get-Email-Body', script: '''#!/bin/bash

			//			emailBody=''' + ERROR_OUTPUT + '''
			//			boxUrl=''' + BOX_URL + '''
			//			resultsFile=$(basename results/*.html)
			//			emailBody="<b> $emailBody"
			//			emailBody=${emailBody/\\\\n\\\\n/</b><br><br>}
			//			emailBody=${emailBody//\\\\n/<br>}
			//			emailBody="$emailBody <br><br><br> The results of this test run can be found in Box:  <a href=\\\"$boxUrl\\\">$resultsFile</a>"
			//			echo $emailBody

			//			''',
			//			returnStdout: true).trim()

			//			}

			//		emailext(attachmentsPattern: 'results/*.html',
			//			mimeType: 'text/html',
			//			body: "${EMAIL_BODY}",
			//			subject: 'Failed Katalon Tests: results attached',
			//			to: "${EmailRecipients}")
					
			//	}

			}
	}