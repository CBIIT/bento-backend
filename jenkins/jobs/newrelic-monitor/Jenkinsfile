
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  slack_image = ":sparkles:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${slack_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
  agent {
    node {
	  label 'cicd_microservice'
	}
  }
  
  parameters {
	string(
	    defaultValue: '',
		description: 'The project to search for',
		name: 'Project')
	string(
	    defaultValue: '',
		description: 'The tier to search for',
		name: 'Tier')
	string(
	    defaultValue: '',
		description: 'The API key to use',
		name: 'API_Key')
  }
  
  options {
  	ansiColor('xterm')
  }

  stages{
    stage('checkout'){
  		steps {

  			checkout( poll: false, 
				changelog:false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/master']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/icdc-devops.git']]])

        }
 
  	}

    stage('set-environment'){
		steps {
          script {
            env.PROJECT = "${params.Project}"
		    env.TIER    = "${params.Tier}"
		    env.API_KEY = "${params.API_Key}"
          }
        }
    }

    stage('Search Newrelic'){
	  steps {
        script {

          sh label: 'Env-Updates', script: '''#!/bin/bash

		  yum -y install python3 curl
		  
		  cd monitoring/newrelic
		  pip3 install -r requirements.txt

          '''
		  
		  sh label: 'Query-Newrelic', script: '''#!/bin/bash

		  echo "Project:  \$PROJECT"
		  echo "Tier:  \$TIER"
		  echo "API_Key:  \$API_KEY"
		  python3 monitoring/newrelic/monitor_query.py -p $PROJECT -t $TIER -k $API_KEY

          '''

          }

      }
	}

  }
  post {

//	always {
//
//      sendSlackMessage()
//
//    }

	cleanup {
	
	  cleanWs()
    
	}

  }
}