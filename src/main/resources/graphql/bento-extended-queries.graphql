type GroupCount {
    group: String
    subjects: Int
}

type SubjectOverview {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    study_short_description: String
    study_info: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    tumor_grade: String
    er_status: String
    pr_status: String
    chemotherapy: String
    endocrine_therapy: String
    menopause_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
    files: [file]
    samples: [String]
    lab_procedures: [String]
}

type SubjectInfo {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    er_status: String
    pr_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
}

type FileInfo {
    subject_id: String
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type FileDetail {
    study_code: String
    subject_id: String
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type ProgramInfo {
    program_acronym: String
    program_id: String
    program_name: String
    start_date: String
    end_date: String
    pubmed_id: String
    num_studies: Int
    num_subjects: Int
}

type StudyInfo {
    study_acronym: String
    study_name: String
    study_full_description: String
    study_type: String
    study_info: String
    num_subjects: Int
}

type ProgramDetail {
    program_acronym: String
    program_id: String
    program_name: String
    program_full_description: String
    institution_name: String
    program_external_url: String
    num_subjects: Int
    num_files: Int
    num_samples: Int
    num_lab_procedures: Int
    disease_subtypes: [String]
    studies: [StudyInfo]
}

type SubjectDetail {
    subject_id: String
    program_acronym: String
    program_id: String
    study_acronym: String
    study_name: String
    gender: String
    race: String
    ethnicity: String
    age_at_index: Int
    menopause_status: String
    vital_status: String
    cause_of_death: String
    disease_type: String
    disease_subtype: String
    tumor_grade: String
    tumor_largest_dimension_diameter: Float
    er_status: String
    pr_status: String
    nuclear_grade: String
    recurrence_score: Int
    primary_surgical_procedure: String
    chemotherapy_regimen_group: String
    chemotherapy_regimen: String
    endocrine_therapy_type: String
    dfs_event_indicator: String
    recurrence_free_indicator: String
    distant_recurrence_indicator: String
    dfs_event_type: String
    first_recurrence_type: String
    days_to_progression: Int
    days_to_recurrence: Int
    test_name: String
    files: [FileInfo]
    samples: [sample]
    num_samples: Int
    num_lab_procedures: Int
}

type ArmInfo {
    arm: String
    size: Int
    caseSize: Int
}

type ProgramArms {
    program: String
    caseSize: Int
    children: [ArmInfo]
}

type ArmDetail {
    study_acronym: String
    study_name: String
    study_type: String
    study_full_description: String
    study_info: String
    num_subjects: Int
    num_files: Int
    num_samples: Int
    num_lab_procedures: Int
    diagnoses: [GroupCount]
    files: [file]
}

type SampleOverview {
    sample_id: String
    subject_id: String
    program: String
    arm: String
    diagnosis: String
    tissue_type: String
    tissue_composition: String
    sample_anatomic_site: String
    sample_procurement_method: String
    platform: String
    files: [String]
}

type FileOverview {
    file_id: String
    file_name: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    program: String
    arm: String
    subject_id: String
    sample_id: String
    diagnosis: String
}

type SearchResult {
    numberOfPrograms: Int
    numberOfStudies: Int
    numberOfSubjects: Int
    numberOfSamples: Int
    numberOfLabProcedures: Int
    numberOfFiles: Int
    subjectIds: [String]
    firstPage: [SubjectOverview]
}

schema {
    query: QueryType
}

type QueryType {
    schemaVersion: String @cypher(statement: "RETURN '0.1.0'")

    "Simple counts"
    numberOfPrograms: Int @cypher(statement: "MATCH (n:program) return count(n)")
    numberOfStudies: Int @cypher(statement: "MATCH (n:study) return count(n)")
    numberOfSubjects: Int @cypher(statement: "MATCH (n:study_subject) return count(n)")
    numberOfSamples: Int @cypher(statement: "MATCH (n:sample) return count(n)")
    numberOfLabProcedures: Int  @cypher(statement: "MATCH (n:laboratory_procedure) return count(n)")
    numberOfFiles: Int @cypher(statement: "MATCH (n:file) return count(n)")

    "Group counts"
    subjectCountByProgram(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:program)
        OPTIONAL MATCH (g)<--(:study)<--(ss:study_subject)
          WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.program_acronym AS group,
               count(DISTINCT ss) as subjects
    """)
    subjectCountByStudy(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:study)
        OPTIONAL MATCH (g)<--(ss:study_subject)
          WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.study_acronym + ': ' + g.study_short_description AS group,
               count(DISTINCT ss) as subjects
    """)

    subjectCountByDiagnoses(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
            WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN ss.disease_subtype AS group, count(DISTINCT ss) as subjects
    """)

    subjectCountByRecurrenceScore(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:stratification_factor)
        OPTIONAL MATCH (g)-->(ss:study_subject)
            WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.grouped_recurrence_score AS group, count(DISTINCT ss) as subjects
    """)

    subjectCountByTumorSize(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
            WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.tumor_size_group AS group, count(DISTINCT ss) as subjects
    """)

    subjectCountByTumorGrade(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
            WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.tumor_grade AS group, count(DISTINCT ss) as subjects
    """)

    subjectCountByErStatus(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.er_status AS group, count(DISTINCT ss) as subjects
    """)

    subjectCountByPrStatus(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:diagnosis)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.pr_status AS group, count(DISTINCT ss) as subjects
    """)

    subjectCountByChemotherapyRegimen(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:therapeutic_procedure)
        OPTIONAL MATCH (g)-->()-->(ss:study_subject)
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.chemotherapy_regimen AS group, count(DISTINCT ss) as subjects
    """)

    subjectCountByEndocrineTherapy(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:therapeutic_procedure)
        OPTIONAL MATCH (g)-->()-->(ss:study_subject)
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.endocrine_therapy_type AS group, count(DISTINCT ss) as subjects
    """)

    subjectCountByMenopauseStatus(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (g:demographic_data)
        OPTIONAL MATCH (g)-->(ss:study_subject)
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN g.menopause_status AS group, count(DISTINCT ss) as subjects
    """)

    subjectCountByTissueType(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (samp:sample)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN samp.tissue_type AS group, COUNT(DISTINCT ss) as subjects
    """)

    subjectCountByTissueComposition(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (samp:sample)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN samp.composition AS group, COUNT(DISTINCT ss) as subjects
    """)

    subjectCountByFileAssociation(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (f:file)-->(parent)
        WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[*..2]->(ss:study_subject)
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN head(labels(parent)) AS group, COUNT(DISTINCT ss) as subjects
    """)

    subjectCountByFileType(subject_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (f:file)
        OPTIONAL MATCH (f)-[*..2]->(ss:study_subject)
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        RETURN f.file_type AS group, COUNT(DISTINCT ss) as subjects
    """)

    armsByPrograms(subject_ids: [String] = []): [ProgramArms] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(ss.study_subject_id) AS all_subjects
        MATCH (p:program)
        OPTIONAL MATCH (p)<-[:study_of_program]-()<-[:study_subject_of_study]-(ss)
          WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        WITH p, COUNT(DISTINCT ss) AS caseSize, all_subjects
        OPTIONAL MATCH (p)<-[:study_of_program]-(s)<-[:study_subject_of_study]-(ss)
          WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        WITH
            p, all_subjects, caseSize,
            {arm: s.study_acronym, caseSize: COUNT(DISTINCT ss), size: COUNT(DISTINCT ss)} AS s
        RETURN  p.program_acronym AS program,
                caseSize,
                collect(s) AS children
    """, passThrough: true)

    subjectOverViewPaged(first: Int = 100, offset: Int = 0, subject_ids: [String] = [], order_by: String = ""): [SubjectOverview] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH ss, COLLECT(ss.study_subject_id) AS all_subjects
          WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            collect(DISTINCT sp.sample_id) AS samples,
            collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures,
            collect(DISTINCT f) AS files,
            ss
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN
            p.program_acronym AS program,
            p.program_id AS program_id,
            s.study_acronym AS study_acronym,
            s.study_short_description AS study_short_description,
            s.study_acronym + ': ' + s.study_short_description AS study_info,
            ss.study_subject_id AS subject_id,
            ss.disease_subtype AS diagnosis,
            sf.grouped_recurrence_score AS recurrence_score,
            d.tumor_size_group AS tumor_size,
            d.tumor_grade AS tumor_grade,
            d.er_status AS er_status,
            d.pr_status AS pr_status,
            tp.chemotherapy_regimen AS chemotherapy,
            tp.endocrine_therapy_type AS endocrine_therapy,
            demo.menopause_status AS menopause_status,
            demo.age_at_index AS age_at_index,
            demo.survival_time AS survival_time,
            demo.survival_time_unit AS survival_time_unit,
            samples,
            files,
            lab_procedures
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'program' THEN program
            WHEN 'program_id' THEN program_id
            WHEN 'study_acronym' THEN study_acronym
            WHEN 'study_short_description' THEN study_short_description
            WHEN 'study_info' THEN study_info
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'recurrence_score' THEN recurrence_score
            WHEN 'tumor_size' THEN tumor_size
            WHEN 'tumor_grade' THEN tumor_grade
            WHEN 'er_status' THEN er_status
            WHEN 'pr_status' THEN pr_status
            WHEN 'chemotherapy' THEN chemotherapy
            WHEN 'endocrine_therapy' THEN endocrine_therapy
            WHEN 'menopause_status' THEN menopause_status
            WHEN 'age_at_index' THEN age_at_index
            WHEN 'survival_time' THEN survival_time
            ELSE subject_id_num END
        SKIP $offset
        LIMIT $first
    """, passThrough: true)

    subjectOverViewPagedDesc(first: Int = 100, offset: Int = 0, subject_ids: [String] = [], order_by: String = ""): [SubjectOverview] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH ss, COLLECT(ss.study_subject_id) AS all_subjects
          WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            collect(DISTINCT sp.sample_id) AS samples,
            collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures,
            collect(DISTINCT f) AS files,
            ss
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN
            p.program_acronym AS program,
            p.program_id AS program_id,
            s.study_acronym AS study_acronym,
            s.study_short_description AS study_short_description,
            s.study_acronym + ': ' + s.study_short_description AS study_info,
            ss.study_subject_id AS subject_id,
            toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            ss.disease_subtype AS diagnosis,
            sf.grouped_recurrence_score AS recurrence_score,
            d.tumor_size_group AS tumor_size,
            d.tumor_grade AS tumor_grade,
            d.er_status AS er_status,
            d.pr_status AS pr_status,
            tp.chemotherapy_regimen AS chemotherapy,
            tp.endocrine_therapy_type AS endocrine_therapy,
            demo.menopause_status AS menopause_status,
            demo.age_at_index AS age_at_index,
            demo.survival_time AS survival_time,
            demo.survival_time_unit AS survival_time_unit,
            samples,
            files,
            lab_procedures
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'program' THEN program
            WHEN 'program_id' THEN program_id
            WHEN 'study_acronym' THEN study_acronym
            WHEN 'study_short_description' THEN study_short_description
            WHEN 'study_info' THEN study_info
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'recurrence_score' THEN recurrence_score
            WHEN 'tumor_size' THEN tumor_size
            WHEN 'tumor_grade' THEN tumor_grade
            WHEN 'er_status' THEN er_status
            WHEN 'pr_status' THEN pr_status
            WHEN 'chemotherapy' THEN chemotherapy
            WHEN 'endocrine_therapy' THEN endocrine_therapy
            WHEN 'menopause_status' THEN menopause_status
            WHEN 'age_at_index' THEN age_at_index
            WHEN 'survival_time' THEN survival_time
            ELSE subject_id_num END DESC
        SKIP $offset
        LIMIT $first
    """, passThrough: true)

    subjectOverView: [SubjectOverview] @cypher(statement: """
        MATCH (ss:study_subject)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH ss, collect(DISTINCT sp.sample_id) AS samples, collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures, collect(DISTINCT f) AS files
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN  p.program_acronym AS program,
                p.program_id AS program_id,
                s.study_acronym AS study_acronym,
                s.study_short_description AS study_short_description,
                s.study_acronym + ': ' + s.study_short_description AS study_info,
                ss.study_subject_id AS subject_id,
                ss.disease_subtype AS diagnosis,
                sf.grouped_recurrence_score AS recurrence_score,
                d.tumor_size_group AS tumor_size,
                d.tumor_grade AS tumor_grade,
                d.er_status AS er_status,
                d.pr_status AS pr_status,
                tp.chemotherapy_regimen AS chemotherapy,
                tp.endocrine_therapy_type AS endocrine_therapy,
                demo.menopause_status AS menopause_status,
                demo.age_at_index AS age_at_index,
                demo.survival_time AS survival_time,
                demo.survival_time_unit AS survival_time_unit,
                samples,
                files,
                lab_procedures
    """, passThrough: true)

    searchSubjects2 (
          programs: [String] = [],
          studies: [String] = [],
          diagnoses: [String] = [],
          rc_scores: [String] = [],
          tumor_sizes: [String] = [],
          chemo_regimen: [String] = [],
          tumor_grades: [String] = [],
          er_status: [String] = [],
          pr_status: [String] = [],
          endo_therapies: [String] = [],
          meno_status: [String] = [],
          tissue_type: [String] = [],
          composition: [String] = [],
          association: [String] = [],
          file_type: [String] = []
    ): [String] @cypher(statement: """
        // Gathering default parameters
        MATCH (g:program)
        WITH COLLECT(DISTINCT g.program_acronym) AS all_programs
        MATCH (g:study)
        WITH COLLECT(DISTINCT g.study_acronym + ': ' + g.study_short_description)  AS all_studies,
             all_programs
        MATCH (g:study_subject)
        WITH COLLECT(DISTINCT g.disease_subtype)  AS all_diagnoses,
            all_programs, all_studies
        MATCH (g:stratification_factor)
        WITH COLLECT(DISTINCT g.grouped_recurrence_score) AS all_rc_scores,
            all_programs, all_studies, all_diagnoses
        MATCH (g:therapeutic_procedure)
        WITH COLLECT(DISTINCT g.chemotherapy_regimen) AS all_chemo_regimen,
             COLLECT(DISTINCT g.endocrine_therapy_type) AS all_endo_therapies,
            all_programs, all_studies, all_diagnoses, all_rc_scores
        MATCH (g:diagnosis)
        WITH COLLECT(DISTINCT g.tumor_size_group) AS all_tumor_sizes,
             COLLECT(DISTINCT g.tumor_grade) AS all_tumor_grades,
             COLLECT(DISTINCT g.er_status) AS all_er_status,
             COLLECT(DISTINCT g.pr_status) AS all_pr_status,
            all_programs, all_studies, all_diagnoses, all_rc_scores, all_chemo_regimen, all_endo_therapies
        MATCH (g:sample)
        WITH COLLECT(DISTINCT g.tissue_type) AS all_tissue_types,
             COLLECT(DISTINCT g.composition) AS all_compositions,
            all_programs, all_studies, all_diagnoses, all_rc_scores, all_chemo_regimen, all_endo_therapies,
            all_tumor_sizes, all_tumor_grades, all_er_status, all_pr_status
        MATCH (g:demographic_data)
        WITH COLLECT(DISTINCT g.menopause_status) AS all_meno_status,
            all_programs, all_studies, all_diagnoses, all_rc_scores, all_chemo_regimen, all_endo_therapies,
            all_tumor_sizes, all_tumor_grades, all_er_status, all_pr_status, all_tissue_types, all_compositions
        MATCH (g:file)-->(parent)
        WITH COLLECT(DISTINCT g.file_type) AS all_file_types,
             COLLECT(DISTINCT head(labels(parent))) AS all_associations,
            all_programs, all_studies, all_diagnoses, all_rc_scores, all_chemo_regimen, all_endo_therapies,
            all_tumor_sizes, all_tumor_grades, all_er_status, all_pr_status, all_tissue_types, all_compositions,
            all_meno_status

    // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE sf.grouped_recurrence_score IN CASE $rc_scores WHEN [] THEN all_rc_scores ELSE $rc_scores END
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE d.tumor_size_group IN CASE $tumor_sizes WHEN [] THEN all_tumor_sizes ELSE $tumor_sizes END
            AND d.tumor_grade IN CASE $tumor_grades WHEN [] THEN all_tumor_grades ELSE $ tumor_grades END
            AND d.er_status IN CASE $er_status WHEN [] THEN all_er_status ELSE $er_status END
            AND d.pr_status IN CASE $pr_status WHEN [] THEN all_pr_status ELSE $pr_status END
            AND tp.chemotherapy_regimen IN CASE $chemo_regimen WHEN [] THEN all_chemo_regimen ELSE $chemo_regimen END
            AND tp.endocrine_therapy_type IN CASE $endo_therapies WHEN [] THEN all_endo_therapies ELSE $endo_therapies END
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE p.program_acronym IN CASE $programs WHEN [] THEN all_programs ELSE $programs END
            AND (s.study_acronym + ': ' + s.study_short_description) IN CASE $studies WHEN [] THEN all_studies ELSE $studies END
            AND ss.disease_subtype IN CASE $diagnoses WHEN [] THEN all_diagnoses ELSE $diagnoses END
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE demo.menopause_status IN CASE $meno_status WHEN [] THEN all_meno_status ELSE $meno_status END
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE samp.tissue_type IN CASE $tissue_type WHEN [] THEN all_tissue_types ELSE $tissue_type END
            AND samp.composition IN CASE $composition WHEN [] THEN all_compositions ELSE $composition END
        MATCH (ss)<-[*..2]-(parent)<--(f)
          WHERE f.file_type IN CASE $file_type WHEN [] THEN all_file_types ELSE $file_type END
            AND head(labels(parent)) IN CASE $association WHEN [] THEN all_associations ELSE $association END
        RETURN DISTINCT ss.study_subject_id
    """)

    searchSubjects (
          programs: [String] = [],
          studies: [String] = [],
          diagnoses: [String] = [],
          rc_scores: [String] = [],
          tumor_sizes: [String] = [],
          chemo_regimen: [String] = [],
          tumor_grades: [String] = [],
          er_status: [String] = [],
          pr_status: [String] = [],
          endo_therapies: [String] = [],
          meno_status: [String] = [],
          tissue_type: [String] = [],
          composition: [String] = [],
          association: [String] = [],
          file_type: [String] = [],
          first: Int = 100
    ): SearchResult @cypher(statement: """
        // Gathering default parameters
        MATCH (g:program)
        WITH COLLECT(DISTINCT g.program_acronym) AS all_programs
        MATCH (g:study)
        WITH COLLECT(DISTINCT g.study_acronym + ': ' + g.study_short_description)  AS all_studies,
             all_programs
        MATCH (g:study_subject)
        WITH COLLECT(DISTINCT g.disease_subtype)  AS all_diagnoses,
            all_programs, all_studies
        MATCH (g:stratification_factor)
        WITH COLLECT(DISTINCT g.grouped_recurrence_score) AS all_rc_scores,
            all_programs, all_studies, all_diagnoses
        MATCH (g:therapeutic_procedure)
        WITH COLLECT(DISTINCT g.chemotherapy_regimen) AS all_chemo_regimen,
             COLLECT(DISTINCT g.endocrine_therapy_type) AS all_endo_therapies,
            all_programs, all_studies, all_diagnoses, all_rc_scores
        MATCH (g:diagnosis)
        WITH COLLECT(DISTINCT g.tumor_size_group) AS all_tumor_sizes,
             COLLECT(DISTINCT g.tumor_grade) AS all_tumor_grades,
             COLLECT(DISTINCT g.er_status) AS all_er_status,
             COLLECT(DISTINCT g.pr_status) AS all_pr_status,
            all_programs, all_studies, all_diagnoses, all_rc_scores, all_chemo_regimen, all_endo_therapies
        MATCH (g:sample)
        WITH COLLECT(DISTINCT g.tissue_type) AS all_tissue_types,
             COLLECT(DISTINCT g.composition) AS all_compositions,
            all_programs, all_studies, all_diagnoses, all_rc_scores, all_chemo_regimen, all_endo_therapies,
            all_tumor_sizes, all_tumor_grades, all_er_status, all_pr_status
        MATCH (g:demographic_data)
        WITH COLLECT(DISTINCT g.menopause_status) AS all_meno_status,
            all_programs, all_studies, all_diagnoses, all_rc_scores, all_chemo_regimen, all_endo_therapies,
            all_tumor_sizes, all_tumor_grades, all_er_status, all_pr_status, all_tissue_types, all_compositions
        MATCH (g:file)-->(parent)
        WITH COLLECT(DISTINCT g.file_type) AS all_file_types,
             COLLECT(DISTINCT head(labels(parent))) AS all_associations,
            all_programs, all_studies, all_diagnoses, all_rc_scores, all_chemo_regimen, all_endo_therapies,
            all_tumor_sizes, all_tumor_grades, all_er_status, all_pr_status, all_tissue_types, all_compositions,
            all_meno_status

    // Filtering subjects
        MATCH (ss)<-[:sf_of_study_subject]-(sf)
          WHERE sf.grouped_recurrence_score IN CASE $rc_scores WHEN [] THEN all_rc_scores ELSE $rc_scores END
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE d.tumor_size_group IN CASE $tumor_sizes WHEN [] THEN all_tumor_sizes ELSE $tumor_sizes END
            AND d.tumor_grade IN CASE $tumor_grades WHEN [] THEN all_tumor_grades ELSE $ tumor_grades END
            AND d.er_status IN CASE $er_status WHEN [] THEN all_er_status ELSE $er_status END
            AND d.pr_status IN CASE $pr_status WHEN [] THEN all_pr_status ELSE $pr_status END
            AND tp.chemotherapy_regimen IN CASE $chemo_regimen WHEN [] THEN all_chemo_regimen ELSE $chemo_regimen END
            AND tp.endocrine_therapy_type IN CASE $endo_therapies WHEN [] THEN all_endo_therapies ELSE $endo_therapies END
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE p.program_acronym IN CASE $programs WHEN [] THEN all_programs ELSE $programs END
            AND (s.study_acronym + ': ' + s.study_short_description) IN CASE $studies WHEN [] THEN all_studies ELSE $studies END
            AND ss.disease_subtype IN CASE $diagnoses WHEN [] THEN all_diagnoses ELSE $diagnoses END
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE demo.menopause_status IN CASE $meno_status WHEN [] THEN all_meno_status ELSE $meno_status END
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE samp.tissue_type IN CASE $tissue_type WHEN [] THEN all_tissue_types ELSE $tissue_type END
            AND samp.composition IN CASE $composition WHEN [] THEN all_compositions ELSE $composition END
        MATCH (ss)<-[*..2]-(parent)<--(f)
          WHERE f.file_type IN CASE $file_type WHEN [] THEN all_file_types ELSE $file_type END
            AND head(labels(parent)) IN CASE $association WHEN [] THEN all_associations ELSE $association END
        WITH ss

        // Preparing return values
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH ss, collect(DISTINCT sp.sample_id) AS samples, collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures, collect(DISTINCT f) AS files
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        WITH    p.program_acronym AS program,
                p.program_id AS program_id,
                s.study_acronym AS study_acronym,
                s.study_short_description AS study_short_description,
                s.study_acronym + ': ' + s.study_short_description AS study_info,
                ss.study_subject_id AS subject_id,
                ss.disease_subtype AS diagnosis,
                sf.grouped_recurrence_score AS recurrence_score,
                d.tumor_size_group AS tumor_size,
                d.tumor_grade AS tumor_grade,
                d.er_status AS er_status,
                d.pr_status AS pr_status,
                tp.chemotherapy_regimen AS chemotherapy,
                tp.endocrine_therapy_type AS endocrine_therapy,
                demo.menopause_status AS menopause_status,
                demo.age_at_index AS age_at_index,
                demo.survival_time AS survival_time,
                demo.survival_time_unit AS survival_time_unit,
                samples,
                files,
                lab_procedures
        UNWIND samples AS sample_id
        UNWIND lab_procedures AS lab_procedure_id
        UNWIND files AS file
        RETURN COLLECT(DISTINCT subject_id) AS subjectIds,
               COUNT(DISTINCT program) AS numberOfPrograms,
               COUNT(DISTINCT study_acronym) AS numberOfStudies,
               COUNT(DISTINCT subject_id) AS numberOfSubjects,
               COUNT(DISTINCT lab_procedure_id) AS numberOfLabProcedures,
               COUNT(DISTINCT sample_id) AS numberOfSamples,
               COUNT(DISTINCT file) AS numberOfFiles,
               COLLECT( DISTINCT({ subject_id: subject_id, program: program, program_id: program_id, study_acronym: study_acronym,
                          study_short_description: study_short_description, study_info: study_info, diagnosis: diagnosis,
                          recurrence_score: recurrence_score, tumor_size: tumor_size, tumor_grade: tumor_grade,
                          er_status: er_status, pr_status: pr_status, chemotherapy: chemotherapy,
                          endocrine_therapy: endocrine_therapy, menopause_status: menopause_status,
                          age_at_index: age_at_index, survival_time: survival_time, survival_time_unit: survival_time_unit,
                          files: files, samples: samples, lab_procedures: lab_procedures}))[0..$first] AS firstPage
    """, passThrough:true)


    subjectsInList(subject_ids: [String]=[]): [SubjectInfo] @cypher(statement: """
        MATCH (ss:study_subject)
          WHERE ss.study_subject_id IN $subject_ids
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:sf_of_study_subject]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        RETURN  p.program_acronym AS program,
                p.program_id AS program_id,
                s.study_acronym AS study_acronym,
                ss.study_subject_id AS subject_id,
                ss.disease_subtype AS diagnosis,
                sf.grouped_recurrence_score AS recurrence_score,
                d.tumor_size_group AS tumor_size,
                d.er_status AS er_status,
                d.pr_status AS pr_status,
                demo.age_at_index AS age_at_index,
                demo.survival_time AS survival_time,
                demo.survival_time_unit AS survival_time_unit
    """)

    filesOfSubjects(subject_ids: [String]=[]): [FileInfo] @cypher(statement:"""
        MATCH (ss:study_subject)
          WHERE ss.study_subject_id IN $subject_ids
        OPTIONAL MATCH (ss)<-[*..2]-(f:file)
        OPTIONAL MATCH (parent)<--(f)
          WHERE NOT (parent:laboratory_procedure)
        RETURN ss.study_subject_id AS subject_id,
               f.file_name AS file_name,
               f.file_type AS file_type,
               head(labels(parent)) AS association,
               f.file_description AS file_description,
               f.file_format AS file_format,
               f.file_size AS file_size,
               f.file_id AS file_id,
               f.md5sum AS md5sum
    """)

    programInfo: [ProgramInfo] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<--(s:study)
        OPTIONAL MATCH (s)<--(ss:study_subject)
        RETURN p.program_acronym AS program_acronym,
               p.program_id AS program_id,
               p.program_name AS program_name,
               p.start_date AS start_date,
               p.end_date AS end_date,
               p.pubmed_id AS pubmed_id,
               COUNT(DISTINCT s) AS num_studies,
               COUNT(DISTINCT ss) AS num_subjects
    """)
    programDetail(program_id: String):  ProgramDetail @cypher(statement: """
        MATCH (p:program {program_id: $program_id})
        OPTIONAL MATCH (p)<-[:study_of_program]-()<-[:study_subject_of_study]-(ss)
        OPTIONAL MATCH (ss)<-[sp:sample_of_study_subject]-()<-[:file_of_sample]-(f)
        WITH p, count(DISTINCT f) AS num_files, count(DISTINCT sp) AS num_samples, count(DISTINCT ss) AS num_subjects, collect(DISTINCT ss.disease_subtype) AS disease_subtypes
        MATCH (p)<-[:study_of_program]-(s)<-[:study_subject_of_study]-(ss)
        WITH s {.study_type, .study_acronym, .study_name, .study_full_description, num_subjects:count(DISTINCT ss),
        study_info: s.study_acronym + ': ' + s.study_short_description} AS study, p, num_files, num_subjects, disease_subtypes, num_samples
        OPTIONAL MATCH (p)-->(ins:institution)
        OPTIONAL MATCH (p)<-[:laboratory_procedure_of_program]-(lp)
        RETURN  p.program_acronym AS program_acronym,
                p.program_id AS program_id,
                p.program_name AS program_name,
                p.program_full_description AS program_full_description,
                ins.institution_name AS institution_name,
                p.program_external_url AS program_external_url,
                num_subjects,
                num_files,
                COUNT (DISTINCT lp) as num_lab_procedures,
                num_samples,
                disease_subtypes,
                collect(DISTINCT study) AS studies
    """, passThrough:true)

    subjectDetail(subject_id: String): SubjectDetail @cypher(statement:  """
        MATCH (ss:study_subject {study_subject_id: $subject_id})
        OPTIONAL MATCH (ss)-->(s:study)
        OPTIONAL MATCH (s)-->(p:program)
        OPTIONAL MATCH (ss)<-[*..2]-(f:file)
        OPTIONAL MATCH (parent)<--(f)
          WHERE NOT (parent:laboratory_procedure)
        WITH p, s, ss, collect(f {subject_id:ss.study_subject_id, .file_name, .file_type,
            association:head(labels(parent)), .file_description, .file_format, .file_size, .file_id, .md5sum}) AS files
        OPTIONAL MATCH (ss)<--(demo:demographic_data)
        OPTIONAL MATCH (ss)<--(diag:diagnosis)
        OPTIONAL MATCH (diag)<--(pr:therapeutic_procedure)
        OPTIONAL MATCH (ss)<--(fu:follow_up)
        OPTIONAL MATCH (ss)<--(samp:sample)
        OPTIONAL MATCH (ss)<--()-->(lp:laboratory_procedure)
        RETURN ss.study_subject_id AS subject_id,
               p.program_acronym AS program_acronym,
               p.program_id AS program_id,
               s.study_acronym AS study_acronym,
               s.study_name AS study_name,
               demo.gender AS gender,
               demo.race AS race,
               demo.ethnicity AS ethnicity,
               demo.age_at_index AS age_at_index,
               demo.menopause_status AS menopause_status,
               demo.vital_status AS vital_status,
               demo.cause_of_death AS cause_of_death,
               ss.disease_type AS disease_type,
               ss.disease_subtype AS disease_subtype,
               diag.tumor_grade AS tumor_grade,
               diag.tumor_largest_dimension_diameter AS tumor_largest_dimension_diameter,
               diag.er_status AS er_status,
               diag.pr_status AS pr_status,
               diag.nuclear_grade AS nuclear_grade,
               diag.recurrence_score AS recurrence_score,
               pr.primary_surgical_procedure AS primary_surgical_procedure,
               pr.chemotherapy_regimen_group AS chemotherapy_regimen_group,
               pr.chemotherapy_regimen AS chemotherapy_regimen,
               pr.endocrine_therapy_type AS endocrine_therapy_type,
               fu.dfs_event_indicator AS dfs_event_indicator,
               fu.recurrence_free_indicator AS recurrence_free_indicator,
               fu.distant_recurrence_indicator AS distant_recurrence_indicator,
               fu.dfs_event_type AS dfs_event_type,
               fu.first_recurrence_type AS first_recurrence_type,
               fu.days_to_progression AS days_to_progression,
               fu.days_to_recurrence AS days_to_recurrence,
               lp.test_name AS test_name,
               files,
               COLLECT(DISTINCT samp) AS samples,
               COUNT(DISTINCT samp) AS num_samples,
               COUNT(DISTINCT lp) AS num_lab_procedures
    """, passThrough: true)

    armDetail(study_acronym: String): ArmDetail @cypher(statement:  """
        MATCH (s:study {study_acronym: $study_acronym})<--(ss:study_subject)
        WITH s, ss.disease_subtype AS group, COUNT(DISTINCT ss) AS subjects
        WITH s, COLLECT ({group: group, subjects:  subjects}) AS diagnoses
        OPTIONAL MATCH (s)<--(f:file)
        WITH s, diagnoses, COLLECT(DISTINCT f) AS files
        OPTIONAL MATCH (s)<-[*..3]-(f:file)-->(lp:laboratory_procedure)
        WITH s, diagnoses, files, COUNT(DISTINCT f) AS num_files, COUNT(DISTINCT lp) AS num_lab_procedures
        OPTIONAL MATCH (s)<--(ss)
        OPTIONAL MATCH (ss)<--(sp:sample)
        RETURN s.study_acronym AS study_acronym,
               s.study_name AS study_name,
               s.study_type AS study_type,
               s.study_full_description AS study_full_description,
               s.study_acronym + ': ' + s.study_short_description AS study_info,
               COUNT(DISTINCT ss) AS num_subjects,
               COUNT(DISTINCT sp) AS num_samples,
               num_lab_procedures,
               num_files,
               diagnoses,
               files
    """, passThrough: true)

    samplesForSubjectId(subject_id: String!): [sample] @cypher(statement: "MATCH (ss:study_subject {study_subject_id: $subject_id})<-[*]-(s:sample) RETURN s")

    filesInList(file_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [FileDetail] @cypher(statement: """
        MATCH (f:file)
        WHERE f.file_id in $file_ids
        OPTIONAL MATCH (f)-->(parent)
        WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[*]->(ss:study_subject)-->(s:study)
        WITH
            toInteger(split(f.file_id,'-')[2]) AS file_id_num,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            f, parent, ss, s
        RETURN
            f.file_name AS file_name,
            f.file_id AS file_id,
            f.file_type AS file_type,
            head(labels(parent)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            f.md5sum AS md5sum,
            ss.study_subject_id AS subject_id,
            s.study_acronym AS study_code
        ORDER BY CASE $order_by
            WHEN 'file_id' THEN file_id_num
            WHEN 'file_name' THEN file_name
            WHEN 'file_type' THEN file_type
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'md5sum' THEN md5sum
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'study_code' THEN study_code
            ELSE file_id_num END
        SKIP $offset
        LIMIT $first
    """)

    filesInListDesc(file_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [FileDetail] @cypher(statement: """
        MATCH (f:file)
        WHERE f.file_id in $file_ids
        OPTIONAL MATCH (f)-->(parent)
        WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[*]->(ss:study_subject)-->(s:study)
        WITH
            toInteger(split(f.file_id,'-')[2]) AS file_id_num,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            f, parent, ss, s
        RETURN
            f.file_name AS file_name,
            f.file_id AS file_id,
            f.file_type AS file_type,
            head(labels(parent)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            f.md5sum AS md5sum,
            ss.study_subject_id AS subject_id,
            s.study_acronym AS study_code
        ORDER BY CASE $order_by
            WHEN 'file_id' THEN file_id_num
            WHEN 'file_name' THEN file_name
            WHEN 'file_type' THEN file_type
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'md5sum' THEN md5sum
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'study_code' THEN study_code
            ELSE file_id_num END DESC
        SKIP $offset
        LIMIT $first
    """)

    sampleOverview(subject_ids: [String] = [], sample_ids: [String]=[], order_by: String = "", first: Int = 100, offset: Int = 0): [SampleOverview] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(DISTINCT ss.study_subject_id) AS all_subjects
        MATCH (samp:sample)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (samp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            distinct lp,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            collect(distinct f.file_id) AS files,
            samp, ss, s, p, all_subjects, COLLECT(DISTINCT samp.sample_id) AS all_sample_ids
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
          AND samp.sample_id IN CASE $sample_ids WHEN [] THEN all_sample_ids ELSE $sample_ids END
        RETURN
            samp.sample_id AS sample_id,
            ss.study_subject_id AS subject_id,
            p.program_acronym AS program,
            s.study_acronym AS arm,
            ss.disease_subtype AS diagnosis,
            samp.tissue_type AS tissue_type,
            samp.composition AS tissue_composition,
            samp.sample_anatomic_site AS sample_anatomic_site,
            samp.method_of_sample_procurement AS sample_procurement_method,
            lp.test_name AS platform,
            files
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'sample_id' THEN sample_id
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'tissue_type' THEN tissue_type
            WHEN 'tissue_composition' THEN tissue_composition
            WHEN 'sample_anatomic_site' THEN sample_anatomic_site
            WHEN 'sample_procurement_method' THEN sample_procurement_method
            WHEN 'platform' THEN platform
            ELSE subject_id_num END
        SKIP $offset
        LIMIT $first
    """)

    sampleOverviewDesc(subject_ids: [String] = [], sample_ids: [String]=[], order_by: String = "", first: Int = 100, offset: Int = 0): [SampleOverview] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(DISTINCT ss.study_subject_id) AS all_subjects
        MATCH (samp:sample)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (samp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            distinct lp,
            toInteger(split(ss.study_subject_id,'-')[2]) AS subject_id_num,
            collect(distinct f.file_id) AS files,
            samp, ss, s, p, all_subjects, COLLECT(DISTINCT samp.sample_id) AS all_sample_ids
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
          AND samp.sample_id IN CASE $sample_ids WHEN [] THEN all_sample_ids ELSE $sample_ids END
        RETURN
            samp.sample_id AS sample_id,
            ss.study_subject_id AS subject_id,
            p.program_acronym AS program,
            s.study_acronym AS arm,
            ss.disease_subtype AS diagnosis,
            samp.tissue_type AS tissue_type,
            samp.composition AS tissue_composition,
            samp.sample_anatomic_site AS sample_anatomic_site,
            samp.method_of_sample_procurement AS sample_procurement_method,
            lp.test_name AS platform,
            files
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'sample_id' THEN sample_id
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'tissue_type' THEN tissue_type
            WHEN 'tissue_composition' THEN tissue_composition
            WHEN 'sample_anatomic_site' THEN sample_anatomic_site
            WHEN 'sample_procurement_method' THEN sample_procurement_method
            WHEN 'platform' THEN platform
            ELSE subject_id_num END DESC
        SKIP $offset
        LIMIT $first
    """)


    fileOverview(subject_ids: [String] = [], file_ids: [String]=[], order_by: String = "", first: Int = 100, offset: Int = 0): [FileOverview] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(DISTINCT ss.study_subject_id) AS all_subjects
        MATCH (f:file)
        OPTIONAL MATCH (f)-->(parent)
        WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[:file_of_sample]->(samp)
        OPTIONAL MATCH (f)-[*..2]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        WITH
            toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            f, ss, p, parent, s, samp, all_subjects, COLLECT(DISTINCT f.file_id) AS all_file_ids
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
          AND f.file_id IN CASE $file_ids WHEN [] THEN all_file_ids ELSE $file_ids END
        RETURN
            f.file_id AS file_id,
            f.file_name AS file_name,
            head(labels(parent)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            p.program_acronym AS program,
            s.study_acronym AS arm,
            ss.study_subject_id AS subject_id,
            samp.sample_id AS sample_id,
            ss.disease_subtype AS diagnosis
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'file_id' THEN file_id
            WHEN 'file_name' THEN file_name
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'sample_id' THEN sample_id
            WHEN 'diagnosis' THEN diagnosis
            ELSE subject_id_num END
        SKIP $offset
        LIMIT $first
    """)

    fileOverviewDesc(subject_ids: [String] = [], file_ids: [String]=[], order_by: String = "", first: Int = 100, offset: Int = 0): [FileOverview] @cypher(statement: """
        MATCH (ss:study_subject)
        WITH COLLECT(DISTINCT ss.study_subject_id) AS all_subjects
        MATCH (f:file)
        OPTIONAL MATCH (f)-->(parent)
        WHERE NOT (parent:laboratory_procedure)
        OPTIONAL MATCH (f)-[:file_of_sample]->(samp)
        OPTIONAL MATCH (f)-[*..2]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        WITH
            toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
            f, ss, p, parent, s, samp, all_subjects, COLLECT(DISTINCT f.file_id) AS all_file_ids
        WHERE ss.study_subject_id IN CASE $subject_ids WHEN [] THEN all_subjects ELSE $subject_ids END
          AND f.file_id IN CASE $file_ids WHEN [] THEN all_file_ids ELSE $file_ids END
        RETURN
            f.file_id AS file_id,
            f.file_name AS file_name,
            head(labels(parent)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            p.program_acronym AS program,
            s.study_acronym AS arm,
            ss.study_subject_id AS subject_id,
            samp.sample_id AS sample_id,
            ss.disease_subtype AS diagnosis
        ORDER BY CASE $order_by
            WHEN 'subject_id' THEN subject_id_num
            WHEN 'file_id' THEN file_id
            WHEN 'file_name' THEN file_name
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'sample_id' THEN sample_id
            WHEN 'diagnosis' THEN diagnosis
            ELSE subject_id_num END DESC
        SKIP $offset
        LIMIT $first
    """)

}
