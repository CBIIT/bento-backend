type aliquot {
  aliquot_id: String
  aliquot_is_ref: String
  status: String
  aliquot_quantity: Float
  aliquot_quantity_unit: String
  aliquot_quantity_original: Float
  aliquot_quantity_original_unit: String
  aliquot_volume: Float
  aliquot_volume_unit: String
  aliquot_volume_original: Float
  aliquot_volume_original_unit: String
  aliquot_concentration: Float
  aliquot_concentration_unit: String
  aliquot_concentration_original: Float
  aliquot_concentration_original_unit: String
  pool: String
  no_matched_normal_low_pass_wgs: Boolean
  no_matched_normal_targeted_sequencing: Boolean
  no_matched_normal_wgs: Boolean
  no_matched_normal_wxs: Boolean
  selected_normal_low_pass_wgs: Boolean
  selected_normal_targeted_sequencing: Boolean
  selected_normal_wgs: Boolean
  selected_normal_wxs: Boolean
  laboratory_procedures: [laboratory_procedure] @relation(name:"aliquot_processed_by", direction:OUT)
  report: report @relation(name:"report_of_aliquot", direction:IN)
  analyte: analyte @relation(name:"aliquot_of_analyte", direction:OUT)
  sample: sample @relation(name:"aliquot_of_sample", direction:OUT)
  files: [file] @relation(name:"file_of_aliquot", direction:IN)
}

type analyte {
  analyte_id: String
  analyte_type_id: String
  analyte_type: String
  analyte_quantity: Float
  analyte_quantity_unit: String
  analyte_quantity_original: Float
  analyte_quantity_original_unit: String
  analyte_volume: Float
  analyte_volume_unit: String
  analyte_volume_original: Float
  analyte_volume_original_unit: String
  analyte_concentration: Float
  analyte_concentration_unit: String
  analyte_concentration_original: Float
  analyte_concentration_original_unit: String
  a260_a280_ratio: Float
  ribosomal_rna_28s_16s_ratio: Float
  spectrophotometer_method: String
  well_number: Int
  normal_tumor_genotype_snp_match: String
  laboratory_procedures: [laboratory_procedure] @relation(name:"analyte_processed_by", direction:OUT)
  aliquots: [aliquot] @relation(name:"aliquot_of_analyte", direction:IN)
  report: report @relation(name:"report_of_analyte", direction:IN)
  fraction: fraction @relation(name:"analyte_of_fraction", direction:OUT)
  sample: sample @relation(name:"analyte_of_sample", direction:OUT)
}

type cross_reference_database {
  cross_reference_database_id: String
  cross_reference_database_name: String
  cross_reference_database_url: String
  study_subjects: [study_subject] @relation(name:"study_subject_cross_referenced_at", direction:IN)
}

type demographic_data {
  demographic_data_id: String
  age_at_index: Int
  cause_of_death: String
  survival_time: Int
  survival_time_unit: String
  survival_time_original: Int
  survival_time_original_unit: String
  days_to_death: Int
  days_to_death_unit: String
  days_to_death_original: Int
  days_to_death_original_unit: String
  ethnicity: String
  race: String
  vital_status: String
  menopause_status: String
  gender: String
  age_is_obfuscated: Boolean
  breed: String
  cause_of_death_source: String
  date_of_birth: String
  days_to_birth: Int
  neutered_indicator: Boolean
  occupation_duration_years: Int
  premature_at_birth: String
  weeks_gestation_at_birth: Float
  height: Float
  height_unit: String
  height_original: Float
  height_original_unit: String
  weight: Float
  weight_unit: String
  weight_original: Float
  weight_original_unit: String
  year_of_birth: Int
  year_of_death: Int
  study_subject: study_subject @relation(name:"demographic_of_study_subject", direction:OUT)
}

type diagnosis {
  diagnosis_id: String
  tumor_grade: String
  tumor_largest_dimension_diameter: Float
  tumor_largest_dimension_diameter_unit: String
  tumor_largest_dimension_diameter_original: Float
  tumor_largest_dimension_diameter_original_unit: String
  er_status: String
  nuclear_grade: String
  pr_status: String
  recurrence_score: Int
  tumor_size_group: String
  age_at_diagnosis: Int
  ajcc_clinical_m: String
  ajcc_clinical_n: String
  ajcc_clinical_stage: String
  ajcc_clinical_t: String
  ajcc_pathologic_m: String
  ajcc_pathologic_n: String
  ajcc_pathologic_stage: String
  ajcc_pathologic_t: String
  ajcc_staging_system_edition: String
  anaplasia_present: String
  anaplasia_present_type: String
  ann_arbor_b_symptoms: String
  ann_arbor_clinical_stage: String
  ann_arbor_extranodal_involvement: String
  ann_arbor_pathologic_stage: String
  best_overall_response: String
  breslow_thickness: Float
  burkitt_lymphoma_clinical_variant: String
  cause_of_death: String
  child_pugh_classification: String
  circumferential_resection_margin: Float
  classification_of_tumor: String
  cog_liver_stage: String
  cog_neuroblastoma_risk_group: String
  cog_renal_stage: String
  cog_rhabdomyosarcoma_risk_group: String
  colon_polyps_history: String
  concurrent_disease: String
  concurrent_disease_type: String
  date_of_diagnosis: String
  date_of_histology_confirmation: String
  days_to_best_overall_response: Int
  days_to_birth: Int
  days_to_death: Int
  days_to_death_unit: String
  days_to_death_original: Int
  days_to_death_original_unit: String
  days_to_diagnosis: Int
  days_to_hiv_diagnosis: String
  days_to_last_follow_up: Float
  days_to_last_known_disease_status: Float
  days_to_new_event: String
  days_to_recurrence: Int
  days_to_recurrence_unit: String
  days_to_recurrence_original: Int
  days_to_recurrence_original_unit: String
  enneking_msts_grade: String
  enneking_msts_metastasis: String
  enneking_msts_stage: String
  enneking_msts_tumor_site: String
  esophageal_columnar_dysplasia_degree: String
  esophageal_columnar_metaplasia_present: String
  figo_stage: String
  first_symptom_prior_to_diagnosis: String
  follow_up_data: String
  gastric_esophageal_junction_involvement: String
  gleason_grade_group: String
  goblet_cells_columnar_mucosa_present: String
  gross_tumor_weight: Float
  gross_tumor_weight_unit: String
  gross_tumor_weight_original: Float
  gross_tumor_weight_original_unit: String
  hiv_positive: String
  hpv_positive_type: String
  hpv_status: String
  icd_10_code: String
  igcccg_stage: String
  inpc_grade: String
  inpc_histologic_group: String
  inrg_stage: String
  inss_stage: String
  international_prognostic_index: String
  irs_group: String
  irs_stage: String
  ishak_fibrosis_score: String
  iss_stage: String
  largest_extrapelvic_peritoneal_focus: String
  last_known_disease_status: String
  laterality: String
  ldh_level_at_diagnosis: String
  ldh_normal_range_upper: String
  lymph_nodes_positive: Int
  lymph_nodes_tested: Int
  lymphatic_invasion_present: String
  masaoka_stage: String
  medulloblastoma_molecular_classification: String
  metastasis_at_diagnosis: String
  metastasis_at_diagnosis_site: String
  method_of_diagnosis: String
  micropapillary_features: String
  mitosis_karyorrhexis_index: String
  mitotic_count: Int
  morphology: String
  new_event_anatomic_site: String
  new_event_type: String
  non_nodal_regional_disease: String
  non_nodal_tumor_deposits: String
  ovarian_specimen_status: String
  ovarian_surface_involvement: String
  overall_survival: String
  pathology_report: String
  percent_tumor_invasion: Float
  perineural_invasion_present: String
  peripancreatic_lymph_nodes_positive: String
  peripancreatic_lymph_nodes_tested: Float
  peritoneal_fluid_cytological_status: String
  primary_diagnosis: String
  primary_gleason_grade: String
  prior_malignancy: String
  prior_treatment: String
  progression_free_survival: String
  progression_free_survival_event: String
  progression_or_recurrence: String
  residual_disease: String
  secondary_gleason_grade: String
  site_of_resection_or_biopsy: String
  supratentorial_localization: String
  synchronous_malignancy: String
  tissue_or_organ_of_origin: String
  treatment_data: String
  tumor_confined_to_organ_of_origin: String
  tumor_focality: String
  tumor_regression_grade: String
  tumor_stage: String
  vascular_invasion_present: String
  vascular_invasion_type: String
  weiss_assessment_score: String
  wilms_tumor_histologic_subtype: String
  year_of_diagnosis: Int
  study_subject: study_subject @relation(name:"diagnosis_of_study_subject", direction:OUT)
  files: [file] @relation(name:"file_of_diagnosis", direction:IN)
  follow_ups: [follow_up] @relation(name:"fu_of_diagnosis", direction:IN)
  therapeutic_procedures: [therapeutic_procedure] @relation(name:"tp_of_diagnosis", direction:IN)
}

type exposure {
  exposure_node_id: String
  alcohol_days_per_week: Float
  alcohol_drinks_per_day: Float
  alcohol_history: String
  alcohol_intensity: String
  asbestos_exposure: String
  bmi: Float
  cigarettes_per_day: Float
  coal_dust_exposure: String
  environmental_tobacco_smoke_exposure: String
  pack_years_smoked: Float
  radon_exposure: String
  respirable_crystalline_silica_exposure: String
  smoking_frequency: String
  time_between_waking_and_first_smoke: String
  tobacco_smoking_onset_year: Int
  tobacco_smoking_quit_year: Int
  tobacco_smoking_status: String
  type_of_smoke_exposure: String
  type_of_tobacco_used: String
  years_smoked: Float
  study_subject: study_subject @relation(name:"exposure_of_study_subject", direction:OUT)
}

type family_medical_history {
  family_history_id: String
  relationship_age_at_diagnosis: Float
  relationship_age_at_diagnosis_unit: String
  relationship_age_at_diagnosis_original: Float
  relationship_age_at_diagnosis_original_unit: String
  relationship_gender: String
  relationship_primary_diagnosis: String
  relationship_type: String
  relative_with_cancer_history: String
  relatives_with_cancer_history_count: Int
  study_subject: study_subject @relation(name:"fmh_of_study_subject", direction:OUT)
}

type file {
  file_id: String
  file_description: String
  file_format: String
  file_location: String
  file_name: String
  file_size: Float
  file_status: String
  file_type: String
  md5sum: String
  diagnosis: diagnosis @relation(name:"file_of_diagnosis", direction:OUT)
  laboratory_procedure: laboratory_procedure @relation(name:"file_of_laboratory_procedure", direction:OUT)
  study_subject: study_subject @relation(name:"file_of_study_subject", direction:OUT)
  program: program @relation(name:"file_of_program", direction:OUT)
  project: project @relation(name:"file_of_project", direction:OUT)
  sample: sample @relation(name:"file_of_sample", direction:OUT)
  study: study @relation(name:"file_of_study", direction:OUT)
  aliquot: aliquot @relation(name:"file_of_aliquot", direction:OUT)
}

type follow_up {
  follow_up_id: String
  days_to_progression: Int
  days_to_progression_unit: String
  days_to_progression_original: Int
  days_to_progression_original_unit: String
  days_to_recurrence: Int
  days_to_recurrence_unit: String
  days_to_recurrence_original: Int
  days_to_recurrence_original_unit: String
  dfs_event_indicator: String
  days_to_distant_recurrence: Int
  days_to_distant_recurrence_unit: String
  days_to_distant_recurrence_original: Int
  days_to_distant_recurrence_original_unit: String
  distant_recurrence_indicator: String
  recurrence_free_indicator: String
  dfs_event_type: String
  first_recurrence_type: String
  adverse_event: String
  barretts_esophagus_goblet_cells_present: String
  bmi: Float
  cause_of_response: String
  comorbidity: String
  comorbidity_method_of_diagnosis: String
  contact_type: String
  date_of_last_contact: String
  days_to_adverse_event: Int
  days_to_comorbidity: Int
  days_to_follow_up: Int
  days_to_progression_free: Int
  diabetes_treatment_type: String
  disease_response: String
  dlco_ref_predictive_percent: Float
  document_number: String
  ecog_performance_status: String
  explain_unknown_status: String
  fev1_fvc_post_bronch_percent: Float
  fev1_fvc_pre_bronch_percent: Float
  fev1_ref_post_bronch_percent: Float
  fev1_ref_pre_bronch_percent: Float
  height: Float
  height_unit: String
  height_original: Float
  height_original_unit: String
  hepatitis_sustained_virological_response: String
  hpv_positive_type: String
  karnofsky_performance_status: String
  menopause_status: String
  pancreatitis_onset_year: Int
  patient_status: String
  physical_exam_changes: String
  physical_exam_performed: Boolean
  progression_or_recurrence: String
  progression_or_recurrence_anatomic_site: String
  progression_or_recurrence_type: String
  reflux_treatment_type: String
  risk_factor: String
  risk_factor_treatment: String
  treatment_since_last_contact: String
  viral_hepatitis_serologies: String
  weight: Float
  weight_unit: String
  weight_original: Float
  weight_original_unit: String
  diagnosis: diagnosis @relation(name:"fu_of_diagnosis", direction:OUT)
  study_subject: study_subject @relation(name:"fu_of_study_subject", direction:OUT)
}

type fraction {
  fraction_id: String
  creation_datetime: Float
  creation_datetime_unit: String
  creation_datetime_original: Float
  creation_datetime_original_unit: String
  fraction_number: Float
  weight: Float
  weight_unit: String
  weight_original: Float
  weight_original_unit: String
  fraction_type: String
  laboratory_procedures: [laboratory_procedure] @relation(name:"fraction_processed_by", direction:OUT)
  analytes: [analyte] @relation(name:"analyte_of_fraction", direction:IN)
  report: report @relation(name:"report_of_fraction", direction:IN)
  sample: sample @relation(name:"fraction_of_sample", direction:OUT)
}

type institution {
  institution_id: String
  institution_name: String
  institution_url: String
  institution_acronymn: String
  programs: [program] @relation(name:"program_of_institution", direction:IN)
}

type laboratory_procedure {
  laboratory_procedure_id: String
  laboratory_procedure_type: String
  laboratory_procedure_target_type: String
  test_name: String
  instrument_name: String
  instrument_model: String
  instrument_version: String
  software_name: String
  software_version: String
  reagent_description: String
  aliquots: [aliquot] @relation(name:"aliquot_processed_by", direction:IN)
  analytes: [analyte] @relation(name:"analyte_processed_by", direction:IN)
  files: [file] @relation(name:"file_of_laboratory_procedure", direction:IN)
  fractions: [fraction] @relation(name:"fraction_processed_by", direction:IN)
  programs: [program] @relation(name:"laboratory_procedure_of_program", direction:OUT)
  report: report @relation(name:"report_of_laboratory_procedure", direction:IN)
  samples: [sample] @relation(name:"sample_processed_by", direction:IN)
}

type program {
  program_id: String
  program_name: String
  program_acronym: String
  program_full_description: String
  program_external_url: String
  program_short_description: String
  date_of_approval: String
  start_date: String
  end_date: String
  embargo_date: String
  index_date: String
  dbgap_accession_number: String
  sponsor: String
  program_sort_order: Int
  state: String
  in_review: Boolean
  is_legacy: Boolean
  pubmed_id: String
  intended_release_date: String
  program_manager: String
  release_requested: Boolean
  released: Boolean
  releasable: Boolean
  request_submission: Boolean
  submission_enabled: Boolean
  institutions: [institution] @relation(name:"program_of_institution", direction:OUT)
  projects: [project] @relation(name:"project_of_program", direction:IN)
  studies: [study] @relation(name:"study_of_program", direction:IN)
  study_subjects: [study_subject] @relation(name:"study_subject_of_program", direction:IN)
  laboratory_procedures: [laboratory_procedure] @relation(name:"laboratory_procedure_of_program", direction:IN)
  files: [file] @relation(name:"file_of_program", direction:IN)
}

type project {
  project_id: String
  project_name: String
  project_acronym: String
  project_full_description: String
  project_external_url: String
  project_short_description: String
  project_type: String
  date_of_approval: String
  start_date: String
  end_date: String
  embargo_date: String
  index_date: String
  dbgap_accession_number: String
  state: String
  intended_release_date: String
  in_review: Boolean
  is_legacy: Boolean
  release_requested: Boolean
  released: Boolean
  releasable: Boolean
  request_submission: Boolean
  submission_enabled: Boolean
  primary_site: String
  project_manager: String
  project_sort_order: Int
  acquisition_type: String
  analytical_fraction: String
  programs: [program] @relation(name:"project_of_program", direction:OUT)
  study_subjects: [study_subject] @relation(name:"study_subject_of_project", direction:IN)
  files: [file] @relation(name:"file_of_project", direction:IN)
}

type report {
  report_id: String
  report_name: String
  report_type: String
  md5sum: String
  report_description: String
  report_format: String
  report_location: String
  report_size: Float
  aliquot: aliquot @relation(name:"report_of_aliquot", direction:OUT)
  analyte: analyte @relation(name:"report_of_analyte", direction:OUT)
  fraction: fraction @relation(name:"report_of_fraction", direction:OUT)
  sample: sample @relation(name:"report_of_sample", direction:OUT)
  laboratory_procedure: laboratory_procedure @relation(name:"report_of_laboratory_procedure", direction:OUT)
}

type sample {
  sample_id: String
  tissue_type: String
  sample_type: String
  composition: String
  method_of_sample_procurement: String
  sample_type_id: String
  total_tissue_area: Float
  passage_count: Int
  sample_anatomic_site: String
  sample_laterality: String
  comment: String
  necropsy_sample: Boolean
  date_of_sample_collection: String
  days_to_collection: Int
  days_to_sample_procurement: Int
  current_weight: Float
  current_weight_unit: String
  current_weight_original: Float
  current_weight_original_unit: String
  initial_weight: Float
  initial_weight_unit: String
  initial_weight_original: Float
  initial_weight_original_unit: String
  longest_dimension: Float
  longest_dimension_unit: String
  longest_dimension_original: Float
  longest_dimension_original_unit: String
  intermediate_dimension: Float
  intermediate_dimension_unit: String
  intermediate_dimension_original: Float
  intermediate_dimension_original_unit: String
  shortest_dimension: Float
  shortest_dimension_unit: String
  shortest_dimension_original: Float
  shortest_dimension_original_unit: String
  growth_rate: Int
  growth_rate_unit: String
  growth_rate_original: Int
  growth_rate_original_unit: String
  analysis_area: Float
  preservation_method: String
  tumor_descriptor: String
  tumor_code: String
  tumor_code_id: String
  diagnosis_pathologically_confirmed: String
  analysis_area_percentage_glass: Float
  analysis_area_percentage_pigmented_tumor: Float
  analysis_area_percentage_stroma: Float
  analysis_area_percentage_tumor: Float
  tumor_tissue_area: Float
  width_of_tumor: Float
  non_tumor_tissue_area: Float
  percentage_stroma: Float
  percentage_tumor: Float
  distance_normal_to_tumor: String
  time_between_clamping_and_freezing: Float
  time_between_clamping_and_freezing_unit: String
  time_between_clamping_and_freezing_original: Float
  time_between_clamping_and_freezing_original_unit: String
  time_between_excision_and_freezing: Float
  time_between_excision_and_freezing_unit: String
  time_between_excision_and_freezing_original: Float
  time_between_excision_and_freezing_original_unit: String
  catalog_reference: String
  distributor_reference: String
  pool: String
  sample_is_ref: String
  fractions: [fraction] @relation(name:"fraction_of_sample", direction:IN)
  analytes: [analyte] @relation(name:"analyte_of_sample", direction:IN)
  report: report @relation(name:"report_of_sample", direction:IN)
  files: [file] @relation(name:"file_of_sample", direction:IN)
  study_subject: study_subject @relation(name:"sample_of_study_subject", direction:OUT)
  laboratory_procedures: [laboratory_procedure] @relation(name:"sample_processed_by", direction:OUT)
  aliquots: [aliquot] @relation(name:"aliquot_of_sample", direction:IN)
}

type stratification_factor {
  stratification_factor_id: String
  grouped_recurrence_score: String
  stratification_code: Int
  menopausal_status_stratification: String
  planned_chemotherapy_stratification: String
  planned_radiotherapy_stratification: String
  tumor_size_stratification: String
  study_subject: study_subject @relation(name:"sf_of_study_subject", direction:OUT)
}

type study {
  study_id: String
  study_name: String
  study_acronym: String
  study_full_description: String
  study_short_description: String
  study_type: String
  study_external_url: String
  date_of_approval: String
  start_date: String
  end_date: String
  embargo_date: String
  index_date: String
  dbgap_accession_number: String
  state: String
  intended_release_date: String
  in_review: Boolean
  is_legacy: Boolean
  release_requested: Boolean
  released: Boolean
  releasable: Boolean
  request_submission: Boolean
  submission_enabled: Boolean
  primary_site: String
  study_manager: String
  study_sort_order: Int
  acquisition_type: String
  analytical_fraction: String
  programs: [program] @relation(name:"study_of_program", direction:OUT)
  study_subjects: [study_subject] @relation(name:"study_subject_of_study", direction:IN)
  files: [file] @relation(name:"file_of_study", direction:IN)
}

type study_subject {
  study_subject_id: String
  study_subject_source_id: String
  consent_type: String
  lost_to_followup: String
  status: String
  disease_type: String
  disease_subtype: String
  taxon: String
  primary_site: String
  in_analysis: Boolean
  case_report_form_submitted: Boolean
  consent_withdrawn: Boolean
  study_subject_first_name: String
  study_subject_is_ref: String
  days_to_consent: Int
  days_to_lost_to_followup: Int
  index_date: String
  pool: String
  cross_reference_databases: [cross_reference_database] @relation(name:"study_subject_cross_referenced_at", direction:OUT)
  demographic_data: demographic_data @relation(name:"demographic_of_study_subject", direction:IN)
  diagnoses: [diagnosis] @relation(name:"diagnosis_of_study_subject", direction:IN)
  exposure: exposure @relation(name:"exposure_of_study_subject", direction:IN)
  files: [file] @relation(name:"file_of_study_subject", direction:IN)
  family_medical_history: family_medical_history @relation(name:"fmh_of_study_subject", direction:IN)
  follow_ups: [follow_up] @relation(name:"fu_of_study_subject", direction:IN)
  programs: [program] @relation(name:"study_subject_of_program", direction:OUT)
  projects: [project] @relation(name:"study_subject_of_project", direction:OUT)
  studies: [study] @relation(name:"study_subject_of_study", direction:OUT)
  samples: [sample] @relation(name:"sample_of_study_subject", direction:IN)
  stratification_factor: stratification_factor @relation(name:"sf_of_study_subject", direction:IN)
}

type therapeutic_procedure {
  therapeutic_procedure_id: String
  days_to_treatment_end: Int
  days_to_treatment_end_unit: String
  days_to_treatment_end_original: Int
  days_to_treatment_end_original_unit: String
  days_to_treatment_start: Int
  days_to_treatment_start_unit: String
  days_to_treatment_start_original: Int
  days_to_treatment_start_original_unit: String
  chemotherapy_regimen: String
  chemotherapy_regimen_group: String
  all_endocrine_therapy_stopped: Boolean
  primary_surgical_procedure: String
  received_chemotherapy: Boolean
  endocrine_therapy_type: String
  initial_disease_status: String
  regimen_or_line_of_therapy: String
  therapeutic_agents: String
  treatment_anatomic_site: String
  treatment_effect: String
  treatment_intent_type: String
  treatment_or_therapy: String
  treatment_outcome: String
  treatment_type: String
  diagnosis: diagnosis @relation(name:"tp_of_diagnosis", direction:OUT)
}

type GroupCount {
  group: String
  subjects: Int
}

type SubjectOverview {
  subject_id: String
  program: String
  program_id: String
  project_acronym: String
  subject_id: String
  tumor_stage: String
  gender: String
  race: String
  ethnicity: String
  vital_status: String
  sample_type: String
  files: [file]
  samples: [String]
  lab_procedures: [String]
}

type SubjectInfo {
  subject_id: String
  program: String
  project_acronym: String
  project_name: String
  gender: String
  race: String
  eithnicity: String
  age_at_index: Int
  tumor_stage: String
  vital_status: String
}

type FileInfo {
  subject_id: String
  file_name: String
  file_type: String
  association: String
  file_description: String
  file_format: String
  file_size: Float
  file_id: String
  md5sum: String
}

type FileDetail {
  project_code: String
  subject_id: String
  file_name: String
  file_type: String
  association: String
  file_description: String
  file_format: String
  file_size: Float
  file_id: String
}

type ProgramInfo {
  program_acronym: String
  program_id: String
  program_name: String
  start_date: String
  end_date: String
  pubmed_id: String
  num_projects: Int
  num_subjects: Int
}

type ProjectInfo {
  project_acronym: String
  project_name: String
  project_full_description: String
  project_type: String
  project_info: String
  num_subjects: Int
}

type ProgramDetail {
  program_acronym: String
  program_id: String
  program_name: String
  program_full_description: String
  institution_name: String
  program_external_url: String
  num_subjects: Int
  num_files: Int
  num_samples: Int
  num_lab_procedures: Int
  projects: [ProjectInfo]
}

type SubjectDetail {
  subject_id: String
  program_acronym: String
  program_id: String
  project_acronym: String
  project_name: String
  gender: String
  race: String
  ethnicity: String
  age_at_index: Int
  vital_status: String
  tumor_stage: String
  files: [FileInfo]
  num_samples: Int
  num_lab_procedures: Int
}

type ArmInfo {
  arm: String
  size: Int
  caseSize: Int
}

type ProgramArms {
  program: String
  caseSize: Int
  children: [ArmInfo]
}

type ArmDetail {
  project_acronym: String
  project_name: String
  project_type: String
  project_full_description: String
  project_info: String
  num_subjects: Int
  num_files: Int
  num_samples: Int
  num_lab_procedures: Int
  files: [file]
}

type SampleOverview {
  sample_id: String
  subject_id: String
  program: String
  arm: String
  tissue_type: String
  tissue_composition: String
  sample_anatomic_site: String
  sample_procurement_method: String
  platform: String
  files: [String]
}

type FileOverview {
  file_id: String
  file_name: String
  association: String
  file_description: String
  file_format: String
  file_size: Float
  program: String
  arm: String
  subject_id: String
  sample_id: String
  diagnosis: String
}

schema {
  query: QueryType
}

type QueryType {
  schemaVersion: String @cypher(statement: "RETURN '0.1.0'")

  "Simple counts"
  numberOfPrograms: Int @cypher(statement: "MATCH (n:program) return count(n)")
  numberOfProjects: Int @cypher(statement: "MATCH (n:project) return count(n)")
  numberOfSubjects: Int @cypher(statement: "MATCH (n:study_subject) return count(n)")
  numberOfSamples: Int @cypher(statement: "MATCH (n:sample) return count(n)")
  numberOfLabProcedures: Int  @cypher(statement: "MATCH (n:laboratory_procedure) return count(n)")
  numberOfFiles: Int @cypher(statement: "MATCH (n:file) return count(n)")

  "Group counts"
  subjectCountByProgram: [GroupCount] @cypher(statement: "MATCH (g:program) OPTIONAL MATCH (g)<--(:project)<--(ss:study_subject) RETURN g.program_acronym AS group, count(DISTINCT ss) as subjects")
  subjectCountByProject: [GroupCount] @cypher(statement: "MATCH (g:project) OPTIONAL MATCH (g)<--(ss:study_subject) RETURN g.project_acronym + ': ' + g.project_short_description AS group, count(DISTINCT ss) as subjects")
  subjectCountByGender: [GroupCount] @cypher(statement: "MATCH (g:demographic_data) OPTIONAL MATCH (g)-->(ss:study_subject) RETURN g.gender AS group, count(DISTINCT ss) as subjects")
  subjectCountByRace: [GroupCount] @cypher(statement: "MATCH (g:demographic_data) OPTIONAL MATCH (g)-->(ss:study_subject) RETURN g.race AS group, count(DISTINCT ss) as subjects")
  subjectCountByEthnicity: [GroupCount] @cypher(statement: "MATCH (g:demographic_data) OPTIONAL MATCH (g)-->(ss:study_subject) RETURN g.ethnicity AS group, count(DISTINCT ss) as subjects")
  subjectCountByVitalStatus: [GroupCount] @cypher(statement: "MATCH (g:demographic_data) OPTIONAL MATCH (g)-->(ss:study_subject) RETURN g.vital_status AS group, count(DISTINCT ss) as subjects")
  subjectCountByTumorStage: [GroupCount] @cypher(statement: "MATCH (g:diagnosis) OPTIONAL MATCH (g)-->(ss:study_subject) RETURN g.tumor_stage AS group, count(DISTINCT ss) as subjects")
  subjectCountBySampletype: [GroupCount] @cypher(statement: "MATCH (g:sample) OPTIONAL MATCH (g)-->(ss:study_subject) RETURN g.sample_type AS group, count(DISTINCT ss) as subjects")



  armsByPrograms: [ProgramArms] @cypher(statement: """
  MATCH (p:program)
  OPTIONAL MATCH (p)<-[:project_of_program]-()<-[:study_subject_of_project]-(ss)
  WITH p, COUNT(DISTINCT ss) AS caseSize
  OPTIONAL MATCH (p)<-[:project_of_program]-(pr)
  OPTIONAL MATCH (pr)<-[:study_subject_of_project]-(ss)
  WITH p, caseSize, {arm: pr.project_acronym, caseSize: COUNT(DISTINCT ss), size: COUNT(DISTINCT ss)} AS pr
  RETURN  p.program_acronym AS program,
  caseSize,
  collect(pr) AS children
  """, passThrough: true)

  subjectOverViewPaged(first: Int=100, offset: Int=0): [SubjectOverview] @cypher(statement: """
  MATCH (ss:study_subject)
  WITH ss ORDER BY ss.study_subject_id
  skip $offset
  limit $first
  OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:aliquot_of_sample]-()<-[:file_of_aliquot]-(f)-[:file_of_laboratory_procedure]->(lp)
  WITH ss, collect(DISTINCT sp.sample_id) AS samples, collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures, collect(DISTINCT f) AS files
  OPTIONAL MATCH (ss)-[:study_subject_of_project]->(pr)-[:project_of_program]->(p)
  OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
  OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)
  OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
  RETURN  p.program_acronym AS program,
  p.program_id AS program_id,
  pr.project_acronym AS project_acronym,
  ss.study_subject_id AS subject_id,
  d.tumor_stage AS tumor_stage,
  demo.gender AS gender,
  demo.race AS race,
  demo.ethnicity AS ethnicity,
  demo.vital_status AS vital_status,
  sp.sample_type AS sample_type,
  samples,
  files,
  lab_procedures
  """, passThrough: true)

  subjectOverView: [SubjectOverview] @cypher(statement: """
  MATCH (ss:study_subject)
  OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)<-[:aliquot_of_sample]-()<-[:file_of_aliquot]-(f)-[:file_of_laboratory_procedure]->(lp)
  WITH ss, collect(DISTINCT sp.sample_id) AS samples, collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures, collect(DISTINCT f) AS files
  OPTIONAL MATCH (ss)-[:study_subject_of_project]->(pr)-[:project_of_program]->(p)
  OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
  OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)
  OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
  RETURN  p.program_acronym AS program,
  p.program_id AS program_id,
  pr.project_acronym AS project_acronym,
  ss.study_subject_id AS subject_id,
  d.tumor_stage AS tumor_stage,
  demo.gender AS gender,
  demo.race AS race,
  demo.ethnicity AS ethnicity,
  demo.vital_status AS vital_status,
  sp.sample_type AS sample_type,
  samples,
  files,
  lab_procedures
  """, passThrough: true)

  subjectsInList(subject_ids: [String]=[]): [SubjectInfo] @cypher(statement: """
  MATCH (ss:study_subject)
  WHERE ss.study_subject_id IN $subject_ids
  OPTIONAL MATCH (ss)-[:study_subject_of_project]->(pr)-[:project_of_program]->(p)
  OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
  OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(diag)
  RETURN  p.program_acronym AS program,
  pr.project_acronym AS project_acronym,
  pr.project_name AS project_name,
  ss.study_subject_id AS subject_id,
  demo.gender AS gender,
  demo.race AS race,
  demo.ethnicity AS ethnicity,
  demo.age_at_index AS age_at_index,
  diag.tumor_stage AS tumor_stage,
  demo.vital_status AS vital_status
  """)

  filesOfSubjects(subject_ids: [String]=[]): [FileInfo] @cypher(statement:"""
  MATCH (f:file)-[*]->(ss:study_subject)
  WHERE ss.study_subject_id IN $subject_ids
  OPTIONAL MATCH (parent)<--(f)
  WHERE NOT (parent:laboratory_procedure)
  RETURN ss.study_subject_id AS subject_id,
  f.file_name AS file_name,
  f.file_type AS file_type,
  head(labels(parent)) AS association,
  f.file_description AS file_description,
  f.file_format AS file_format,
  f.file_size AS file_size,
  f.file_id AS file_id,
  f.md5sum AS md5sum
  """)

  programInfo: [ProgramInfo] @cypher(statement: """
  MATCH (p:program)
  OPTIONAL MATCH (p)<--(pr:project)
  OPTIONAL MATCH (pr)<--(ss:study_subject)
  RETURN p.program_acronym AS program_acronym,
  p.program_id AS program_id,
  p.program_name AS program_name,
  p.start_date AS start_date,
  p.end_date AS end_date,
  p.pubmed_id AS pubmed_id,
  COUNT(DISTINCT pr) AS num_projects,
  COUNT(DISTINCT ss) AS num_subjects
  """)
  programDetail(program_id: String):  ProgramDetail @cypher(statement: """
  MATCH (p:program {program_id: $program_id})
  OPTIONAL MATCH (p)<-[:project_of_program]-()<-[:study_subject_of_project]-(ss)
  OPTIONAL MATCH (ss)<-[sp:sample_of_study_subject]-()<-[:aliquot_of_sample]-()<-[:file_of_aliquot]-(f)
  WITH p, count(DISTINCT f) AS num_files, count(DISTINCT sp) AS num_samples, count(DISTINCT ss) AS num_subjects
  MATCH (p)<-[:project_of_program]-(pr)
  OPTIONAL MATCH (pr)<-[:study_subject_of_project]-(ss)
  WITH pr {.project_type, .project_acronym, .project_name, .project_full_description, num_subjects:count(DISTINCT ss),
  project_info: pr.project_acronym + ': ' + pr.project_short_description} AS project, p, num_files, num_subjects, num_samples
  OPTIONAL MATCH (p)-->(ins:institution)
  OPTIONAL MATCH (p)<-[:laboratory_procedure_of_program]-(lp)
  RETURN  p.program_acronym AS program_acronym,
  p.program_id AS program_id,
  p.program_name AS program_name,
  p.program_full_description AS program_full_description,
  ins.institution_name AS institution_name,
  p.program_external_url AS program_external_url,
  num_subjects,
  num_files,
  COUNT (DISTINCT lp) as num_lab_procedures,
  num_samples,
  collect(DISTINCT project) AS projects
  """, passThrough:true)

  subjectDetail(subject_id: String): SubjectDetail @cypher(statement:  """
  MATCH (ss:study_subject {study_subject_id: $subject_id})
  OPTIONAL MATCH (ss)-[:study_subject_of_project]->(pr)
  OPTIONAL MATCH (pr)-[:project_of_program]->(p)
  OPTIONAL MATCH (ss)<-[*..3]-(f:file)
  OPTIONAL MATCH (parent)<--(f)
  WHERE NOT (parent:laboratory_procedure)
  WITH p, pr, ss, collect(f {subject_id:ss.study_subject_id, .file_name, .file_type,
  association:head(labels(parent)), .file_description, .file_format, .file_size, .file_id, .md5sum}) AS files
  OPTIONAL MATCH (ss)<--(demo:demographic_data)
  OPTIONAL MATCH (ss)<--(diag:diagnosis)
  OPTIONAL MATCH (ss)<--(samp:sample)
  OPTIONAL MATCH (ss)<-[*..3]-(f:file)-->(lp:laboratory_procedure)
  RETURN ss.study_subject_id AS subject_id,
  p.program_acronym AS program_acronym,
  p.program_id AS program_id,
  pr.project_acronym AS project_acronym,
  pr.project_name AS project_name,
  demo.gender AS gender,
  demo.race AS race,
  demo.ethnicity AS ethnicity,
  demo.age_at_index AS age_at_index,
  demo.vital_status AS vital_status,
  diag.tumor_stage AS tumor_stage,
  files,
  COUNT(DISTINCT samp) AS num_samples,
  COUNT(DISTINCT lp) AS num_lab_procedures
  """, passThrough: true)

  armDetail(project_acronym: String): ArmDetail @cypher(statement:  """
  MATCH (pr:project {project_acronym: $project_acronym})<--(ss:study_subject)
  OPTIONAL MATCH (pr)<--(f:file)
  WITH pr, COLLECT(DISTINCT f) AS files
  OPTIONAL MATCH (pr)<-[*..4]-(f:file)-->(lp:laboratory_procedure)
  WITH pr, files, COUNT(DISTINCT f) AS num_files, COUNT(DISTINCT lp) AS num_lab_procedures
  OPTIONAL MATCH (pr)<--(ss)
  OPTIONAL MATCH (ss)<--(sp:sample)
  RETURN pr.project_acronym AS project_acronym,
  pr.project_name AS project_name,
  pr.project_type AS project_type,
  pr.project_full_description AS project_full_description,
  pr.project_acronym + ': ' + pr.project_short_description AS project_info,
  COUNT(DISTINCT ss) AS num_subjects,
  COUNT(DISTINCT sp) AS num_samples,
  num_lab_procedures,
  num_files,
  files
  """, passThrough: true)

  samplesForSubjectId(subject_id: String!): [sample] @cypher(statement: "MATCH (ss:study_subject {study_subject_id: $subject_id})<-[*]-(s:sample) RETURN s")

  filesInList(file_ids: [String]): [FileDetail] @cypher(statement: """
  MATCH (f:file)
  WHERE f.file_id in $file_ids
  OPTIONAL MATCH (f)-->(parent)
  WHERE NOT (parent:laboratory_procedure)
  OPTIONAL MATCH (f)-[*]->(ss:study_subject)-->(pr:project)
  RETURN f.file_name AS file_name,
  f.file_id AS file_id,
  f.file_type AS file_type,
  head(labels(parent)) AS association,
  f.file_description AS file_description,
  f.file_format AS file_format,
  f.file_size AS file_size,
  ss.study_subject_id AS subject_id,
  pr.project_acronym AS project_code
  """)

  sampleOverview: [SampleOverview] @cypher(statement: """
  MATCH (samp:sample)
  OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)
  OPTIONAL MATCH (ss)-[:study_subject_of_project]->(pr)-[:project_of_program]->(p)
  OPTIONAL MATCH (samp)<-[:aliquot_of_sample]-()<-[:file_of_aliquot]-(f)-[:file_of_laboratory_procedure]->(lp)
  WITH distinct lp, collect(distinct f.file_id) AS files, samp, ss, pr, p
  RETURN samp.sample_id AS sample_id,
  ss.study_subject_id AS subject_id,
  p.program_acronym AS program,
  pr.project_acronym AS arm,
  samp.tissue_type AS tissue_type,
  samp.composition AS tissue_composition,
  samp.sample_anatomic_site AS sample_anatomic_site,
  samp.method_of_sample_procurement AS sample_procurement_method,
  lp.test_name AS platform,
  files
  """)

  fileOverview: [FileOverview] @cypher(statement: """
  MATCH (f:file)
  OPTIONAL MATCH (f)-->(parent)
  WHERE NOT (parent:laboratory_procedure)
  OPTIONAL MATCH (f)-[:file_of_sample]->(samp)
  OPTIONAL MATCH (f)-[*..2]->(ss)-[:study_subject_of_project]->(pr)-[:project_of_program]->(p)
  RETURN f.file_id AS file_id,
  f.file_name AS file_name,
  head(labels(parent)) AS association,
  f.file_description AS file_description,
  f.file_format AS file_format,
  f.file_size AS file_size,
  p.program_acronym AS program,
  pr.project_acronym AS arm,
  ss.study_subject_id AS subject_id,
  samp.sample_id AS sample_id,
  ss.disease_subtype AS diagnosis
  """)

}
