type aliquot {
  aliquot_id: String
  aliquot_is_ref: String
  status: String
  aliquot_quantity: Float
  aliquot_quantity_unit: String
  aliquot_quantity_original: Float
  aliquot_quantity_original_unit: String
  aliquot_volume: Float
  aliquot_volume_unit: String
  aliquot_volume_original: Float
  aliquot_volume_original_unit: String
  aliquot_concentration: Float
  aliquot_concentration_unit: String
  aliquot_concentration_original: Float
  aliquot_concentration_original_unit: String
  pool: String
  no_matched_normal_low_pass_wgs: Boolean
  no_matched_normal_targeted_sequencing: Boolean
  no_matched_normal_wgs: Boolean
  no_matched_normal_wxs: Boolean
  selected_normal_low_pass_wgs: Boolean
  selected_normal_targeted_sequencing: Boolean
  selected_normal_wgs: Boolean
  selected_normal_wxs: Boolean
  laboratory_procedures: [laboratory_procedure] @relation(name:"aliquot_processed_by", direction:OUT)
  report: report @relation(name:"report_of_aliquot", direction:IN)
  analyte: analyte @relation(name:"aliquot_of_analyte", direction:OUT)
  sample: sample @relation(name:"aliquot_of_sample", direction:OUT)
  files: [file] @relation(name:"file_of_aliquot", direction:IN)
}

type analyte {
  analyte_id: String
  analyte_type_id: String
  analyte_type: String
  analyte_quantity: Float
  analyte_quantity_unit: String
  analyte_quantity_original: Float
  analyte_quantity_original_unit: String
  analyte_volume: Float
  analyte_volume_unit: String
  analyte_volume_original: Float
  analyte_volume_original_unit: String
  analyte_concentration: Float
  analyte_concentration_unit: String
  analyte_concentration_original: Float
  analyte_concentration_original_unit: String
  a260_a280_ratio: Float
  ribosomal_rna_28s_16s_ratio: Float
  spectrophotometer_method: String
  well_number: Int
  normal_tumor_genotype_snp_match: String
  laboratory_procedures: [laboratory_procedure] @relation(name:"analyte_processed_by", direction:OUT)
  aliquots: [aliquot] @relation(name:"aliquot_of_analyte", direction:IN)
  report: report @relation(name:"report_of_analyte", direction:IN)
  fraction: fraction @relation(name:"analyte_of_fraction", direction:OUT)
  sample: sample @relation(name:"analyte_of_sample", direction:OUT)
}

type cross_reference_database {
  cross_reference_database_id: String
  cross_reference_database_name: String
  cross_reference_database_url: String
  study_subjects: [study_subject] @relation(name:"study_subject_cross_referenced_at", direction:IN)
}

type demographic_data {
  demographic_data_id: String
  age_at_index: Int
  cause_of_death: String
  survival_time: Int
  survival_time_unit: String
  survival_time_original: Int
  survival_time_original_unit: String
  days_to_death: Int
  days_to_death_unit: String
  days_to_death_original: Int
  days_to_death_original_unit: String
  ethnicity: String
  race: String
  vital_status: String
  menopause_status: String
  gender: String
  age_is_obfuscated: Boolean
  breed: String
  cause_of_death_source: String
  date_of_birth: String
  days_to_birth: Int
  neutered_indicator: Boolean
  occupation_duration_years: Int
  premature_at_birth: String
  weeks_gestation_at_birth: Float
  height: Float
  height_unit: String
  height_original: Float
  height_original_unit: String
  weight: Float
  weight_unit: String
  weight_original: Float
  weight_original_unit: String
  year_of_birth: Int
  year_of_death: Int
  study_subject: study_subject @relation(name:"demographic_of_study_subject", direction:OUT)
}

type diagnosis {
  diagnosis_id: String
  tumor_grade: String
  tumor_largest_dimension_diameter: Float
  tumor_largest_dimension_diameter_unit: String
  tumor_largest_dimension_diameter_original: Float
  tumor_largest_dimension_diameter_original_unit: String
  er_status: String
  nuclear_grade: String
  pr_status: String
  recurrence_score: Int
  tumor_size_group: String
  age_at_diagnosis: Int
  ajcc_clinical_m: String
  ajcc_clinical_n: String
  ajcc_clinical_stage: String
  ajcc_clinical_t: String
  ajcc_pathologic_m: String
  ajcc_pathologic_n: String
  ajcc_pathologic_stage: String
  ajcc_pathologic_t: String
  ajcc_staging_system_edition: String
  anaplasia_present: String
  anaplasia_present_type: String
  ann_arbor_b_symptoms: String
  ann_arbor_clinical_stage: String
  ann_arbor_extranodal_involvement: String
  ann_arbor_pathologic_stage: String
  best_overall_response: String
  breslow_thickness: Float
  burkitt_lymphoma_clinical_variant: String
  cause_of_death: String
  child_pugh_classification: String
  circumferential_resection_margin: Float
  classification_of_tumor: String
  cog_liver_stage: String
  cog_neuroblastoma_risk_group: String
  cog_renal_stage: String
  cog_rhabdomyosarcoma_risk_group: String
  colon_polyps_history: String
  concurrent_disease: String
  concurrent_disease_type: String
  date_of_diagnosis: String
  date_of_histology_confirmation: String
  days_to_best_overall_response: Int
  days_to_birth: Int
  days_to_death: Int
  days_to_death_unit: String
  days_to_death_original: Int
  days_to_death_original_unit: String
  days_to_diagnosis: Int
  days_to_hiv_diagnosis: String
  days_to_last_follow_up: Float
  days_to_last_known_disease_status: Float
  days_to_new_event: String
  days_to_recurrence: Int
  days_to_recurrence_unit: String
  days_to_recurrence_original: Int
  days_to_recurrence_original_unit: String
  enneking_msts_grade: String
  enneking_msts_metastasis: String
  enneking_msts_stage: String
  enneking_msts_tumor_site: String
  esophageal_columnar_dysplasia_degree: String
  esophageal_columnar_metaplasia_present: String
  figo_stage: String
  first_symptom_prior_to_diagnosis: String
  follow_up_data: String
  gastric_esophageal_junction_involvement: String
  gleason_grade_group: String
  goblet_cells_columnar_mucosa_present: String
  gross_tumor_weight: Float
  gross_tumor_weight_unit: String
  gross_tumor_weight_original: Float
  gross_tumor_weight_original_unit: String
  hiv_positive: String
  hpv_positive_type: String
  hpv_status: String
  icd_10_code: String
  igcccg_stage: String
  inpc_grade: String
  inpc_histologic_group: String
  inrg_stage: String
  inss_stage: String
  international_prognostic_index: String
  irs_group: String
  irs_stage: String
  ishak_fibrosis_score: String
  iss_stage: String
  largest_extrapelvic_peritoneal_focus: String
  last_known_disease_status: String
  laterality: String
  ldh_level_at_diagnosis: String
  ldh_normal_range_upper: String
  lymph_nodes_positive: Int
  lymph_nodes_tested: Int
  lymphatic_invasion_present: String
  masaoka_stage: String
  medulloblastoma_molecular_classification: String
  metastasis_at_diagnosis: String
  metastasis_at_diagnosis_site: String
  method_of_diagnosis: String
  micropapillary_features: String
  mitosis_karyorrhexis_index: String
  mitotic_count: Int
  morphology: String
  new_event_anatomic_site: String
  new_event_type: String
  non_nodal_regional_disease: String
  non_nodal_tumor_deposits: String
  ovarian_specimen_status: String
  ovarian_surface_involvement: String
  overall_survival: String
  pathology_report: String
  percent_tumor_invasion: Float
  perineural_invasion_present: String
  peripancreatic_lymph_nodes_positive: String
  peripancreatic_lymph_nodes_tested: Float
  peritoneal_fluid_cytological_status: String
  primary_diagnosis: String
  primary_gleason_grade: String
  prior_malignancy: String
  prior_treatment: String
  progression_free_survival: String
  progression_free_survival_event: String
  progression_or_recurrence: String
  residual_disease: String
  secondary_gleason_grade: String
  site_of_resection_or_biopsy: String
  supratentorial_localization: String
  synchronous_malignancy: String
  tissue_or_organ_of_origin: String
  treatment_data: String
  tumor_confined_to_organ_of_origin: String
  tumor_focality: String
  tumor_regression_grade: String
  tumor_stage: String
  vascular_invasion_present: String
  vascular_invasion_type: String
  weiss_assessment_score: String
  wilms_tumor_histologic_subtype: String
  year_of_diagnosis: Int
  study_subject: study_subject @relation(name:"diagnosis_of_study_subject", direction:OUT)
  files: [file] @relation(name:"file_of_diagnosis", direction:IN)
  follow_ups: [follow_up] @relation(name:"fu_of_diagnosis", direction:IN)
  therapeutic_procedures: [therapeutic_procedure] @relation(name:"tp_of_diagnosis", direction:IN)
}

type exposure {
  exposure_node_id: String
  alcohol_days_per_week: Float
  alcohol_drinks_per_day: Float
  alcohol_history: String
  alcohol_intensity: String
  asbestos_exposure: String
  bmi: Float
  cigarettes_per_day: Float
  coal_dust_exposure: String
  environmental_tobacco_smoke_exposure: String
  pack_years_smoked: Float
  radon_exposure: String
  respirable_crystalline_silica_exposure: String
  smoking_frequency: String
  time_between_waking_and_first_smoke: String
  tobacco_smoking_onset_year: Int
  tobacco_smoking_quit_year: Int
  tobacco_smoking_status: String
  type_of_smoke_exposure: String
  type_of_tobacco_used: String
  years_smoked: Float
  study_subject: study_subject @relation(name:"exposure_of_study_subject", direction:OUT)
}

type family_medical_history {
  family_history_id: String
  relationship_age_at_diagnosis: Float
  relationship_age_at_diagnosis_unit: String
  relationship_age_at_diagnosis_original: Float
  relationship_age_at_diagnosis_original_unit: String
  relationship_gender: String
  relationship_primary_diagnosis: String
  relationship_type: String
  relative_with_cancer_history: String
  relatives_with_cancer_history_count: Int
  study_subject: study_subject @relation(name:"fmh_of_study_subject", direction:OUT)
}

type file {
  file_id: String
  file_description: String
  file_format: String
  file_location: String
  file_name: String
  file_size: Float
  file_status: String
  file_type: String
  md5sum: String
  diagnosis: diagnosis @relation(name:"file_of_diagnosis", direction:OUT)
  laboratory_procedure: laboratory_procedure @relation(name:"file_of_laboratory_procedure", direction:OUT)
  study_subject: study_subject @relation(name:"file_of_study_subject", direction:OUT)
  program: program @relation(name:"file_of_program", direction:OUT)
  project: project @relation(name:"file_of_project", direction:OUT)
  sample: sample @relation(name:"file_of_sample", direction:OUT)
  study: study @relation(name:"file_of_study", direction:OUT)
  aliquot: aliquot @relation(name:"file_of_aliquot", direction:OUT)
}

type follow_up {
  follow_up_id: String
  days_to_progression: Int
  days_to_progression_unit: String
  days_to_progression_original: Int
  days_to_progression_original_unit: String
  days_to_recurrence: Int
  days_to_recurrence_unit: String
  days_to_recurrence_original: Int
  days_to_recurrence_original_unit: String
  dfs_event_indicator: String
  days_to_distant_recurrence: Int
  days_to_distant_recurrence_unit: String
  days_to_distant_recurrence_original: Int
  days_to_distant_recurrence_original_unit: String
  distant_recurrence_indicator: String
  recurrence_free_indicator: String
  dfs_event_type: String
  first_recurrence_type: String
  adverse_event: String
  barretts_esophagus_goblet_cells_present: String
  bmi: Float
  cause_of_response: String
  comorbidity: String
  comorbidity_method_of_diagnosis: String
  contact_type: String
  date_of_last_contact: String
  days_to_adverse_event: Int
  days_to_comorbidity: Int
  days_to_follow_up: Int
  days_to_progression_free: Int
  diabetes_treatment_type: String
  disease_response: String
  dlco_ref_predictive_percent: Float
  document_number: String
  ecog_performance_status: String
  explain_unknown_status: String
  fev1_fvc_post_bronch_percent: Float
  fev1_fvc_pre_bronch_percent: Float
  fev1_ref_post_bronch_percent: Float
  fev1_ref_pre_bronch_percent: Float
  height: Float
  height_unit: String
  height_original: Float
  height_original_unit: String
  hepatitis_sustained_virological_response: String
  hpv_positive_type: String
  karnofsky_performance_status: String
  menopause_status: String
  pancreatitis_onset_year: Int
  patient_status: String
  physical_exam_changes: String
  physical_exam_performed: Boolean
  progression_or_recurrence: String
  progression_or_recurrence_anatomic_site: String
  progression_or_recurrence_type: String
  reflux_treatment_type: String
  risk_factor: String
  risk_factor_treatment: String
  treatment_since_last_contact: String
  viral_hepatitis_serologies: String
  weight: Float
  weight_unit: String
  weight_original: Float
  weight_original_unit: String
  diagnosis: diagnosis @relation(name:"fu_of_diagnosis", direction:OUT)
  study_subject: study_subject @relation(name:"fu_of_study_subject", direction:OUT)
}

type fraction {
  fraction_id: String
  creation_datetime: Float
  creation_datetime_unit: String
  creation_datetime_original: Float
  creation_datetime_original_unit: String
  fraction_number: Float
  weight: Float
  weight_unit: String
  weight_original: Float
  weight_original_unit: String
  fraction_type: String
  laboratory_procedures: [laboratory_procedure] @relation(name:"fraction_processed_by", direction:OUT)
  analytes: [analyte] @relation(name:"analyte_of_fraction", direction:IN)
  report: report @relation(name:"report_of_fraction", direction:IN)
  sample: sample @relation(name:"fraction_of_sample", direction:OUT)
}

type institution {
  institution_id: String
  institution_name: String
  institution_url: String
  institution_acronymn: String
  programs: [program] @relation(name:"program_of_institution", direction:IN)
}

type laboratory_procedure {
  laboratory_procedure_id: String
  laboratory_procedure_type: String
  laboratory_procedure_target_type: String
  test_name: String
  instrument_name: String
  instrument_model: String
  instrument_version: String
  software_name: String
  software_version: String
  reagent_description: String
  aliquots: [aliquot] @relation(name:"aliquot_processed_by", direction:IN)
  analytes: [analyte] @relation(name:"analyte_processed_by", direction:IN)
  files: [file] @relation(name:"file_of_laboratory_procedure", direction:IN)
  fractions: [fraction] @relation(name:"fraction_processed_by", direction:IN)
  programs: [program] @relation(name:"laboratory_procedure_of_program", direction:OUT)
  report: report @relation(name:"report_of_laboratory_procedure", direction:IN)
  samples: [sample] @relation(name:"sample_processed_by", direction:IN)
}

type program {
  program_id: String
  program_name: String
  program_acronym: String
  program_full_description: String
  program_external_url: String
  program_short_description: String
  date_of_approval: String
  start_date: String
  end_date: String
  embargo_date: String
  index_date: String
  dbgap_accession_number: String
  sponsor: String
  program_sort_order: Int
  state: String
  in_review: Boolean
  is_legacy: Boolean
  pubmed_id: String
  intended_release_date: String
  program_manager: String
  release_requested: Boolean
  released: Boolean
  releasable: Boolean
  request_submission: Boolean
  submission_enabled: Boolean
  institutions: [institution] @relation(name:"program_of_institution", direction:OUT)
  projects: [project] @relation(name:"project_of_program", direction:IN)
  studies: [study] @relation(name:"study_of_program", direction:IN)
  study_subjects: [study_subject] @relation(name:"study_subject_of_program", direction:IN)
  laboratory_procedures: [laboratory_procedure] @relation(name:"laboratory_procedure_of_program", direction:IN)
  files: [file] @relation(name:"file_of_program", direction:IN)
}

type project {
  project_id: String
  project_name: String
  project_acronym: String
  project_full_description: String
  project_external_url: String
  project_short_description: String
  project_type: String
  date_of_approval: String
  start_date: String
  end_date: String
  embargo_date: String
  index_date: String
  dbgap_accession_number: String
  state: String
  intended_release_date: String
  in_review: Boolean
  is_legacy: Boolean
  release_requested: Boolean
  released: Boolean
  releasable: Boolean
  request_submission: Boolean
  submission_enabled: Boolean
  primary_site: String
  project_manager: String
  project_sort_order: Int
  acquisition_type: String
  analytical_fraction: String
  programs: [program] @relation(name:"project_of_program", direction:OUT)
  study_subjects: [study_subject] @relation(name:"study_subject_of_project", direction:IN)
  files: [file] @relation(name:"file_of_project", direction:IN)
}

type report {
  report_id: String
  report_name: String
  report_type: String
  md5sum: String
  report_description: String
  report_format: String
  report_location: String
  report_size: Float
  aliquot: aliquot @relation(name:"report_of_aliquot", direction:OUT)
  analyte: analyte @relation(name:"report_of_analyte", direction:OUT)
  fraction: fraction @relation(name:"report_of_fraction", direction:OUT)
  sample: sample @relation(name:"report_of_sample", direction:OUT)
  laboratory_procedure: laboratory_procedure @relation(name:"report_of_laboratory_procedure", direction:OUT)
}

type sample {
  sample_id: String
  tissue_type: String
  sample_type: String
  composition: String
  method_of_sample_procurement: String
  sample_type_id: String
  total_tissue_area: Float
  passage_count: Int
  sample_anatomic_site: String
  sample_laterality: String
  comment: String
  necropsy_sample: Boolean
  date_of_sample_collection: String
  days_to_collection: Int
  days_to_sample_procurement: Int
  current_weight: Float
  current_weight_unit: String
  current_weight_original: Float
  current_weight_original_unit: String
  initial_weight: Float
  initial_weight_unit: String
  initial_weight_original: Float
  initial_weight_original_unit: String
  longest_dimension: Float
  longest_dimension_unit: String
  longest_dimension_original: Float
  longest_dimension_original_unit: String
  intermediate_dimension: Float
  intermediate_dimension_unit: String
  intermediate_dimension_original: Float
  intermediate_dimension_original_unit: String
  shortest_dimension: Float
  shortest_dimension_unit: String
  shortest_dimension_original: Float
  shortest_dimension_original_unit: String
  growth_rate: Int
  growth_rate_unit: String
  growth_rate_original: Int
  growth_rate_original_unit: String
  analysis_area: Float
  preservation_method: String
  tumor_descriptor: String
  tumor_code: String
  tumor_code_id: String
  diagnosis_pathologically_confirmed: String
  analysis_area_percentage_glass: Float
  analysis_area_percentage_pigmented_tumor: Float
  analysis_area_percentage_stroma: Float
  analysis_area_percentage_tumor: Float
  tumor_tissue_area: Float
  width_of_tumor: Float
  non_tumor_tissue_area: Float
  percentage_stroma: Float
  percentage_tumor: Float
  distance_normal_to_tumor: String
  time_between_clamping_and_freezing: Float
  time_between_clamping_and_freezing_unit: String
  time_between_clamping_and_freezing_original: Float
  time_between_clamping_and_freezing_original_unit: String
  time_between_excision_and_freezing: Float
  time_between_excision_and_freezing_unit: String
  time_between_excision_and_freezing_original: Float
  time_between_excision_and_freezing_original_unit: String
  catalog_reference: String
  distributor_reference: String
  pool: String
  sample_is_ref: String
  fractions: [fraction] @relation(name:"fraction_of_sample", direction:IN)
  analytes: [analyte] @relation(name:"analyte_of_sample", direction:IN)
  report: report @relation(name:"report_of_sample", direction:IN)
  files: [file] @relation(name:"file_of_sample", direction:IN)
  study_subject: study_subject @relation(name:"sample_of_study_subject", direction:OUT)
  laboratory_procedures: [laboratory_procedure] @relation(name:"sample_processed_by", direction:OUT)
  aliquots: [aliquot] @relation(name:"aliquot_of_sample", direction:IN)
}

type stratification_factor {
  stratification_factor_id: String
  grouped_recurrence_score: String
  stratification_code: Int
  menopausal_status_stratification: String
  planned_chemotherapy_stratification: String
  planned_radiotherapy_stratification: String
  tumor_size_stratification: String
  study_subject: study_subject @relation(name:"study_of_program", direction:OUT)
}

type study {
  study_id: String
  study_name: String
  study_acronym: String
  study_full_description: String
  study_short_description: String
  study_type: String
  study_external_url: String
  date_of_approval: String
  start_date: String
  end_date: String
  embargo_date: String
  index_date: String
  dbgap_accession_number: String
  state: String
  intended_release_date: String
  in_review: Boolean
  is_legacy: Boolean
  release_requested: Boolean
  released: Boolean
  releasable: Boolean
  request_submission: Boolean
  submission_enabled: Boolean
  primary_site: String
  study_manager: String
  study_sort_order: Int
  acquisition_type: String
  analytical_fraction: String
  programs: [program] @relation(name:"study_of_program", direction:OUT)
  study_subjects: [study_subject] @relation(name:"study_subject_of_study", direction:IN)
  files: [file] @relation(name:"file_of_study", direction:IN)
}

type study_subject {
  study_subject_id: String
  study_subject_source_id: String
  consent_type: String
  lost_to_followup: String
  status: String
  disease_type: String
  disease_subtype: String
  taxon: String
  primary_site: String
  in_analysis: Boolean
  case_report_form_submitted: Boolean
  consent_withdrawn: Boolean
  study_subject_first_name: String
  study_subject_is_ref: String
  days_to_consent: Int
  days_to_lost_to_followup: Int
  index_date: String
  pool: String
  cross_reference_databases: [cross_reference_database] @relation(name:"study_subject_cross_referenced_at", direction:OUT)
  demographic_data: demographic_data @relation(name:"demographic_of_study_subject", direction:IN)
  diagnoses: [diagnosis] @relation(name:"diagnosis_of_study_subject", direction:IN)
  exposure: exposure @relation(name:"exposure_of_study_subject", direction:IN)
  files: [file] @relation(name:"file_of_study_subject", direction:IN)
  family_medical_history: family_medical_history @relation(name:"fmh_of_study_subject", direction:IN)
  follow_ups: [follow_up] @relation(name:"fu_of_study_subject", direction:IN)
  programs: [program] @relation(name:"study_subject_of_program", direction:OUT)
  projects: [project] @relation(name:"study_subject_of_project", direction:OUT)
  studies: [study] @relation(name:"study_subject_of_study", direction:OUT)
  samples: [sample] @relation(name:"sample_of_study_subject", direction:IN)
  stratification_factor: stratification_factor @relation(name:"study_of_program", direction:IN)
}

type therapeutic_procedure {
  therapeutic_procedure_id: String
  days_to_treatment_end: Int
  days_to_treatment_end_unit: String
  days_to_treatment_end_original: Int
  days_to_treatment_end_original_unit: String
  days_to_treatment_start: Int
  days_to_treatment_start_unit: String
  days_to_treatment_start_original: Int
  days_to_treatment_start_original_unit: String
  chemotherapy_regimen: String
  chemotherapy_regimen_group: String
  all_endocrine_therapy_stopped: Boolean
  primary_surgical_procedure: String
  received_chemotherapy: Boolean
  endocrine_therapy_type: String
  initial_disease_status: String
  regimen_or_line_of_therapy: String
  therapeutic_agents: String
  treatment_anatomic_site: String
  treatment_effect: String
  treatment_intent_type: String
  treatment_or_therapy: String
  treatment_outcome: String
  treatment_type: String
  diagnosis: diagnosis @relation(name:"tp_of_diagnosis", direction:OUT)
}

type GroupCount {
    group: String
    studies: Int
    num_studies: Int
    programs: Int
}

type StudyOverview {
    study_id: String
    studies: Int
    programs: Int
    program: String
    program_id: String
    study_acronym: String
    study_short_description: String
    study_name: String
    study_info: String
    study_type: String
    condition_name: String
    antigen_name: String
    assay_name: String
    sample_name: String
    principal_investigator: String
    file_id: String
    files: [file]
    firstPage: String
    samples: [String]
    pregnancy: String
    oncology: String
    autoimmune: String
    asthma: String
    allergy: String
    influenza: String
    elisa: String
    luminex: String
    flowcytometry: String
    pseudovirus: String
    prtn: String
    neutralization: String
    seroprevalance: String
    serum: String
    plasma: String
    dried_blood_spot: String
    saliva: String
    rdb_antigen: String
    s1_antigen: String
    full_length_s: String
    n_protein: String
    lgG_antigen: String
    lgA_antigen: String
    lgM_antigen: String
    lab_procedures: String
}

type AssayOverview {
    assay_name: String
    study_id: String
}

type SubjectInfo {
    subject_id: String
    program: String
    program_id: String
    study_acronym: String
    diagnosis: String
    recurrence_score: String
    tumor_size: String
    er_status: String
    pr_status: String
    age_at_index: Int
    survival_time: Int
    survival_time_unit: String
}

type FileInfo {
    study_id: String
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type FileDetail {
    study_code: String
    study_id: String
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type ProgramInfo {
    program_acronym: String
    program_id: String
    program_name: String
    start_date: String
    end_date: String
    pubmed_id: String
    num_studies: Int
    num_assays: Int
    num_files: Int
    num_samples: Int
}

type StudyInfo {
    program_id: String
    study_id: String
    study_acronym: String
    study_name: String
    study_full_description: String
    study_short_description: String
    study_type: String
    study_info: String
    num_studies: Int
    group_studies: [GroupCount]
}

type ProgramDetail {
    program_acronym: String
    program_id: String
    program_name: String
    program_full_description: String
    institution_name: String
    institution_id: String
    program_external_url: String
    num_subjects: Int
    num_studies: Int
    num_files: Int
    num_samples: Int
    num_assays: Int
    num_lab_procedures: Int
    disease_subtypes: [String]
    studies: [StudyInfo]
    group_studies: [GroupCount]
    study_id: String
    study_name: String
    study_type: String
    pubmed_id: String
}

type SubjectDetail {
    subject_id: String
    program_acronym: String
    program_id: String
    study_acronym: String
    study_name: String
    gender: String
    race: String
    ethnicity: String
    age_at_index: Int
    menopause_status: String
    vital_status: String
    cause_of_death: String
    disease_type: String
    disease_subtype: String
    tumor_grade: String
    tumor_largest_dimension_diameter: Float
    er_status: String
    pr_status: String
    nuclear_grade: String
    recurrence_score: Int
    primary_surgical_procedure: String
    chemotherapy_regimen_group: String
    chemotherapy_regimen: String
    endocrine_therapy_type: String
    dfs_event_indicator: String
    recurrence_free_indicator: String
    distant_recurrence_indicator: String
    dfs_event_type: String
    first_recurrence_type: String
    days_to_progression: Int
    days_to_recurrence: Int
    test_name: String
    files: [FileInfo]
    samples: [sample]
    num_samples: Int
    num_lab_procedures: Int
}

type ArmInfo {
    arm: String
    size: Int
    caseSize: Int
}

type ProgramArms {
    program: String
    caseSize: Int
    children: [ArmInfo]
}

type ArmFile {
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    file_id: String
    md5sum: String
}

type ArmDetail {
    study_acronym: String
    study_name: String
    study_type: String
    study_full_description: String
    study_info: String
    num_subjects: Int
    num_files: Int
    num_samples: Int
    num_lab_procedures: Int
    diagnoses: [GroupCount]
    files: [ArmFile]
}

type SampleOverview {
    sample_id: String
    subject_id: String
    program: String
    arm: String
    diagnosis: String
    tissue_type: String
    tissue_composition: String
    sample_anatomic_site: String
    sample_procurement_method: String
    platform: String
    files: [String]
    program_id: String
}

type FileOverview {
    file_id: String
    file_name: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    program: String
    study_id: String
    program_id: String
    file_location: String
    arm: String
    sample_id: String
    diagnosis: String
}

type SearchResult {
    numberOfPrograms: Int
    numberOfStudies: Int
    numberOfSubjects: Int
    numberOfSamples: Int
    numberOfLabProcedures: Int
    numberOfFiles: Int
    subjectIds: [String]
    firstPage: [StudyOverview]
}

schema {
    query: QueryType
}

type QueryType {
    schemaVersion: String @cypher(statement: "RETURN '1.0.4'")

    "Simple counts"
    numberOfPrograms: Int @cypher(statement: "MATCH (n:program) return count(n)")
    numberOfStudies: Int @cypher(statement: "MATCH (n:study) return count(n)")
    numberOfSubjects: Int @cypher(statement: "MATCH (n:study_subject) return count(n)")
    numberOfSamples: Int @cypher(statement: "MATCH (n:sample) return count(n)")
    numberOfLabProcedures: Int  @cypher(statement: "MATCH (n:laboratory_procedure) return count(n)")
    numberOfFiles: Int @cypher(statement: "MATCH (n:file) return count(n)")
    numberOfAssays: Int @cypher(statement: "MATCH (n:assay) return count(n)")

    "Group counts"
    programCountByInstitution(program_ids: [String] =[]): [GroupCount] @cypher(statement: """
        MATCH (g:program)
        OPTIONAL MATCH ()-[:study_of_program]->(ss)
            WHERE (size($program_ids) = 0 OR g.program_id IN $program_ids)
        RETURN g.program_acronym AS group,
               count(DISTINCT ss) as studies
    """)

    studyCountByProgram(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:program)
        OPTIONAL MATCH (g)<--(:study)<--(ss:study_id)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.program_acronym AS group,
               count(DISTINCT ss) as studies
    """)
    studyCountByStudy(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:study)
        OPTIONAL MATCH (g)-->(ss:study_id)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.study_acronym + ': ' + g.study_short_description AS group,
               count(DISTINCT ss) as studies
    """)

    studyCountByConditions(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:condition)
        OPTIONAL MATCH (g)-[:condition_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.condition_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByPregnancy(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:condition {condition_name: 'Pregnancy'})
        OPTIONAL MATCH (g)-[:condition_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.condition_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByOncology(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:condition {condition_name: 'Oncology'})
        OPTIONAL MATCH (g)-[:condition_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.condition_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByAllergy(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:condition {condition_name: 'Allergy'})
        OPTIONAL MATCH (g)-[:condition_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.condition_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByAsthma(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:condition {condition_name: 'Asthma'})
        OPTIONAL MATCH (g)-[:condition_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.condition_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByAutoimmune(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:condition {condition_name: 'Autoimmune'})
        OPTIONAL MATCH (g)-[:condition_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.condition_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByInfluenza(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:condition {condition_name: 'Influenza'})
        OPTIONAL MATCH (g)-[:condition_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.condition_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByAssayType(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:assay)
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.assay_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByELISA(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:assay {assay_name: 'ELISA'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.assay_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByLuminex(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:assay {assay_name: 'Luminex'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.assay_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByFlowcytometry(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:assay {assay_name: 'Flow Cytometry'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.assay_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByPseudovirus(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:assay {assay_name: 'Pseudo Virus'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.assay_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByPRTN(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:assay {assay_name: 'PRTN'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.assay_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByNeutralization(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:assay {assay_name: 'Neutralization'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.assay_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountBySeroprevalance(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:assay {assay_name: 'Seroprevalance'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.assay_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByFileAssociation(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:file)
        OPTIONAL MATCH (g)-[:file_of_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.file_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByFileType(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:file) WHERE g.file_type IS NOT NULL
        OPTIONAL MATCH (g)-[:file_of_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.file_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountBySampleType(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:sample) WHERE g.sample_composition IS NOT NULL
        OPTIONAL MATCH (g)-[:sample_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.sample_composition AS group, count(DISTINCT ss) as studies
    """)

    studyCountBySerum(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:sample {sample_name: 'Serum'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.sample_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountBySaliva(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:sample {sample_name: 'Saliva'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.sample_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByDriedBlood(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:sample {sample_name: 'Dried blood spot'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.sample_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByPlasma(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:sample {sample_name: 'Plasma'})
        OPTIONAL MATCH (g)-[:assay_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.sample_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountBySampleComposition(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:sample) WHERE g.sample_composition IS NOT NULL
        OPTIONAL MATCH (g)-[:sample_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.sample_composition AS group, count(DISTINCT ss) as studies
    """)

    studyCountByAntigens(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:antigen) WHERE g.sample_composition IS NOT NULL
        OPTIONAL MATCH (g)-[:antigen_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.sample_composition AS group, count(DISTINCT ss) as studies
    """)

    studyCountByRDB(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:antigen {antigen_name: 'RDB'})
        OPTIONAL MATCH (g)-[:antigen_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.antigen_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByS1(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:antigen {antigen_name: 'S1'})
        OPTIONAL MATCH (g)-[:antigen_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.antigen_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByFull_length_s(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:antigen {antigen_name: 'Full length s'})
        OPTIONAL MATCH (g)-[:antigen_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.antigen_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountByN_protein(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:antigen {antigen_name: 'N protein'})
        OPTIONAL MATCH (g)-[:antigen_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.antigen_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountBylgG(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:antigen {antigen_name: 'lgG'})
        OPTIONAL MATCH (g)-[:antigen_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.antigen_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountBylgA(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:antigen {antigen_name: 'lgA'})
        OPTIONAL MATCH (g)-[:antigen_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.antigen_name AS group, count(DISTINCT ss) as studies
    """)

    studyCountBylgM(study_ids: [String] = []): [GroupCount] @cypher(statement: """
        MATCH (g:antigen {antigen_name: 'lgM'})
        OPTIONAL MATCH (g)-[:antigen_in_study]-(ss)
            WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN g.antigen_name AS group, count(DISTINCT ss) as studies
    """)

    armsByPrograms(program_ids: [String] = []): [ProgramArms] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<-[:study_of_program]-(ss)
          WHERE (size($program_ids) = 0 OR ss.program_id IN $program_ids)
        WITH p, ss, COUNT(DISTINCT ss) AS caseSize
        OPTIONAL MATCH (p)<-[:study_of_program]-(s)
          WHERE (size($program_ids) = 0 OR ss.study_id IN $program_ids)
        WITH
            p, caseSize,
            {arm: s.study_acronym, caseSize: COUNT(DISTINCT ss), size: COUNT(DISTINCT ss)} AS s
        RETURN  p.program_acronym AS program,
                caseSize,
                collect(s) AS children
    """, passThrough: true)

    "Facet search counts"
    filterStudyCountByProgram(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByStudy(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByPregnancy(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByOncology(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByAllergy(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByAutoimmune(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByAsthma(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByELISA(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByLuminex(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByFlowcytometry(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByPseudovirus(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByAssayType(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByTissueType(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByTissueComposition(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByFileAssociation(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    filterStudyCountByFileType(
        programs: [String] = [],
        studies: [String] = [],
        pregnancy: [String] = [],
        oncology: [String] = [],
        allergy: [String] = [],
        autoimmune: [String] = [],
        asthma: [String] = [],
        influenza: [String] = [],
        elisa: [String] = [],
        luminex: [String] = [],
        tissue_type: [String] = [],
        sample_composition: [String] = [],
        association: [String] = [],
        file_type: [String] = [],
        flowcytometry: [String] = [],
        pseudovirus: [String] = [],
        prtn: [String] = [],
        neutralization: [String] = [],
        seroprevalance: [String] = [],
        serum: [String] = [],
        plasma: [String] = [],
        dried_blood_spot: [String] = [],
        saliva: [String] = [],
        rdb_antigen: [String] = [],
        s1_antigen: [String] = [],
        full_length_s: [String] = [],
        n_protein: [String] = [],
        lgG_antigen: [String] = [],
        lgA_antigen: [String] = [],
        lgM_antigen: [String] = [],
    ): [GroupCount] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($study_id) = 0 OR sf.study_id IN $study_id)
        MATCH (ss)<-[:condition_in_study]-(d)
          WHERE (size($pregnancy) = 0 OR d.condition_name IN $pregnancy)
            AND (size($oncology) = 0 OR d.condition_name IN $oncology)
            AND (size($allergy) = 0 OR d.conditin_name IN $allergy)
            AND (size($autoimmune) = 0 OR d.condition_name IN $autoimmune)
            AND (size($asthma) = 0 OR d.condition_name IN $asthma)
            AND (size($influenza) = 0 OR d.condition_name IN $influenza)
        MATCH (ss:assay)-[:assay_in_study]->(s)
          WHERE (size($studies) = 0 OR (s.study_id) IN $studies)
            AND (size($elisa) = 0 OR ss.assay_name IN $elisa)
            AND (size($luminex) = 0 OR ss.assay_name IN $luminex)
            AND (size($flowcytometry) = 0 OR ss.assay_name IN $flowcytometry)
            AND (size($pseudovirus) = 0 OR ss.assay_name IN $pseudovirus)
            AND (size($prtn) = 0 OR ss.assay_name IN $prtn)
            AND (size($neutralization) = 0 OR ss.assay_name IN $neutralization)
            AND (size($seroprevalance) = 0 OR ss.assay_name IN $seroprevalance)
        MATCH (ss)<-[:sample_in_study]-(samp)
          WHERE (size($study_id) = 0 OR ss.study_id IN $study_id)
            AND (size($serum) = 0 OR ss.sample_name IN $serum)
            AND (size($plasma) = 0 OR ss.sample_name IN $plasma)
            AND (size($dried_blood_spot) = 0 OR ss.sample_name IN $dried_blood_spot)
            AND (size($saliva) = 0 OR ss.sample_name IN $saliva)
        MATCH (ss)<-[:antigen_in_study]-(ant)
          WHERE (size($study_id) = 0 OR ant.study_id IN $study_id)
            AND (size($rdb_antigen) = 0 OR ant.antigen_name IN $rdb_antigen)
            AND (size($s1_antigen) = 0 OR ant.antigen_name IN $s1_antigen)
            AND (size($full_length_s) = 0 OR ant.antigen_name IN $full_legth_s)
            AND (size($n_protein) = 0 OR ant.antigen_name IN $n_protein)
            AND (size($lgG_antigen) = 0 OR ant.antigen_name IN $lgG_antigen)
            AND (size($lgA_antigen) = 0 OR ant.antigen_name IN $lgA_antigen)
            AND (size($lgM_antigen) = 0 OR ant.antigen_name IN $lgM_antigen)
        MATCH (ss)<-[*..2]-(study)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(study)) IN $association)
        WITH DISTINCT ss, p
        RETURN p.program_acronym AS group,
               count(ss) as studies
    """)

    studyOverViewPaged(first: Int = 100, offset: Int = 0, study_ids: [String] = [], order_by: String = ""): [StudyOverview] @cypher(statement: """
        MATCH (ss:study)
          WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        OPTIONAL MATCH (ss)<-[:sample_in_study]-(sp)<-[:file_of_study]-(f)-[:study_has_file]->(lp)
        WITH
            toInteger(split(ss.study_id,'-')[2]) as study_id_num,
            collect(DISTINCT sp.sample_id) AS samples,
            collect(DISTINCT f) AS files,
            ss
        OPTIONAL MATCH (ss)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:assay_in_study]-(sf)
        OPTIONAL MATCH (ss)<-[:condition_in_study]-(d)
        OPTIONAL MATCH (d)<-[:antigen_in_study]-(tp)
        OPTIONAL MATCH (ss)<-[:sample_in_study]-(demo)
        RETURN
            p.program_acronym AS program,
            p.program_id AS program_id,
            ss.study_acronym AS study_acronym,
            ss.study_short_description AS study_short_description,
            ss.study_acronym + ': ' + ss.study_short_description AS study_info,
            ss.study_id AS study_id,
            ss.study_name AS study_name,
            sf.assay_name AS assay_name,
            d.condition_name AS condition_name,
            d.antigen_name AS antigen_name,
            ss.sample_type AS sample_type,
            samples,
            files
        ORDER BY CASE $order_by
            WHEN 'study_id' THEN study_id_num
            WHEN 'program' THEN program
            WHEN 'program_id' THEN program_id
            WHEN 'study_acronym' THEN study_acronym
            WHEN 'study_short_description' THEN study_short_description
            WHEN 'study_info' THEN study_info
            WHEN 'condition_name' THEN condition_name
            WHEN 'assay_name' THEN assay_name
            WHEN 'antigen_name' THEN antigen_name
            ELSE study_id_num END
        SKIP $offset
        LIMIT $first
    """, passThrough: true)

    studyOverViewPagedDesc(first: Int = 100, offset: Int = 0, study_ids: [String] = [], order_by: String = ""): [StudyOverview] @cypher(statement: """
        MATCH (ss:study)
          WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        OPTIONAL MATCH (ss)<-[:sample_in_study]-(sp)<-[:file_of_study]-(f)-[:study_has_file]->(lp)
        WITH
            toInteger(split(ss.study_id,'-')[2]) as study_id_num,
            collect(DISTINCT sp.sample_id) AS samples,
            collect(DISTINCT f) AS files,
            ss
        OPTIONAL MATCH (ss)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:assay_in_study]-(sf)
        OPTIONAL MATCH (ss)<-[:condition_in_study]-(d)
        OPTIONAL MATCH (d)<-[:antigen_in_study]-(tp)
        OPTIONAL MATCH (ss)<-[:sample_in_study]-(demo)
        RETURN
            p.program_acronym AS program,
            p.program_id AS program_id,
            ss.study_acronym AS study_acronym,
            ss.study_short_description AS study_short_description,
            ss.study_acronym + ': ' + ss.study_short_description AS study_info,
            ss.study_id AS study_id,
            ss.study_name AS study_name,
            sf.assay_name AS assay_name,
            d.condition_name AS condition_name,
            d.antigen_name AS antigen_name,
            ss.sample_type AS sample_type,
            samples,
            files
        ORDER BY CASE $order_by
            WHEN 'study_id' THEN study_id_num
            WHEN 'program' THEN program
            WHEN 'program_id' THEN program_id
            WHEN 'study_acronym' THEN study_acronym
            WHEN 'study_short_description' THEN study_short_description
            WHEN 'study_info' THEN study_info
            WHEN 'condition_name' THEN condition_name
            WHEN 'assay_name' THEN assay_name
            WHEN 'antigen_name' THEN antigen_name
            ELSE study_id_num END
        SKIP $offset
        LIMIT $first
    """, passThrough: true)

    searchSubjects2 (
          program: [String] = [],
          studies: [String] = [],
          diagnoses: [String] = [],
          rc_scores: [String] = [],
          tumor_sizes: [String] = [],
          chemo_regimen: [String] = [],
          tumor_grades: [String] = [],
          er_status: [String] = [],
          pr_status: [String] = [],
          endo_therapies: [String] = [],
          meno_status: [String] = [],
          tissue_type: [String] = [],
          composition: [String] = [],
          association: [String] = [],
          file_type: [String] = []
    ): [String] @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($program) = 0 OR p.program_acronym IN $program)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)
        RETURN DISTINCT ss.study_subject_id
    """)

    searchSubjects (
          programs: [String] = [],
          studies: [String] = [],
          diagnoses: [String] = [],
          rc_scores: [String] = [],
          tumor_sizes: [String] = [],
          chemo_regimen: [String] = [],
          tumor_grades: [String] = [],
          er_status: [String] = [],
          pr_status: [String] = [],
          endo_therapies: [String] = [],
          meno_status: [String] = [],
          tissue_type: [String] = [],
          composition: [String] = [],
          association: [String] = [],
          file_type: [String] = [],
          first: Int = 100
    ): SearchResult @cypher(statement: """
        // Filtering subjects
        MATCH (ss)<-[:study_of_program]-(sf)
          WHERE (size($rc_scores) = 0 OR sf.grouped_recurrence_score IN $rc_scores)
        MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
          WHERE (size($tumor_sizes) = 0 OR d.tumor_size_group IN $tumor_sizes)
            AND (size($tumor_grades) = 0 OR d.tumor_grade IN $tumor_grades)
            AND (size($er_status) = 0 OR d.er_status IN $er_status)
            AND (size($pr_status) = 0 OR d.pr_status IN $pr_status)
            AND (size($chemo_regimen) = 0 OR tp.chemotherapy_regimen IN $chemo_regimen)
            AND (size($endo_therapies) = 0 OR tp.endocrine_therapy_type IN $endo_therapies)
        MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
          WHERE (size($programs) = 0 OR p.program_acronym IN $programs)
            AND (size($studies) = 0 OR (s.study_acronym + ': ' + s.study_short_description) IN $studies)
            AND (size($diagnoses) = 0 OR ss.disease_subtype IN $diagnoses)
        MATCH (ss)<-[:demographic_of_study_subject]-(demo)
          WHERE (size($meno_status) = 0 OR demo.menopause_status IN $meno_status)
        MATCH (ss)<-[:sample_of_study_subject]-(samp)
          WHERE (size($tissue_type) = 0 OR samp.tissue_type IN $tissue_type)
            AND (size($composition) = 0 OR samp.composition IN $composition)
        MATCH (ss)<-[*..2]-(parent)<--(f:file)
          WHERE (size($file_type) = 0 OR f.file_type IN $file_type)
            AND (size($association) = 0 OR head(labels(parent)) IN $association)

        // Preparing return values
        OPTIONAL MATCH (f)-[:file_of_laboratory_procedure]->(lp)
        WITH ss, collect(DISTINCT samp.sample_id) AS samples, collect(DISTINCT lp.laboratory_procedure_id) AS lab_procedures, collect(DISTINCT f) AS files
        OPTIONAL MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:study_of_program]-(sf)
        OPTIONAL MATCH (ss)<-[:diagnosis_of_study_subject]-(d)
        OPTIONAL MATCH (d)<-[:tp_of_diagnosis]-(tp)
        OPTIONAL MATCH (ss)<-[:demographic_of_study_subject]-(demo)
        WITH    p.program_acronym AS program,
                p.program_id AS program_id,
                s.study_acronym AS study_acronym,
                s.study_short_description AS study_short_description,
                s.study_acronym + ': ' + s.study_short_description AS study_info,
                ss.study_subject_id AS subject_id,
                ss.disease_subtype AS diagnosis,
                sf.grouped_recurrence_score AS recurrence_score,
                d.tumor_size_group AS tumor_size,
                d.tumor_grade AS tumor_grade,
                d.er_status AS er_status,
                d.pr_status AS pr_status,
                tp.chemotherapy_regimen AS chemotherapy,
                tp.endocrine_therapy_type AS endocrine_therapy,
                demo.menopause_status AS menopause_status,
                demo.age_at_index AS age_at_index,
                demo.survival_time AS survival_time,
                demo.survival_time_unit AS survival_time_unit,
                samples,
                files,
                lab_procedures
        UNWIND samples AS sample_id
        UNWIND lab_procedures AS lab_procedure_id
        UNWIND files AS file
        RETURN COLLECT(DISTINCT subject_id) AS subjectIds,
               COUNT(DISTINCT program) AS numberOfPrograms,
               COUNT(DISTINCT study_acronym) AS numberOfStudies,
               COUNT(DISTINCT subject_id) AS numberOfSubjects,
               COUNT(DISTINCT lab_procedure_id) AS numberOfLabProcedures,
               COUNT(DISTINCT sample_id) AS numberOfSamples,
               COUNT(DISTINCT file) AS numberOfFiles,
               COLLECT( DISTINCT({ subject_id: subject_id, program: program, program_id: program_id, study_acronym: study_acronym,
                          study_short_description: study_short_description, study_info: study_info, diagnosis: diagnosis,
                          recurrence_score: recurrence_score, tumor_size: tumor_size, tumor_grade: tumor_grade,
                          er_status: er_status, pr_status: pr_status, chemotherapy: chemotherapy,
                          endocrine_therapy: endocrine_therapy, menopause_status: menopause_status,
                          age_at_index: age_at_index, survival_time: survival_time, survival_time_unit: survival_time_unit,
                          files: files, samples: samples, lab_procedures: lab_procedures}))[0..$first] AS firstPage
    """, passThrough:true)


    studyInList(study_ids: [String]=[]): [StudyInfo] @cypher(statement: """
        MATCH (ss:study)
          WHERE ss.study_id IN $study_ids
        OPTIONAL MATCH (ss)-[:study_of_program]->(p)
        OPTIONAL MATCH (ss)<-[:study_of_program]-(sf)
        OPTIONAL MATCH (ss)<-[:condition_in_study]-(d)
        OPTIONAL MATCH (d)<-[:sample_in_study]-(tp)
        OPTIONAL MATCH (ss)<-[:study_has_file]-(demo)
        OPTIONAL MATCH (ss)<-[:assay_in_study]-(assay)
        OPTIONAL MATCH (ss)<-[:antigen_in_study]-(antigen)
        RETURN  p.program_acronym AS program,
                p.program_id AS program_id,
                s.study_acronym AS study_acronym,
                p.study_id AS study_id,
                d.condition_name AS condition_name,
                tp.sample_name AS sample_name,
                assay.assay_name AS assay_name,
                antigen.antigen_name AS antigen_name,
                demo.file_name AS file_name,
                demo.file_type AS file_type
    """)

    filesOfStudy(study_ids: [String]=[]): [FileInfo] @cypher(statement:"""
        MATCH (ss:file)
          WHERE ss.study_id IN $study_ids
        OPTIONAL MATCH (ss)<-[*..2]-(f:file)
        OPTIONAL MATCH (study)<--(f)
        RETURN ss.study_id AS study_id,
               f.file_name AS file_name,
               f.file_type AS file_type,
               head(labels(study)) AS association,
               f.file_description AS file_description,
               f.file_format AS file_format,
               f.file_size AS file_size,
               f.file_id AS file_id,
               f.md5sum AS md5sum
    """)

    programInfo: [ProgramInfo] @cypher(statement: """
        MATCH (p:program)
        OPTIONAL MATCH (p)<--(s:study)
        OPTIONAL MATCH (s)<-[ss:file_of_study]-()
        OPTIONAL MATCH (s)-[as:assay_in_study]->()
        OPTIONAL MATCH (s)-[samp:sample_in_study]->()
        RETURN p.program_acronym AS program_acronym,
               p.program_id AS program_id,
               p.program_name AS program_name,
               p.start_date AS start_date,
               p.end_date AS end_date,
               p.pubmed_id AS pubmed_id,
               COUNT(DISTINCT s) AS num_studies,
               COUNT(DISTINCT ss) AS num_files,
               COUNT(DISTINCT as) AS num_assays,
               COUNT(DISTINCT samp) AS num_samples
             
    """)
    programDetail(program_id: String):  ProgramDetail @cypher(statement: """
        MATCH (p:program {program_id: $program_id})
        OPTIONAL MATCH (p)<-[:study_of_program]-(s1)
        OPTIONAL MATCH (s)-[:study_has_file]->(s2)
        OPTIONAL MATCH (s)-[as:assay_in_study]->()
        OPTIONAL MATCH (s)-[samp:sample_in_study]->()
        WITH s1 {.study_id, .study_name, .study_acronym, program_id: p.program_id, .study_full_description, .study_short_description} AS study, p, s2, as, s, s1, samp
        WITH
        COLLECT(s.study_id) AS group, p, s2, as, s, s1, samp, study
        WITH
        COLLECT({group: group, studies: s.study_id}) AS group_studies, p, s1, s2, as, samp, group, study
        RETURN p.program_id AS program_id,
                p.program_name AS program_name,
                p.program_acronym AS program_acronym,
                p.program_full_description AS program_full_description,
                p.program_short_description AS program_short_description,
                p.institution_id AS institution_id,
                p.program_external_url AS program_external_url,
                p.start_date AS program_start_date,
                p.end_date AS program_end_date,
                p.pubmed_id as pubmedid,
                group_studies,
                COUNT(DISTINCT s1) AS num_studies,
                COUNT(DISTINCT s2) AS num_files,
                COUNT(DISTINCT as) AS num_assays,
                COUNT(DISTINCT samp) AS num_samples,
                COLLECT(DISTINCT study) AS studies
    """, passThrough:true)

    subjectDetail(subject_id: String): SubjectDetail @cypher(statement:  """
        MATCH (ss:study_subject {study_subject_id: $subject_id})
        OPTIONAL MATCH (ss)-->(s:study)
        OPTIONAL MATCH (s)-->(p:program)
        OPTIONAL MATCH (ss)<-[*..2]-(f:file)
        OPTIONAL MATCH (parent)<--(f)
          WHERE NOT (parent:laboratory_procedure)
        WITH p, s, ss, collect(f {subject_id:ss.study_subject_id, .file_name, .file_type,
            association:head(labels(parent)), .file_description, .file_format, .file_size, .file_id, .md5sum}) AS files
        OPTIONAL MATCH (ss)<--(demo:demographic_data)
        OPTIONAL MATCH (ss)<--(diag:diagnosis)
        OPTIONAL MATCH (diag)<--(pr:therapeutic_procedure)
        OPTIONAL MATCH (ss)<--(fu:follow_up)
        OPTIONAL MATCH (ss)<--(samp:sample)
        OPTIONAL MATCH (ss)<--()-->(lp:laboratory_procedure)
        RETURN ss.study_subject_id AS subject_id,
               p.program_acronym AS program_acronym,
               p.program_id AS program_id,
               s.study_acronym AS study_acronym,
               s.study_name AS study_name,
               demo.gender AS gender,
               demo.race AS race,
               demo.ethnicity AS ethnicity,
               demo.age_at_index AS age_at_index,
               demo.menopause_status AS menopause_status,
               demo.vital_status AS vital_status,
               demo.cause_of_death AS cause_of_death,
               ss.disease_type AS disease_type,
               ss.disease_subtype AS disease_subtype,
               diag.tumor_grade AS tumor_grade,
               diag.tumor_largest_dimension_diameter AS tumor_largest_dimension_diameter,
               diag.er_status AS er_status,
               diag.pr_status AS pr_status,
               diag.nuclear_grade AS nuclear_grade,
               diag.recurrence_score AS recurrence_score,
               pr.primary_surgical_procedure AS primary_surgical_procedure,
               pr.chemotherapy_regimen_group AS chemotherapy_regimen_group,
               pr.chemotherapy_regimen AS chemotherapy_regimen,
               pr.endocrine_therapy_type AS endocrine_therapy_type,
               fu.dfs_event_indicator AS dfs_event_indicator,
               fu.recurrence_free_indicator AS recurrence_free_indicator,
               fu.distant_recurrence_indicator AS distant_recurrence_indicator,
               fu.dfs_event_type AS dfs_event_type,
               fu.first_recurrence_type AS first_recurrence_type,
               fu.days_to_progression AS days_to_progression,
               fu.days_to_recurrence AS days_to_recurrence,
               lp.test_name AS test_name,
               files,
               COLLECT(DISTINCT samp) AS samples,
               COUNT(DISTINCT samp) AS num_samples,
               COUNT(DISTINCT lp) AS num_lab_procedures
    """, passThrough: true)

    armDetail(study_acronym: String): ArmDetail @cypher(statement:  """
        MATCH (s:study {study_acronym: $study_acronym})<-[:study_subject_of_study]-(ss)
        WITH s, ss.disease_subtype AS group, COUNT(DISTINCT ss) AS subjects
        WITH s, COLLECT ({group: group, subjects:  subjects}) AS diagnoses
        OPTIONAL MATCH (s)<-[:file_of_study]-(f)
        WITH s, diagnoses, COLLECT(DISTINCT f {.file_name, .file_type, .file_description, .file_format, .file_size, .file_id, .md5sum, association: "study"}) AS files
        OPTIONAL MATCH (s)<-[:study_subject_of_study]-()<-[:sample_of_study_subject]-()<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH s, diagnoses, files, COUNT(DISTINCT f) + size(files) AS num_files, COUNT(DISTINCT lp) AS num_lab_procedures
        OPTIONAL MATCH (s)<-[:study_subject_of_study]-(ss)
        OPTIONAL MATCH (ss)<-[:sample_of_study_subject]-(sp)
        RETURN s.study_acronym AS study_acronym,
               s.study_name AS study_name,
               s.study_type AS study_type,
               s.study_full_description AS study_full_description,
               s.study_acronym + ': ' + s.study_short_description AS study_info,
               COUNT(DISTINCT ss) AS num_subjects,
               COUNT(DISTINCT sp) AS num_samples,
               num_lab_procedures,
               num_files,
               diagnoses,
               files
    """, passThrough: true)

    samplesForSubjectId(subject_id: String!): [sample] @cypher(statement: "MATCH (ss:study_subject {study_subject_id: $subject_id})<-[*]-(s:sample) RETURN s")

    filesInList(file_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [FileDetail] @cypher(statement: """
        MATCH (f:file)
        WHERE f.file_id in $file_ids
        OPTIONAL MATCH (f)-->(study)
        OPTIONAL MATCH (f)-[*]->(ss:study_id)-->(s:study)
        WITH
            toInteger(split(f.file_id,'-')[2]) AS file_id_num,
            toInteger(split(ss.study_id,'-')[2]) AS study_id_num,
            f, study, ss, s
        RETURN
            f.file_name AS file_name,
            f.file_id AS file_id,
            f.file_type AS file_type,
            head(labels(parent)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            f.md5sum AS md5sum,
            ss.study_id AS study_id,
            s.study_acronym AS study_code
        ORDER BY CASE $order_by
            WHEN 'file_id' THEN file_id_num
            WHEN 'file_name' THEN file_name
            WHEN 'file_type' THEN file_type
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'md5sum' THEN md5sum
            WHEN 'study_id' THEN study_id_num
            WHEN 'study_code' THEN study_code
            ELSE file_id_num END
        SKIP $offset
        LIMIT $first
    """)

    filesInListDesc(file_ids: [String], order_by: String = "", first: Int = 100, offset: Int = 0): [FileDetail] @cypher(statement: """
        MATCH (f:file)
        WHERE f.file_id in $file_ids
        OPTIONAL MATCH (f)-->(study)
        OPTIONAL MATCH (f)-[*]->(ss:study_of_program)-->(s:study)
        WITH
            toInteger(split(f.file_id,'-')[2]) AS file_id_num,
            toInteger(split(ss.study_id,'-')[2]) AS study_id_num,
            f, parent, ss, s
        RETURN
            f.file_name AS file_name,
            f.file_id AS file_id,
            f.file_type AS file_type,
            head(labels(study)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            f.md5sum AS md5sum,
            ss.study_id AS study_id,
            s.study_acronym AS study_code
        ORDER BY CASE $order_by
            WHEN 'file_id' THEN file_id_num
            WHEN 'file_name' THEN file_name
            WHEN 'file_type' THEN file_type
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'md5sum' THEN md5sum
            WHEN 'study_id' THEN study_id_num
            WHEN 'study_code' THEN study_code
            ELSE file_id_num END DESC
        SKIP $offset
        LIMIT $first
    """)

    sampleOverview(subject_ids: [String] = [], sample_ids: [String]=[], order_by: String = "", first: Int = 100, offset: Int = 0): [SampleOverview] @cypher(statement: """
        MATCH (samp:sample)
          WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (samp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            distinct lp, f
            toInteger(split(ss.study_id,'-')[2]) AS study_id_num,
            collect(distinct f.file_id) AS files,
            samp, ss, s, p
          WHERE (size($subject_ids) = 0 OR ss.study_subject_id IN $subject_ids)
        RETURN
            samp.sample_id AS sample_id,
            ss.study_subject_id AS subject_id,
            p.program_acronym AS program,
            s.study_acronym AS arm,
            ss.disease_subtype AS diagnosis,
            samp.tissue_type AS tissue_type,
            samp.composition AS tissue_composition,
            samp.sample_anatomic_site AS sample_anatomic_site,
            samp.method_of_sample_procurement AS sample_procurement_method,
            lp.test_name AS platform,
            files,
            p.program_id as program_id
        ORDER BY CASE $order_by
            WHEN 'study_id' THEN study_id_num
            WHEN 'sample_id' THEN sample_id
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'tissue_type' THEN tissue_type
            WHEN 'tissue_composition' THEN tissue_composition
            WHEN 'sample_anatomic_site' THEN sample_anatomic_site
            WHEN 'sample_procurement_method' THEN sample_procurement_method
            WHEN 'platform' THEN platform
            ELSE study_id_num END
        SKIP $offset
        LIMIT $first
    """)

    sampleOverviewDesc(subject_ids: [String] = [], sample_ids: [String]=[], order_by: String = "", first: Int = 100, offset: Int = 0): [SampleOverview] @cypher(statement: """
        MATCH (samp:sample)
          WHERE (size($sample_ids) = 0 OR samp.sample_id IN $sample_ids)
        OPTIONAL MATCH (samp)-[:sample_of_study_subject]->(ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
        OPTIONAL MATCH (samp)<-[:file_of_sample]-(f)-[:file_of_laboratory_procedure]->(lp)
        WITH
            distinct lp,
            toInteger(split(ss.study_id,'-')[2]) AS study_id_num,
            collect(distinct f.file_id) AS files,
            samp, ss, s, p
          WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN
            samp.sample_id AS sample_id,
            ss.study_subject_id AS subject_id,
            p.program_acronym AS program,
            s.study_acronym AS arm,
            ss.disease_subtype AS diagnosis,
            samp.tissue_type AS tissue_type,
            samp.composition AS tissue_composition,
            samp.sample_anatomic_site AS sample_anatomic_site,
            samp.method_of_sample_procurement AS sample_procurement_method,
            lp.test_name AS platform,
            files,
            p.program_id as program_id
        ORDER BY CASE $order_by
            WHEN 'study_id' THEN study_id_num
            WHEN 'sample_id' THEN sample_id
            WHEN 'program' THEN program
            WHEN 'arm' THEN arm
            WHEN 'diagnosis' THEN diagnosis
            WHEN 'tissue_type' THEN tissue_type
            WHEN 'tissue_composition' THEN tissue_composition
            WHEN 'sample_anatomic_site' THEN sample_anatomic_site
            WHEN 'sample_procurement_method' THEN sample_procurement_method
            WHEN 'platform' THEN platform
            ELSE study_id_num END DESC
        SKIP $offset
        LIMIT $first
    """)

    assayOverview(study_ids: [String] = [], study_ids: [String]=[], order_by: String = "", first: Int = 100, offset: Int = 0): [AssayOverview] @cypher(statement: """
        MATCH (as:assay)
          WHERE (size($study_ids) = 0 OR as.study_id IN $study_ids)
        OPTIONAL MATCH (as)-[:assay_in_study]->(ss)-[:study_of_program]->(p)
        WITH
            toInteger(split(ss.study_id,'-')[2]) AS study_id_num,
            ss, p, as 
          WHERE (size($study_ids) = 0 OR ss.study_id IN $study_ids)
        RETURN
            as.assay_name AS assay_name,
            ss.study_id AS study_id
        ORDER BY CASE $order_by
            WHEN 'study_id' THEN study_id_num
            WHEN 'assay_name' THEN assay_name 
            ELSE study_id_num END
        SKIP $offset
        LIMIT $first
    """)

    fileOverview(study_ids: [String] = [], file_ids: [String]=[], order_by: String = "", first: Int = 100, offset: Int = 0): [FileOverview] @cypher(statement: """
        MATCH (f:file)
          WHERE size($file_ids) = 0 OR f.file_id IN $file_ids
        MATCH (f)-->(study)
        OPTIONAL MATCH (f)-[:file_of_study]->(samp)-[:sample_in_study]->(ss)-[:study_of_program]->(p)
        OPTIONAL MATCH (f)-[:file_of_study]->(s1)-[:study_of_program]-(p1)
        WITH
            ss.study_id AS study_id, toInteger(split(ss.study_id,'-')[2]) as study_id_num,
            f, ss, p, study, samp, s1, p1
          WHERE (size($study_ids) = 0 OR study_id IN $study_ids)
        RETURN
            f.file_id AS file_id,
            f.file_name AS file_name,
            head(labels(study)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            CASE p WHEN null THEN p1.program_acronym ELSE p.program_acronym END AS program,
            CASE ss WHEN null THEN s1.study_acronym ELSE ss.study_acronym END AS study_acronym,
            ss.study_id AS study_id,
            samp.sample_id AS sample_id,
            p.program_id as program_id
        ORDER BY CASE $order_by
            WHEN 'study_id' THEN study_id_num
            WHEN 'file_id' THEN file_id
            WHEN 'file_name' THEN file_name
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            ELSE file_name END
        SKIP $offset
        LIMIT $first
    """)

    fileOverviewDesc(study_ids: [String] = [], file_ids: [String]=[], order_by: String = "", first: Int = 100, offset: Int = 0): [FileOverview] @cypher(statement: """
        MATCH (f:file)
          WHERE size($file_ids) = 0 OR f.file_id IN $file_ids
        MATCH (f)-->(study)
        OPTIONAL MATCH (f)-[:file_of_study]->(samp)-[:sample_in_study]->(ss)-[:study_of_program]->(p)
        OPTIONAL MATCH (f)-[:file_of_study]->(s1)-[:study_of_program]-(p1)
        WITH
            ss.study_id AS study_id, toInteger(split(ss.study_id,'-')[2]) as study_id_num,
            f, ss, p, study, samp, s1, p1
          WHERE (size($study_ids) = 0 OR study_id IN $study_ids)
        RETURN
            f.file_id AS file_id,
            f.file_name AS file_name,
            head(labels(study)) AS association,
            f.file_description AS file_description,
            f.file_format AS file_format,
            f.file_size AS file_size,
            CASE p WHEN null THEN p1.program_acronym ELSE p.program_acronym END AS program,
            CASE ss WHEN null THEN s1.study_acronym ELSE ss.study_acronym END AS arm,
            ss.study_study_id AS study_id,
            samp.sample_id AS sample_id,
            p.program_id as program_id
        ORDER BY CASE $order_by
            WHEN 'study_id' THEN study_id_num
            WHEN 'file_id' THEN file_id
            WHEN 'file_name' THEN file_name
            WHEN 'association' THEN association
            WHEN 'file_description' THEN file_description
            WHEN 'file_format' THEN file_format
            WHEN 'file_size' THEN file_size
            WHEN 'sample_id' THEN sample_id
            ELSE file_name END DESC
        SKIP $offset
        LIMIT $first
    """)

}
