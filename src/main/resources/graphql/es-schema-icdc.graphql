type CaseOverviewES {
    case_id: String
    study_code: String
    study_type: String
    cohort: String
    breed: String
    diagnosis: String
    stage_of_disease: String
    age: Float
    sex: String
    neutered_status: String
    weight: Float
    response_to_treatment: String
    disease_site: String
    files: [String]
    other_cases: [String]
    individual_id: String
    primary_disease_site: String
    date_of_diagnosis: String
    histology_cytopathology: String
    histological_grade: String
    pathology_report: String
    treatment_data: String
    follow_up_data: String
    concurrent_disease: String
    concurrent_disease_type: String
    arm: String
}

type SampleOverviewES {
    sample_id: String
    case_id: String
    breed: String
    diagnosis: String
    sample_site: String
    sample_type: String
    sample_pathology: String
    tumor_grade: String
    sample_chronology: String
    percentage_tumor: String
    necropsy_sample: String
    sample_preservation: String
    files: [String]
    physical_sample_type: String
    general_sample_pathology: String
    tumor_sample_origin: String
    comment: String
    individual_id: String
    other_cases: [String]
    patient_age_at_enrollment: String
    sex: String
    neutered_indicator: String
    weight: String
    primary_disease_site: String
    stage_of_disease: String
    date_of_diagnosis: String
    histology_cytopathology: String
    histological_grade: String
    best_response: String
    pathology_report: String
    treatment_data: String
    follow_up_data: String
    concurrent_disease: String
    concurrent_disease_type: String
    cohort_description: String
    arm: String
}

type FileOverviewES {
    file_name: String
    file_type: String
    association: String
    file_description: String
    file_format: String
    file_size: Float
    case_id: String
    breed: String
    diagnosis: String
    study_code: String
    file_uuid: String
    sample_id: String
    sample_site: String
    physical_sample_type: String
    general_sample_pathology: String
    tumor_sample_origin: String
    summarized_sample_type: String
    specific_sample_pathology: String
    date_of_sample_collection: String
    tumor_grade: String
    sample_chronology: String
    percentage_tumor: String
    necropsy_sample: String
    sample_preservation: String
    comment: String
    individual_id: String
    patient_age_at_enrollment: String
    sex: String
    neutered_indicator: String
    weight: String
    primary_disease_site: String
    stage_of_disease: String
    date_of_diagnosis: String
    histology_cytopathology: String
    histological_grade: String
    best_response: String
    pathology_report: String
    treatment_data: String
    follow_up_data: String
    concurrent_disease: String
    concurrent_disease_type: String
    cohort_description: String
    arm: String
    other_cases: [String]
}

type CaseOverviewES2 {
    case_id: String
    study_code: String
    study_type: String
    cohort: String
    breed: String
    diagnosis: String
    stage_of_disease: String
    age: Float
    sex: String
    neutered_status: String
    weight: Float
    response_to_treatment: String
    disease_site: String
    files: [String]
    other_cases: [String]
    individual_id: String
    primary_disease_site: String
    date_of_diagnosis: String
    histology_cytopathology: String
    histological_grade: String
    pathology_report: String
    treatment_data: String
    follow_up_data: String
    concurrent_disease: String
    concurrent_disease_type: String
    arm: String
}

type GroupCountES {
    group: String
    count: Int
}

type ProgramStudies {
    program: String
    caseSize: Int
    studies: [StudyInfo]
}

type StudyInfo {
    study: String
    caseSize: Int
}

type SearchResult {
    numberOfPrograms: Int
    numberOfStudies: Int
    numberOfCases: Int
    numberOfSamples: Int
    numberOfFiles: Int
    numberOfStudyFiles: Int
    numberOfAliquots: Int
    volumeOfData: Float

    caseCountByProgram: [GroupCountES]
    caseCountByStudyCode: [GroupCountES]
    caseCountByStudyType: [GroupCountES]
    caseCountByBiobank: [GroupCountES]
    caseCountByStudyParticipation: [GroupCountES]
    caseCountByBreed: [GroupCountES]
    caseCountByDiagnosis: [GroupCountES]
    caseCountByDiseaseSite: [GroupCountES]
    caseCountByStageOfDisease: [GroupCountES]
    caseCountByGender: [GroupCountES]
    caseCountByNeuteredStatus: [GroupCountES]
    caseCountByFileFormat: [GroupCountES]
    programsAndStudies: [ProgramStudies]

    filterCaseCountByProgram: [GroupCountES]
    filterCaseCountByStudyCode: [GroupCountES]
    filterCaseCountByStudyType: [GroupCountES]
    filterCaseCountByBiobank: [GroupCountES]
    filterCaseCountByStudyParticipation: [GroupCountES]
    filterCaseCountByBreed: [GroupCountES]
    filterCaseCountByDiagnosis: [GroupCountES]
    filterCaseCountByDiseaseSite: [GroupCountES]
    filterCaseCountByStageOfDisease: [GroupCountES]
    filterCaseCountByResponseToTreatment: [GroupCountES]
    filterCaseCountBySex: [GroupCountES]
    filterCaseCountByNeuteredStatus: [GroupCountES]
    filterCaseCountBySampleSite: [GroupCountES]
    filterCaseCountBySampleType: [GroupCountES]
    filterCaseCountBySamplePathology: [GroupCountES]
    filterCaseCountByFileAssociation: [GroupCountES]
    filterCaseCountByFileType: [GroupCountES]
    filterCaseCountByFileFormat: [GroupCountES]
}

type ClinicalDataNodeCounts {
    agent: Int,
    cycle: Int,
    visit: Int,
    follow_up: Int,
    adverse_event: Int,
    off_treatment: Int,
    off_study: Int,
    prior_therapy: Int,
    prior_surgery: Int,
    agent_administration: Int,
    physical_exam: Int,
    vital_signs: Int,
    disease_extent: Int,
    lab_exam: Int
}

schema {
    query: QueryType
}

type QueryType {
    searchCases (
        case_ids: [String] = [],
        program: [String] = [],
        study: [String] = [],
        study_type: [String] = [],
        biobank: [String] = [],
        study_participation: [String] = [],
        breed: [String] = [],
        diagnosis: [String] = [],
        disease_site: [String] = [],
        stage_of_disease: [String] = [],
        response_to_treatment: [String] = [],
        sex: [String] = [],
        neutered_status: [String] = [],

        sample_site: [String] = [],
        sample_type: [String] = [],
        sample_pathology: [String] = [],

        file_association: [String] = [],
        file_type: [String] = [],
        file_format: [String] = []
    ): SearchResult

    caseOverview (
        case_ids: [String] = [],
        program: [String] = [],
        study: [String] = [],
        study_type: [String] = [],
        biobank: [String] = [],
        study_participation: [String] = [],
        breed: [String] = [],
        diagnosis: [String] = [],
        disease_site: [String] = [],
        stage_of_disease: [String] = [],
        response_to_treatment: [String] = [],
        sex: [String] = [],
        neutered_status: [String] = [],

        sample_site: [String] = [],
        sample_type: [String] = [],
        sample_pathology: [String] = [],

        file_association: [String] = [],
        file_type: [String] = [],
        file_format: [String] = [],
        order_by: String = "case_ids",
        sort_direction: String = "ASC",
        first: Int = 10,
        offset: Int = 0
    ): [CaseOverviewES]

    sampleOverview(
        case_ids: [String] = [],
        sample_ids: [String] = [],
        program: [String] = [],
        study: [String] = [],
        study_type: [String] = [],
        biobank: [String] = [],
        study_participation: [String] = [],
        breed: [String] = [],
        diagnosis: [String] = [],
        disease_site: [String] = [],
        stage_of_disease: [String] = [],
        response_to_treatment: [String] = [],
        sex: [String] = [],
        neutered_status: [String] = [],

        sample_site: [String] = [],
        sample_type: [String] = [],
        sample_pathology: [String] = [],

        file_association: [String] = [],
        file_type: [String] = [],
        file_format: [String] = [],
        order_by: String = "sample_ids",
        sort_direction: String = "ASC",
        first: Int = 10,
        offset: Int = 0
    ): [SampleOverviewES]

    fileOverview(
        file_level: [String] = [],
        case_ids: [String] = [],
        sample_ids: [String] = [],
        file_uuids: [String] = [],
        program: [String] = [],
        study: [String] = [],
        study_type: [String] = [],
        biobank: [String] = [],
        study_participation: [String] = [],
        breed: [String] = [],
        diagnosis: [String] = [],
        disease_site: [String] = [],
        stage_of_disease: [String] = [],
        response_to_treatment: [String] = [],
        sex: [String] = [],
        neutered_status: [String] = [],

        sample_site: [String] = [],
        sample_type: [String] = [],
        sample_pathology: [String] = [],

        file_association: [String] = [],
        file_type: [String] = [],
        file_format: [String] = [],
        order_by: String = "file_name",
        sort_direction: String = "ASC",
        first: Int = 10,
        offset: Int = 0
    ): [FileOverviewES]

    clinicalDataNodeCounts(study_code: String!): ClinicalDataNodeCounts @cypher(statement: """
    MATCH (s:study)
    WHERE s.clinical_study_designation = $study_code
    OPTIONAL MATCH (sa:study_arm)<-[:of_study_arm]-(a:agent)
    OPTIONAL MATCH (s)<-[*1..2]-(c:case)
    OPTIONAL MATCH (c)<-[:of_case]-(cy:cycle)
    OPTIONAL MATCH (c)<-[*1..2]-(v:visit)
    OPTIONAL MATCH (c)<-[:of_case]-(fu:follow_up)
    OPTIONAL MATCH (c)<-[:of_case]-(ae:adverse_event)
    OPTIONAL MATCH (c)<-[:of_case]-(e:enrollment)
    OPTIONAL MATCH (c)-[:went_off_treatment]->(ot:off_treatment)
    OPTIONAL MATCH (c)-[:went_off_study]->(os:off_study)
    OPTIONAL MATCH (e)<-[:at_enrollment]-(pt:prior_therapy)
    OPTIONAL MATCH (e)<-[:at_enrollment]-(ps:prior_surgery)
    OPTIONAL MATCH (v)<-[:on_visit]-(aa:agent_administration)
    OPTIONAL MATCH (v)<-[:on_visit]-(pe:physical_exam)
    OPTIONAL MATCH (v)<-[:on_visit]-(vs:vital_signs)
    OPTIONAL MATCH (v)<-[:on_visit]-(de:disease_extent)
    OPTIONAL MATCH (v)<-[:on_visit]-(le:lab_exam)
    RETURN {
        agent: COUNT(DISTINCT a),
        cycle: COUNT(DISTINCT cy),
        visit: COUNT(DISTINCT v),
        follow_up: COUNT(DISTINCT fu),
        adverse_event: COUNT(DISTINCT ae),
        off_treatment: COUNT(DISTINCT ot),
        off_study: COUNT(DISTINCT os),
        prior_therapy: COUNT(DISTINCT pt),
        prior_surgery: COUNT(DISTINCT ps),
        agent_administration: COUNT(DISTINCT aa),
        physical_exam: COUNT(DISTINCT pe),
        vital_signs: COUNT(DISTINCT vs),
        disease_extent: COUNT(DISTINCT de),
        lab_exam: COUNT(DISTINCT le)
    }
    """)

    clinicalDataNodeCaseCounts(study_code: String!): ClinicalDataNodeCounts @cypher(statement: """
    MATCH (s:study)
    WHERE s.clinical_study_designation = $study_code
    OPTIONAL MATCH (sa:study_arm)<-[:of_study_arm]-(a:agent)
    OPTIONAL MATCH (s)<-[*1..2]-(c:case)
    OPTIONAL MATCH (c)<-[:of_case]-(cy:cycle)
    OPTIONAL MATCH (c)<-[*1..2]-(v:visit)
    OPTIONAL MATCH (c)<-[:of_case]-(fu:follow_up)
    OPTIONAL MATCH (c)-[:had_adverse_event]->(ae:adverse_event)
    OPTIONAL MATCH (c)<-[:of_case]-(e:enrollment)
    OPTIONAL MATCH (c)-[:went_off_treatment]->(ot:off_treatment)
    OPTIONAL MATCH (c)-[:went_off_study]->(os:off_study)
    OPTIONAL MATCH (e)<-[:at_enrollment]-(pt:prior_therapy)
    OPTIONAL MATCH (e)<-[:at_enrollment]-(ps:prior_surgery)
    OPTIONAL MATCH (v)<-[:on_visit]-(aa:agent_administration)
    OPTIONAL MATCH (v)<-[:on_visit]-(pe:physical_exam)
    OPTIONAL MATCH (v)<-[:on_visit]-(vs:vital_signs)
    OPTIONAL MATCH (v)<-[:on_visit]-(de:disease_extent)
    OPTIONAL MATCH (v)<-[:on_visit]-(le:lab_exam)
    RETURN {
        agent: COUNT(DISTINCT a),
        cycle: COUNT(DISTINCT cy.case_id),
        visit: COUNT(DISTINCT left(v.visit_id, 13)),
        follow_up: COUNT(DISTINCT fu),
        adverse_event: COUNT(DISTINCT ae),
        off_treatment: COUNT(DISTINCT ot),
        off_study: COUNT(DISTINCT os),
        prior_therapy: COUNT(DISTINCT pt),
        prior_surgery: COUNT(DISTINCT ps),
        agent_administration: COUNT(DISTINCT aa),
        physical_exam: COUNT(DISTINCT pe.case_id),
        vital_signs: COUNT(DISTINCT vs.case_id),
        disease_extent: COUNT(DISTINCT de.case_id),
        lab_exam: COUNT(DISTINCT le)
    }
    """)

    clinicalDataNodeNames: [String] @cypher(statement: """
    UNWIND [
        'AGENT',
        'CYCLE',
        'VISIT',
        'PRIOR THERAPY',
        'PRIOR SURGERY',
        'AGENT ADMINISTRATION',
        'PHYSICAL EXAM',
        'VITAL SIGNS',
        'LAB EXAM',
        'ADVERSE EVENT',
        'DISEASE EXTENT',
        'FOLLOW UP',
        'OFF STUDY',
        'OFF TREATMENT'
    ] AS clinical_data_node_names
    RETURN clinical_data_node_names
    """)
}
