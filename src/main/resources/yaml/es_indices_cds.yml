# Indices settings
Indices:
  # First index
  # Name of the index to be created, existing index with same name will be deleted
  # Subjects index
  - index_name: subjects
    type: neo4j
    # type mapping for each property of the index
    mapping:
      # Filter properties
      accesses:
        type: keyword
      acl:
        type: keyword
      analyte_type:
        type: keyword
      experimental_strategies:
        type: keyword
      file_types:
        type: keyword
      genders:
        type: keyword
      instrument_models:
        type: keyword
      is_tumor:
        type: keyword
      library_layouts:
        type: keyword
      library_selections:
        type: keyword
      library_sources:
        type: keyword
      library_strategies:
        type: keyword
      number_of_study_participants:
        type: integer
      number_of_study_samples:
        type: integer
      phs_accession:
        type: keyword
      platforms:
        type: keyword
      primary_diagnoses:
        type: keyword
      reference_genome_assemblies:
        type: keyword
      site:
        type: keyword
      studies:
        type: keyword
      study_data_types:
        type: keyword
      # Global Search properties
      site_gs:
        type: search_as_you_type
      study_gs:
        type: search_as_you_type
      subject_id_gs:
        type: search_as_you_type
      # Overview properties
      files:
        type: keyword
      samples:
        type: keyword
      subject_ids:
        type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (s:study)
      OPTIONAL MATCH (s)<--(p:participant)<--(samp:sample)
      WITH s, COUNT(DISTINCT p) as num_study_participants, COUNT(DISTINCT samp) as num_study_samples
      MATCH (s)<--(p:participant)
      OPTIONAL MATCH (p)<--(samp:sample)
      OPTIONAL MATCH (p)<--(diag:diagnosis)
      OPTIONAL MATCH (samp)<--(f:file)
      OPTIONAL MATCH (f)<--(g:genomic_info)
      WITH s, p, samp, diag, f, g, num_study_participants, num_study_samples, \"^\\s*$\" AS empty_string, \"Not Specified\" as ns
      RETURN
          apoc.text.replace(s.data_access_level, empty_string, ns) AS accesses,
          apoc.text.replace(s.acl, empty_string, ns) AS acl,
          COLLECT(DISTINCT apoc.text.replace(f.experimental_strategy_and_data_subtypes, empty_string, ns)) AS experimental_strategies,
          COLLECT(DISTINCT apoc.text.replace(f.file_type, empty_string, ns)) AS file_types,
          apoc.text.replace(p.gender, empty_string, ns) AS genders,
          COLLECT(DISTINCT apoc.text.replace(g.instrument_model, empty_string, ns)) AS instrument_models,
          COLLECT(DISTINCT apoc.text.replace(samp.sample_tumor_status, empty_string, ns)) AS is_tumor,
          COLLECT(DISTINCT apoc.text.replace(g.library_layout, empty_string, ns)) AS library_layouts,
          COLLECT(DISTINCT apoc.text.replace(g.library_selection, empty_string, ns)) AS library_selections,
          COLLECT(DISTINCT apoc.text.replace(g.library_source, empty_string, ns)) AS library_sources,
          COLLECT(DISTINCT apoc.text.replace(g.library_strategy, empty_string, ns)) AS library_strategies,
          COALESCE(num_study_participants, 0) AS number_of_study_participants,
          COALESCE(num_study_samples, 0) AS number_of_study_samples,
          apoc.text.replace(s.phs_accession, empty_string, ns) AS phs_accession,
          COLLECT(DISTINCT apoc.text.replace(g.platform, empty_string, ns)) AS platforms,
          COLLECT(DISTINCT apoc.text.replace(diag.primary_diagnosis, empty_string, ns)) AS primary_diagnoses,
          COLLECT(DISTINCT apoc.text.replace(g.reference_genome_assembly, empty_string, ns)) AS reference_genome_assemblies,
          COLLECT(DISTINCT apoc.text.replace(diag.primary_site, empty_string, ns)) AS site,
          apoc.text.replace(s.study_name, empty_string, ns) AS studies,      
          apoc.text.replace(s.study_data_types, empty_string, ns) AS study_data_types, 
          
          COLLECT(DISTINCT apoc.text.replace(diag.primary_site, empty_string, ns)) AS site_gs,
          apoc.text.replace(s.study_name, empty_string, ns) AS study_gs,
          apoc.text.replace(p.participant_id, empty_string, ns) AS subject_id_gs,
          
          COLLECT(DISTINCT apoc.text.replace(samp.sample_type, empty_string, ns)) AS analyte_type,
          COLLECT(DISTINCT apoc.text.replace(f.file_id, empty_string, ns)) AS files,
          COLLECT(DISTINCT apoc.text.replace(samp.sample_id, empty_string, ns)) AS samples,
          apoc.text.replace(p.participant_id, empty_string, ns) AS subject_ids
    "

# Samples index
  - index_name: samples
    type: neo4j
    mapping:
      # Filter properties
      accesses:
        type: keyword
      acl:
        type: keyword
      experimental_strategies:
        type: keyword
      file_types:
        type: keyword
      genders:
        type: keyword
      instrument_models:
        type: keyword
      is_tumor:
        type: keyword
      library_layouts:
        type: keyword
      library_selections:
        type: keyword
      library_sources:
        type: keyword
      library_strategies:
        type: keyword
      number_of_study_participants:
        type: integer
      number_of_study_samples:
        type: integer
      phs_accession:
        type: keyword
      platforms:
        type: keyword
      primary_diagnoses:
        type: keyword
      reference_genome_assemblies:
        type: keyword
      site:
        type: keyword
      studies:
        type: keyword
      study_data_types:
        type: keyword
      # Global search properties
      sample_id_gs:
        type: search_as_you_type
      is_tumor_gs:
        type: search_as_you_type
      analyte_type_gs:
        type: search_as_you_type
      # Overview properties
      analyte_type:
        type: keyword
      files:
        type: keyword
      sample_id:
        type: keyword
      sample_ids:
        type: keyword
      subject_ids:
        type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (s:study)
      OPTIONAL MATCH (s)<--(p:participant)<--(samp:sample)
      WITH s, COUNT(DISTINCT p) as num_study_participants, COUNT(DISTINCT samp) as num_study_samples
      MATCH (s)<--(p:participant)<--(samp:sample)
      OPTIONAL MATCH (p)<--(diag:diagnosis)
      OPTIONAL MATCH (samp)<--(f:file)
      OPTIONAL MATCH (f)<--(g:genomic_info)
      WITH num_study_participants, num_study_samples, s, p, samp, diag, f, g, \"^\\s*$\" AS empty_string, \"Not Specified\" as ns
      RETURN
          apoc.text.replace(s.data_access_level, empty_string, ns) AS accesses,
          apoc.text.replace(s.acl, empty_string, ns) AS acl,
          COLLECT(DISTINCT apoc.text.replace(f.experimental_strategy_and_data_subtypes, empty_string, ns)) AS experimental_strategies,
          COLLECT(DISTINCT apoc.text.replace(f.file_type, empty_string, ns)) AS file_types,
          apoc.text.replace(p.gender, empty_string, ns) AS genders,
          COLLECT(DISTINCT apoc.text.replace(g.instrument_model, empty_string, ns)) AS instrument_models,
          COLLECT(DISTINCT apoc.text.replace(samp.sample_tumor_status, empty_string, ns)) AS is_tumor,
          COLLECT(DISTINCT apoc.text.replace(g.library_layout, empty_string, ns)) AS library_layouts,
          COLLECT(DISTINCT apoc.text.replace(g.library_selection, empty_string, ns)) AS library_selections,
          COLLECT(DISTINCT apoc.text.replace(g.library_source, empty_string, ns)) AS library_sources,
          COLLECT(DISTINCT apoc.text.replace(g.library_strategy, empty_string, ns)) AS library_strategies,
          COALESCE(num_study_participants, 0) AS number_of_study_participants,
          COALESCE(num_study_samples, 0) AS number_of_study_samples,
          apoc.text.replace(s.phs_accession, empty_string, ns) AS phs_accession,
          COLLECT(DISTINCT apoc.text.replace(g.platform, empty_string, ns)) AS platforms,
          COLLECT(DISTINCT apoc.text.replace(diag.primary_diagnosis, empty_string, ns)) AS primary_diagnoses,
          COLLECT(DISTINCT apoc.text.replace(g.reference_genome_assembly, empty_string, ns)) AS reference_genome_assemblies,
          COLLECT(DISTINCT apoc.text.replace(diag.primary_site, empty_string, ns)) AS site,
          apoc.text.replace(s.study_name, empty_string, ns) AS studies,      
          apoc.text.replace(s.study_data_types, empty_string, ns) AS study_data_types, 
          
          apoc.text.replace(samp.sample_id, empty_string, ns) AS sample_id_gs,
          apoc.text.replace(samp.sample_tumor_status, empty_string, ns) AS is_tumor_gs,
          apoc.text.replace(samp.sample_type, empty_string, ns) AS analyte_type_gs,
          
          apoc.text.replace(samp.sample_type, empty_string, ns) AS analyte_type,
          COLLECT(DISTINCT apoc.text.replace(f.file_id, empty_string, ns)) AS files,
          apoc.text.replace(samp.sample_id, empty_string, ns) AS sample_id,
          apoc.text.replace(samp.sample_id, empty_string, ns) AS sample_ids,
          apoc.text.replace(p.participant_id, empty_string, ns) AS subject_ids
    "

# Files index
  - index_name: files
    type: neo4j
    mapping:
      # Filter properties
      accesses:
        type: keyword
      acl:
        type: keyword
      experimental_strategies:
        type: keyword
      file_types:
        type: keyword
      genders:
        type: keyword
      instrument_models:
        type: keyword
      is_tumor:
        type: keyword
      library_layouts:
        type: keyword
      library_selections:
        type: keyword
      library_sources:
        type: keyword
      library_strategies:
        type: keyword
      number_of_study_participants:
        type: integer
      number_of_study_samples:
        type: integer
      phs_accession:
        type: keyword
      platforms:
        type: keyword
      primary_diagnoses:
        type: keyword
      reference_genome_assemblies:
        type: keyword
      site:
        type: keyword
      studies:
        type: keyword
      study_data_types:
        type: keyword
      # Global search properties
      file_id_gs:
        type: search_as_you_type
      file_name_gs:
        type: search_as_you_type
      file_type_gs:
        type: search_as_you_type
      # Overview properties
      analyte_type:
        type: keyword
      file_id:
        type: keyword
      file_ids:
        type: keyword
      file_name:
        type: keyword
      file_names:
        type: keyword
      file_type:
        type: keyword
      file_size:
        type: long
      md5sum:
        type: keyword
      sample_id:
        type: keyword
      sample_ids:
        type: keyword
      subject_ids:
        type: keyword


    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (s:study)<--(p:participant)
      OPTIONAL MATCH (p)<--(samp:sample)
      WITH s, COUNT(DISTINCT samp) as num_study_samples, COUNT(DISTINCT p) as num_study_participants
      MATCH (s)<--(p:participant)<--(samp:sample)<--(f:file)
      OPTIONAL MATCH (p:participant)<--(samp)
      OPTIONAL MATCH (s)<--(p)
      OPTIONAL MATCH (p)<--(diag:diagnosis)
      OPTIONAL MATCH (f)<--(g:genomic_info)
      WITH s, p, samp, f, diag, g, num_study_samples, num_study_participants, \"^\\s*$\" AS empty_string, \"Not Specified\" as ns
      RETURN
          apoc.text.replace(s.data_access_level, empty_string, ns) AS accesses,
          apoc.text.replace(s.acl, empty_string, ns) AS acl,
          collect(DISTINCT apoc.text.replace(f.experimental_strategy_and_data_subtypes, empty_string, ns)) AS experimental_strategies,
          COLLECT(DISTINCT apoc.text.replace(f.file_type, empty_string, ns)) AS file_types,
          apoc.text.replace(p.gender, empty_string, ns) AS genders,
          COLLECT(DISTINCT apoc.text.replace(g.instrument_model, empty_string, ns)) AS instrument_models,
          COLLECT(DISTINCT apoc.text.replace(samp.sample_tumor_status, empty_string, ns)) AS is_tumor,
          COLLECT(DISTINCT apoc.text.replace(g.library_layout, empty_string, ns)) AS library_layouts,
          COLLECT(DISTINCT apoc.text.replace(g.library_selection, empty_string, ns)) AS library_selections,
          COLLECT(DISTINCT apoc.text.replace(g.library_source, empty_string, ns)) AS library_sources,
          COLLECT(DISTINCT apoc.text.replace(g.library_strategy, empty_string, ns)) AS library_strategies,
          COALESCE(num_study_participants, 0) AS number_of_study_participants,
          COALESCE(num_study_samples, 0) AS number_of_study_samples,
          apoc.text.replace(s.phs_accession, empty_string, ns) AS phs_accession,
          COLLECT(DISTINCT apoc.text.replace(g.platform, empty_string, ns)) AS platforms,
          COLLECT(DISTINCT apoc.text.replace(diag.primary_diagnosis, empty_string, ns)) AS primary_diagnoses,
          COLLECT(DISTINCT apoc.text.replace(g.reference_genome_assembly, empty_string, ns)) AS reference_genome_assemblies,
          COLLECT(DISTINCT apoc.text.replace(diag.primary_site, empty_string, ns)) AS site,
          apoc.text.replace(s.study_name, empty_string, ns) AS studies,      
          apoc.text.replace(s.study_data_types, empty_string, ns) AS study_data_types, 
          
          apoc.text.replace(f.file_id, empty_string, ns) AS file_id_gs,
          apoc.text.replace(f.file_name, empty_string, ns) AS file_name_gs,
          apoc.text.replace(f.file_type, empty_string, ns) AS file_type_gs,
    
          apoc.text.replace(samp.sample_type, empty_string, ns) AS analyte_type,
          apoc.text.replace(f.file_id, empty_string, ns) AS file_id,
          apoc.text.replace(f.file_id, empty_string, ns) AS file_ids,
          apoc.text.replace(f.file_name, empty_string, ns) AS file_name,
          apoc.text.replace(f.file_name, empty_string, ns) AS file_names,
          apoc.text.replace(f.file_type, empty_string, ns) AS file_type,
          f.file_size AS file_size,
          apoc.text.replace(f.md5sum, empty_string, ns) AS md5sum,
          apoc.text.replace(samp.sample_id, empty_string, ns) AS sample_id,
          apoc.text.replace(samp.sample_id, empty_string, ns) AS sample_ids,
          apoc.text.replace(p.participant_id, empty_string, ns) AS subject_ids
    "

  - index_name: programs
    type: neo4j
    # type mapping for each property of the index
    mapping:
      program_name:
        type: search_as_you_type
      program_short_description:
        type: search_as_you_type
      program_full_description:
        type: search_as_you_type
      program_external_url:
        type: search_as_you_type
      program_sort_order:
        type: search_as_you_type
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (p:program)
      WITH p, \"Not Specified\" AS not_specified
      RETURN
        p.program_name AS program_name,
        coalesce(p.program_short_description, not_specified) AS program_short_description,
        coalesce(p.program_full_description, not_specified) AS program_full_description,
        coalesce(p.program_external_url, not_specified) AS program_external_url,
        coalesce(p.program_sort_order, not_specified) AS program_sort_order
    "

  - index_name: studies
    type: neo4j
    # type mapping for each property of the index
    mapping:
      study_code:
        type: search_as_you_type
      phs_accession_gs:
        type: search_as_you_type
      phs_accession:
        type: keyword
      study_name:
        type: search_as_you_type
      study_data_types:
        type: keyword
      acl:
        type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (s:study)
      OPTIONAL MATCH (s)<--(p:participant)
      OPTIONAL MATCH (p)<--(samp:sample)
      RETURN
        s.study_name AS study_code,
        s.phs_accession AS phs_accession_gs,
        s.phs_accession AS phs_accession,
        s.study_name AS study_name,
        s.study_data_types AS study_data_types,
        s.acl AS acl,
        COUNT(DISTINCT p) AS number_of_participants,
        COUNT(DISTINCT samp) AS number_of_samples
    "

  - index_name: subject_ids
    type: neo4j
    # type mapping for each property of the index
    mapping:
      phs_accession:
        type: keyword
      subject_id:
        type: keyword
      # subject_ids must be converted into lower case
      subject_ids:
        type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (p:participant)-->(s:study)
      RETURN
        s.phs_accession AS phs_accession,
        p.participant_id AS subject_id,
        toLower(p.participant_id) AS subject_ids

    "


  - index_name: about_page
    type: about_file
    # type mapping for each property of the index
    mapping:
      page:
        type: search_as_you_type
      title:
        type: search_as_you_type
      primaryContentImage:
        type: text
      content:
        type: object

  - index_name: model_nodes
    type: model
    subtype: node
    # type mapping for each property of the index
    mapping:
      node:
        type: search_as_you_type
      node_kw:
        type: keyword

  - index_name: model_properties
    type: model
    subtype: property
    # type mapping for each property of the index
    mapping:
      node:
        type: search_as_you_type
      property:
        type: search_as_you_type
      property_kw:
        type: keyword
      property_description:
        type: search_as_you_type
      property_required:
        type: search_as_you_type
      property_type:
        type: search_as_you_type

  - index_name: model_values
    type: model
    subtype: value
    # type mapping for each property of the index
    mapping:
      node:
        type: search_as_you_type
      property:
        type: search_as_you_type
      property_description:
        type: search_as_you_type
      property_required:
        type: search_as_you_type
      property_type:
        type: search_as_you_type
      value:
        type: search_as_you_type
      value_kw:
        type: keyword
