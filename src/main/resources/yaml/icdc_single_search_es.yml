# Query Parameters Required
  # index: Declare Elasticsearch Index Name
  # name: Declare GraphQl Query Name
  # filter: Declare Type of GraphQl Query
  # resultType: Declare Desired Return Type

# Filter Type
  # - default(filter query in Elasticsearch triggered to filter by graphQL input arguments)
    # Required: selectedField
  # - pagination(including pagination)
    # Required: none
    # Optional: defaultSortField, alternativeSortField
  # - aggregation
    # Required: selectedField
    # Optional: filter
  # - range
    # Required: selectedField
    # Optional: filter
  # - sub_aggregation
    # Required: selectedField, subAggSelectedField
  # - global
    # Required: defaultSortField, query
      # query
        # Required: field, type
          # type includes elements with term, match, and wildcard
    # Optional: typedSearch
      # query: same rules applied as required above

# Return Type
  # - object_array @return List<Map<String, Object>>
  # - aggregation @return List<Map<String, Object>>
  # - int @return Integer
  # - range @return Map<String, Object>
    # ex) {lowerBound: 0.00, upperBound: 0.00, subjects: XXX}
  # - arm_program @return List<Map<String, Object>>
  # - int_total_count @return Long
  # - str_array @return List<String>
  # - global_about @return Map<String, Object>
    # ex) {type: about, page: XXXX, title: XXXX, text, XXXX}
  # - global @return Map<String, Object>
    # ex) {result: {A: XX, B: X...}, count: 9999}
  # - global_multi_models @Map<String, Object>
    #  ex) {result: {A: XX, B: X...}, count: 9999}

# Highlight
  # Pre-requisite: Global Filter Type
  # highlight:
    # Required: fields
      # declare list of Strings to highlight
    # Optional: fragmentSize, preTag, postTag, fragmentSize

# Query Pairing Must be Filter Type <-> Return Type
  # default <-> object_array, str_array
  # pagination <-> object_array
  # sub_aggregation <-> arm_program
  # aggregation <-> aggregation, int, int_total_count
  # range <-> range
  # global <-> global, global_multi_models

# Detailed Explanation
  # alternativeSortField: sort desired field alternatively, especially sorting texts containing number
query:
  - name: caseOverview
    index:
      - cases
    filter:
      type: pagination
      defaultSortField: case_id
    result:
      type: object_array

#    Change Elasticsearch Schema
  - name: sampleOverview
    index:
      - samples
    filter:
      type: pagination
      defaultSortField: sample_ids
    result:
      type: object_array

  - name: fileOverview
    index:
      - files
    filter:
      type: pagination
      defaultSortField: file_name
    dynamicFilter:
      index:
        - files
      dynamicField: case_id
      targetField: all_case_ids
    result:
      type: object_array

  - name: filesInListDesc
    index:
      - files
    filter:
      type: pagination
      sortDirection: desc
      defaultSortField: file_name
    result:
      type: object_array

  - name: filesInList
    index:
      - files
    filter:
      type: pagination
      defaultSortField: file_name
    result:
      type: object_array