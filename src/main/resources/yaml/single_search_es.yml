# Query Parameters Required
  # index: Declare Elasticsearch Index Name
  # name: Declare GraphQl Query Name
  # filter: Declare Type of GraphQl Query
  # resultType: Declare Desired Return Type

# Filter Type
  # - default(filter query in Elasticsearch triggered to filter by graphQL input arguments)
    # Required: selectedField
  # - table(including pagination)
    # Required: none
    # Optional: defaultSortField, alternativeSort
  # - aggregation
    # Required: selectedField
    # Optional: filter
  # - range
    # Required: selectedField
    # Optional: filter
  # - sub_aggregation
    # Required: selectedField, subAggSelectedField
  # - global
    # Required: defaultSortField, query
      # query
        # Required: field, type
          # type includes elements with term, match, and wildcard
    # Optional: typedSearch
      # query: same rules applied as required above
  # - nested
    # Required: defaultSortField, query
      # query
        # Required: type, selectedField, nestedPath
          # selectedField: declare a target field in aggregation search
          # nestedPath: declare a root path in nested document
    # Optional: nestedParameters
      # nestedParameters: declare number of fields to search. Multiple fields
      # on the purpose of total number of documents filtering multiple nested fields

# Return Type
  # - default @return List<Map<String, Object>>
  # - aggregation @return List<Map<String, Object>>
  # - int @return Integer
  # - range @return Map<String, Object>
    # ex) {lowerBound: 0.00, upperBound: 0.00, subjects: XXX}
  # - arm_program @return List<Map<String, Object>>
  # - int_total_count @return Long
  # - str_list @return List<String>
  # - global_about @return Map<String, Object>
    # ex) {type: about, page: XXXX, title: XXXX, text, XXXX}
  # - global @return Map<String, Object>
    # ex) {result: {A: XX, B: X...}, count: 9999}
  # - global_multi_models @return Map<String, Object>
    #  ex) {result: {A: XX, B: X...}, count: 9999}
  # - global_multi_models @return Map<String, Object>
  # - nested_list @return List<Map<String, Object>>
  # - nested_total @return Integer

# Highlight
  # Pre-requisite: Global Filter Type
  # highlight:
    # Required: fields
      # declare list of Strings to highlight
    # Optional: fragmentSize, preTag, postTag, fragmentSize

# Query Pairing Must be Filter Type <-> Return Type
  # default <-> default, str_list
  # table <-> default
  # sub_aggregation <-> arm_program
  # aggregation <-> aggregation, int(int_total_aggregation, int_total_count)
  # range <-> range
  # global <-> global, global_multi_models
  # nested <-> nested_list, nested_total


# Detailed Explanation
  # alternativeSort: sort desired field alternatively, especially sorting texts containing number
queries:
  - name: subjectOverview
    index:
      - subjects
    filter:
      type: table
      defaultSortField: subject_id_num
      # Declare alternative sort: key, value
      alternativeSort:
        subject_id: subject_id_num
    resultType: default

  - name: sampleOverview
    index:
      - samples
    filter:
      type: table
      defaultSortField: sample_id_num
      # Declare alternative sort: key, value
      alternativeSort:
        sample_id: sample_id_num
        subject_id: subject_id_num
    resultType: default

  - name: fileOverview
    index:
      - files
    filter:
      type: table
      defaultSortField: file_name
      alternativeSort:
        sample_id: sample_id_num
        subject_id: subject_id_num
    resultType: default

  - name: fileIDsFromList
    index:
      - files
    filter:
      type: default
#      selectedField: file_id
      selectedField: file_ids
      # Return All Documents If Fields Contained Empty String
      returnAllParameters:
        - subject_ids
        - sample_ids
        - file_names
    # Return as List<String>
    resultType: str_list

  - name: filesInList
    index:
      - files
    filter:
      type: table
      defaultSortField: file_name
      # Return All Documents If Fields Contained Empty String
      returnAllParameters:
        - file_ids
    resultType: default

  - name: findSubjectIdsInList
    index:
      - subjects
    filter:
      type: default
      caseInsensitive: true
      # Return All Documents If Fields Contained Empty String
      returnAllParameters:
        - subject_ids
    resultType: default
